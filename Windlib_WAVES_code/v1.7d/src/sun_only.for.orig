! sun_only.for - special routines for the sun to run ported vax FORTRAN or
! just do sun specific things or merely serve as place holders for VAX
! routines to satisfy linker references.

!------------------------------------------------------------------------------
! Front end for w_sun_file_select, the menu driven file selection routine.
!---------------------------------------------------------------------------
	integer*4	function	w_get_sun_filename(f)
	implicit	none
	character*(*)	f
	integer*4	w_select_filename	! an entry point
	integer*4	w_sun_file_select
	external	w_sun_file_select	!$pragma C (w_sun_file_select)

	entry	w_select_filename(f)

	w_get_sun_filename = w_sun_file_select(f)
	return

	end

!------------------------------------------------------------------------------
! Dummy routine to satisfy linker references under SunOS 4.1.x
!--------------------------------------------------------------------------
	integer*4	function	w_setup_rt_stream(ch,f)
	implicit	none
	character*(*)	f
	integer*4	ch
	w_setup_rt_stream = 0
	return
	end

!------------------------------------------------------------------------------
! Dummy routine to satisfy linker references under SunOS 4.1.x
!--------------------------------------------------------------------------
!	integer*4	function	w_update_realtime_position(ch,mjr,mnr)
!	integer*4	ch,mjr,mnr
!	mjr = -1
!	mnr = -1
!	w_update_realtime_position = 0
!	return
!	end

!------------------------------------------------------------------------------
! Dummy routine to satisfy linker references under SunOS 4.1.x
!--------------------------------------------------------------------------
	integer*4	function	w_get_file_list2(files, max_files, spec)
	character*(*)	files(*)		! write
	integer*4	max_files		! write
	character*(*)	spec			! read,mask, eg. 'wind_*def.for'
	w_get_file_list2 = 0
	return
	end

!------------------------------------------------------------------------------
! Dummy routine to satisfy linker references under SunOS 4.1.x
!--------------------------------------------------------------------------
	integer*4	function	w_fs3(files, max_files, spec)
	character*(*)	files(*)		! write
	integer*4	max_files		! write
	character*(*)	spec			! read,mask, eg. 'wind_*def.for'
	w_fs3 = 0
	return
	end

!------------------------------------------------------------------------------
! Dummy routine to satisfy linker references under SunOS 4.1.x
!--------------------------------------------------------------------------
	integer*4	function	w_fs4(files, max_files, spec)
	character*(*)	files(*)		! write
	integer*4	max_files		! write
	character*(*)	spec			! read,mask, eg. 'wind_*def.for'
	w_fs4 = 0
	return
	end

!------------------------------------------------------------------------------
! Dummy routine to satisfy linker references under SunOS 4.1.x
!--------------------------------------------------------------------------
	integer*4	function	get_file_dev_logical_name_str(lnm,str)
	character*(*)	lnm, str
	get_file_dev_logical_name_str = 0
	return
	end

!------------------------------------------------------------------------------
! Simulates the VMS routine for allocating and freeing FORTRAN logical
! unit numbers (lun).  Checks to make sure the returned lun is
! not currently in use.
!------------------------------------------------------------------------------
	integer*4	function	lib$get_lun(lun)
	implicit	none
	integer*4	lun
	parameter	start=30
	parameter	finish=99
	integer*4	i
	logical*4	op	
	integer*4	units(start:finish)
	integer*4	lib$free_lun

	lib$get_lun = 1
	i = start
	lun = 0
	do while (i .le. finish .and. lun .eq. 0)
	   if (units(i) .eq. 0) then
	      inquire(unit=i,opened=op)
	      units(i) = i 
	      if (.not. op) then
	         lun = i
	         return
	      end if
	   end if
	   i = i + 1
	end do

	lib$get_lun = 0
	return

	!---------------------------------------------------------------------
	entry		lib$free_lun(lun)
	if (lun .ge. start .and. lun .le. finish) then
	   units(lun) = 0
	end if
	return
	end

!------------------------------------------------------------------------------
! Partial implementation of the vax/vms rtl lib$movc5 routine.
! Used to initialize large chunks of memory with a fill character.
!------------------------------------------------------------------------------
	integer*4	function	lib$movc5(p1,p2,val,sz,target)
	implicit	none
	integer*4	p1, p2		! these aren't used by wind_lib
	integer*4	sz		! byte size of area to initialize
	byte		val		! value to initialize memory to
	byte		target(*)	! section of memory to initialize
	integer*4	i

	do i=1,sz
	   target(i) = val
	end do

	lib$movc5 = 1

	return
	end
