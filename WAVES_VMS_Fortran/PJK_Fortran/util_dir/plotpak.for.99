      SUBROUTINE LGRAPH(NP,X,Y,CH)
C
C	THIS ROUTINE PLOTS NP POINTS OF THE ARRAYS Y VS. X
C	ON THE LN03 LASER PRINTER
C
C	THERE ARE 5 SYMBOLS:       CH = 1 IS A SINGLE DOT, 
C	CH = 2 IS 2 DOTS VERTICAL, CH = 3 IS 2 DOTS HORIZONTAL,
C	CH = 4 IS AN 'L',      AND CH = 5 IS A SQUARE
C	THE TRUE POINT IS THE LOWER OR LEFT OR LOWERLEFT POINT
C	IF ILNLG=0, YTIC SPACING IS LINEAR, IF =1, LOGLIN
C
      COMMON /PPAK/ XMIN,XMAX,DELX,YMIN,YMAX,DELY,FILFAC,ILNLG,BB
      CHARACTER*12 STITL
      INTEGER*2 IX(900),IY(900)
      CHARACTER*8 TIM
      CHARACTER*9 DAT
      DATA XMIN,XMAX,DELX,YMIN,YMAX,DELY,FILFAC,ILNLG 
     1   /0.,100.,5.,0.,100.,5.,1., 0/
      DIMENSION X(1),Y(1),CH(1),IYTIC(22)
C
C	PRINT*,'PPAK',XMIN,XMAX,YMIN,YMAX,NP
	CALL DATE(DAT)
	CALL TIME(TIM)
	XRANGE = ABS(XMAX-XMIN)
	XADD = XRANGE/FILFAC - XRANGE
	XMN = XMIN - .5*XADD
	XMX = XMAX + .5*XADD
	YRANGE = ABS(YMAX-YMIN)
	YADD = YRANGE/FILFAC - YRANGE
	YMN = YMIN
	IF(YMIN.NE.0.) YMN = YMIN - .5*YADD
	YMX = YMAX + .5*YADD
	DELXU = DELX
  2	XTIC = XRANGE/DELXU
	IF(XTIC.GT.20.) DELXU = 2.*DELXU
	IF(XTIC.GT.20.) GO TO 2
C
C	CALCULATE POSITIONS OF Y TICS
C
	IF(ILNLG.EQ.0) THEN
	  DELYU = DELY
  3	  YTIC = YRANGE/DELYU
	print*,'ytic 1',ytic
	  IF(YTIC.GT.20.) DELYU = 2.*DELYU
	  IF(YTIC.GT.20.) GO TO 3
	ELSE
	  YTMAX = FLILO(YMAX,BB)
	  YTMAX = YTMAX/FILFAC
	  YTMIN = FLILO(YMIN,BB)
	  YTMIN = YTMIN/FILFAC
	ENDIF
C
C	PRINT SCALES ON LEFT SIDE
C
	ILINE = 660
	CALL PRINTXX(9,DAT,1,ILINE)
	ILINE = ILINE-18
	CALL PRINTXX(9,TIM,1,ILINE)
	ILINE = 260
	CALL PRINTXX(6,'  YMIN',1,ILINE)
	ILINE = ILINE - 18
	ENCODE(9,1001,STITL) YMN
	CALL PRINTXX(9,STITL,1,ILINE)
	ILINE = ILINE - 18
	CALL PRINTXX(6,'  YMAX',1,ILINE)
	ILINE = ILINE - 18
	ENCODE(9,1001,STITL) YMX
	CALL PRINTXX(9,STITL,1,ILINE)
	ILINE = ILINE - 18
	CALL PRINTXX(6,'  DELY',1,ILINE)
	ILINE = ILINE - 18
	ENCODE(9,1001,STITL) DELYU
	CALL PRINTXX(9,STITL,1,ILINE)
	ILINE = ILINE - 36
	CALL PRINTXX(6,'  XMIN',1,ILINE)
	ILINE = ILINE - 18
	ENCODE(9,1001,STITL) XMN
 1001	FORMAT(5E9.3)
	CALL PRINTXX(9,STITL,1,ILINE)
	ILINE = ILINE - 18
	CALL PRINTXX(6,'  XMAX',1,ILINE)
	ILINE = ILINE - 18
	ENCODE(9,1001,STITL) XMX
	CALL PRINTXX(9,STITL,1,ILINE)
	ILINE = ILINE - 18
	CALL PRINTXX(6,'  DELX',1,ILINE)
	ILINE = ILINE - 18
	ENCODE(9,1001,STITL) DELXU
	CALL PRINTXX(9,STITL,1,ILINE)
C
C	SET UP TICS MARKS ON X AXIS
C
	NT = INT(XMN/DELXU)
	IF((XMN/DELXU).GE.0.) NT = NT+1
C	TIC MARKS ARE AT INTEGER MULTIPLES OF DELXU
C	XTIC IS VALUE OF X AT NEXT TIC MARK
	XTIC = NT*DELXU
	IXTIC = 664.*(XTIC-XMN)/(XMX-XMN) + .5
	PRINT*,XMIN,XMN,NT,XTIC,IXTIC
C
C	SET UP AND PLOT Y TICS
C
	IF(ILNLG.EQ.0) THEN
	  NT = INT(YMN/DELYU)
	  IF((YMN/DELYU).GE.0.) NT = NT+1
C	  YTIC IS VALUE OF Y AT NEYT TIC MARK
	  YTIC = NT*DELYU
	  DO 4 I = 1,20
	  NT = I
	  IYTIC(I) = 646.*(YTIC-YMN)/(YMX-YMN) + .5
	  YTIC = YTIC + DELYU
	  IF(YTIC.GT.YMX) GO TO 5
  4	  CONTINUE
	  GO TO 5
	ELSE
	  IYTIC(1) = 646.*(-YMN)/(YMX-YMN) + .5
	  YTIC = BB
	  DO 6 I = 2,20
	  IYT = 646.*(FLILO(YTIC,BB)-YMN)/(YMX-YMN) + .5
	  IF(IYT.GE.670) GO TO 6
	  IYTIC(I) = IYT
	  NT = I
	  YTIC = 10.*YTIC
  6	  CONTINUE
	  NL = NT+1
	  YTIC = -BB
	  DO 7 I = NL,22
	  IYT = 646.*(FLILO(YTIC,BB)-YMN)/(YMX-YMN) + .5
	  IF(IYT.LE.24) GO TO 7
	  IYTIC(I) = IYT
	  NT = I
	  YTIC = 10.*YTIC
  7	  CONTINUE
	print*,'ytic 2',ytic
	ENDIF
C
  5	CALL THROW(92)
	IF(NT.GT.0) CALL YTICS(IYTIC,NT,4)
	CALL DOTLINE(1)
C
C	SCALE X AND Y ARRAYS
C
	DO 100 N = 1,NP
	IX(N) = 664.*(X(N)-XMN)/(XMX-XMN) + .5
	IY(N) = 646.*(Y(N)-YMN)/(YMX-YMN) + .5
  100	CONTINUE
	IXMX =  664
C	SORT ARRAYS IN ORDER OF X
C	NN IS THE ARRAY INDEX, IXP IS THE X COORDINATE BEING PLOTTED
C
	CALL SORTN(IX,IY,CH,NP)
C
C	PLOT THE POINTS
C
	NN = 1
	IXP = 0
	ICH = 0
	GO TO 14
C
C	PLOT THE DOTS ON THE LINE X = IXP, AND DOTS FROM PREVIOUS
C	SYMBOLS
C
C	PLOT DOTS FROM ANY PREVIOUS SYMBOLS
  10	IBACK = MIN0(32,NN-1)
	DO 11 IPV = 1,IBACK
	IF(IX(NN-IPV).LT.(IXP-1)) GO TO 14
	ICH = CH(NN-IPV) + .5
	IF(ICH.LT.3) GO TO 11
C	PRINT*,'BACK',NN,IXP,IPV,IX(NN-IPV),IY(NN-IPV)
	IPLT = MIN0(IY(NN-IPV)+24,669)
	CALL SETDOT(IPLT)
	IF(ICH.GE.5) CALL SETDOT(IPLT+1)
	ICH = 1
  11	CONTINUE
C
C	PLOT DOTS ON THE LINE X = IXP
  14	IF(IX(NN).GT.IXP) GO TO 20
  13	IPLT = MIN0(IY(NN)+24,669)
	CALL SETDOT(IPLT)
C	PRINT*,'IXP,NN,IPLT',IXP,NN,IPLT
C
C	MAKE OTHER SYMBOLS ON THIS LINE
C	print*,'nn,ix,iy,ch',nn,ix(nn),iy(nn),ch(nn)
	ICH = CH(NN) + .5
	ICH = MAX0(ICH,1)
	ICH = MIN0(ICH,5)
	IF(ICH.NE.1.AND.ICH.NE.2) CALL SETDOT(IPLT+1)
C
  12	NN = NN+1
	IF(NN.LE.NP) GO TO 10
  20	IF(IXTIC.NE.IXP) GO TO 30
C	MAKE TIC MARK AND CALCULATE POSITION OF NEXT
	CALL BOTTIC
	XTIC = XTIC + DELXU
	IXTIC = 664.*(XTIC-XMN)/(XMX-XMN) + .5
  30	CONTINUE
C	MAKE TOP AND BOTTOM LINES AND SEND LINE TO BUFFER
	CALL SETDOT(24)
	CALL SETDOT(670)
	CALL OVERLAY
	CALL BUFLINE
	IXP = IXP+1
	IF(NN.LE.NP) GO TO 10
	IF(IXP.LT.IXMX) GO TO 20
	CALL DOTLINE(1)
	IF(NT.GT.0) CALL YTICS(IYTIC,NT,4)
	CALL THROW(26)
	RETURN
	END
	SUBROUTINE QKPLOT(N,IM,XX,YY,XMN,XMX,DLX,YMN,YMX,DLY)
C
      COMMON /PPAK/ XMIN,XMAX,DELX,YMIN,YMAX,DELY,FILFAC
      DATA XMIN,XMAX,DELX,YMIN,YMAX,DELY,FILFAC 
     1   /0.,100.,1.,0.,100.,.5,.8/
      DIMENSION XX(1),YY(1),CH(900),IYTIC(20)
      DIMENSION LAB(1),MXP(1)
C
C	THE FOLLOWING MUST BE IN THE MAIN PROGRAM, I THINK
C	print*,'qkplot entered',n,im,xx(1),yy(1),xx(n)
C	CALL BPLTBGN(1,MXP,LAB,'SX2SWAV',' ',.6)
C	CALL BPLTERM
C	print*,'first bplterm'
	CALL BITPLTBGN(' ',' ')
	CALL THROW(358)
	print*,'throw'
	XMAX = XX(1)
	XMIN = XX(1)
	YMAX = YY(1)
	YMIN = YY(1)
	IF(IM.EQ.1) THEN
	DO 10 I = 1,N
	  XMAX = AMAX1(XX(I),XMAX)
	  XMIN = AMIN1(XX(I),XMIN)
	  YMAX = AMAX1(YY(I),YMAX)
	  YMIN = AMIN1(YY(I),YMIN)
  10	  CH(I) = 1.
	ELSE
	  DO 20 I = 1,N
	  XX(I) = AMAX1(XX(I),XMN)
	  XX(I) = AMIN1(XX(I),XMX)
	  YY(I) = AMAX1(YY(I),YMN)
	  YY(I) = AMIN1(YY(I),YMX)
  20	  CH(I) = 1.
	  XMAX = XMX
	  XMIN = XMN
	  YMAX = YMX
	  YMIN = YMN
	ENDIF
	print*,'x',xmin,xmax,delx
	print*,'y',ymin,ymax,dely
	FILFAC = 1.
	CALL LGRAPH(N,XX,YY,CH)
	CALL BPLTERM
	RETURN
	END
	SUBROUTINE CIRCLE(X,Y,R,N,XX,YY)
C
C	THIS ROUTINE CALCULATES N POINTS OF A CIRCLE OF RADIUS R
C	CENTERED AT X,Y AND PUTS THE RESULTS IN THE ARRAYS XX,YY
C
	DIMENSION XX(1),YY(1)
	DATA PI /3.14159265/
C
	NN = N-2
	XT = -R
	DX = 4.*R/N
	XX(1) = X-R
	YY(1) = Y	
	DO 10 I = 2,NN,4
	II = I+3
	THETA = .5*(I+2)*PI/(NN+4)
	XT = -R*COS(THETA)
	YT =  R*SIN(THETA)
	XX(I) = X + XT
	XX(I+1) = XX(I)
	YY(I) = Y + YT
	YY(I+1) = Y - YT
	XX(I+2) = X - XT
	YY(I+2) = YY(I+1)
	XX(I+3) = X - XT
	YY(I+3) = YY(I)
  10	CONTINUE
	XX(N) = X+R
	YY(N) = Y
	RETURN
	END
      SUBROUTINE SORTN(IXS,FOLLOW1,FOLLOW2,NS)
C
      INTEGER*2 FOLLOW1(1),IXS(1)
      DIMENSION FOLLOW2(1)
C
C     ORDER X COORDS IN INCREASING ORDER
C
      DO 11 N = 1,NS-1
      N1 = N + 1
      DO 12 M = N1,NS
      IF((IXS(M)-IXS(N)).GT.0.) GO TO 12
C     EXCHANGE
      IXT = IXS(N)
      IXS(N) = IXS(M)
      IXS(M) = IXT
      IXT = FOLLOW1(N)
      FOLLOW1(N) = FOLLOW1(M)
      FOLLOW1(M) = IXT
      XT = FOLLOW2(N)
      FOLLOW2(N) = FOLLOW2(M)
      FOLLOW2(M) = XT
   12 CONTINUE
   11 CONTINUE
      RETURN
      END
	SUBROUTINE DOTLINE(NDOT)
	DO 10 N = 24,870,NDOT
	CALL SETDOT(N)
  10	CONTINUE
	CALL OVERLAY
	CALL BUFLINE
	RETURN
	END
	SUBROUTINE BOTTIC
	DO 10 N = 18,23
	CALL SETDOT(N)
  10	CONTINUE
	CALL SETDOT(671)
	CALL SETDOT(672)
	RETURN
	END
      SUBROUTINE THROW(N)
C
C	THIS SUBROUTINE 'THROWS' N VERTICAL LINES ON A BITPLT
C
      DO 10 I = 1,N
      CALL OVERLAY
  10  CALL BUFLINE
      RETURN
      END
	SUBROUTINE INTERP(XX,YY,NN,X,Y,ERR)
C
C	INTERPOLATE ON X TO FIND Y, GIVEN TABLES XX AND YY, CONTAINING
C	NN ELEMENTS, TABLE XX MUST BE IN INCREASING ORDER
C
	DIMENSION XX(1),YY(1)
C
	Y = YY(1)
	ERR = -1.
	IF(X.LT.XX(1)) RETURN
	Y = YY(NN)
	ERR = 1.
	IF(X.GT.XX(NN)) RETURN
	ERR = 0.
	NNX = (NN+1)/2
	NDEL = (NNX+1)/2
  25	IF(NDEL.LE.1) GO TO 29
	IF(X.GE.XX(NNX)) GO TO 20
	NNX = NNX - NDEL
	NDEL = (NDEL+1)/2
	GO TO 25
  20	NNX = NNX + NDEL
	NDEL = (NDEL+1)/2
	GO TO 25
  29	LLIM = MAX0(NNX-1,2)
	DO 10 I = LLIM,NN
	IF((X-XX(I)).GT.0.) GO TO 10
	Y = YY(I-1) + (YY(I)-YY(I-1))*(X-XX(I-1))/(XX(I)-XX(I-1))
	RETURN
  10	CONTINUE
	RETURN
	END
	SUBROUTINE YTICS(IY,NTICS,LTIC)
C
C	THIS ROUTINE PUTS TICS ON THE Y AXIS AT POSITIONS
C	IY(N) + 24.  THERE ARE 'NTICS' TICS AND THEIR WIDTH
C	IS LTIC DOTS
C
	DIMENSION IY(1)
C
C	PRINT*,'YTICS',IY(1),IY(NTICS),NTICS,LTIC
	DO 20 M = 1,LTIC
	DO 10 N = 1,NTICS
	CALL SETDOT(IY(N)+24)
 10	CONTINUE
	CALL OVERLAY
	CALL BUFLINE
  20	CONTINUE
	RETURN
	END
	FUNCTION FLILO(X,B) 
C 
C 
C       FLILO MEANS LINEAR FUNCTION FOR SMALL ARGUMENT
C       AND LOGARITHM FOR LARGE ARGUMENT
C       SIGN IS PRESERVED 
C       FOR /X/.LT.B   FLILO=X
C       FOR /X/.GT.B   FLILO=A*LOG(X)+C IN SUCH A WAY 
C       THAT FLILO AND ITS DERIVATIVE ARE CONTINUOUS AT /X/=/B/ 
C 
        XM=ABS(X) 
        IF(XM.GT.B) GO TO 1 
	FLILO=X
        RETURN
    1   FT=B*ALOG(XM/B)+B 
        FLILO=SIGN(FT,X)
        RETURN          
	END 
         FUNCTION AFLILO(X,B) 
C 
C       INVERSE OF FLILO
C 
        XM=ABS(X) 
        IF(XM.GT.B) GO TO 1 
        AFLILO=X
        RETURN
    1   FT=B*EXP(XM/B-1.) 
        AFLILO=SIGN(FT,X) 
        RETURN
        END 
