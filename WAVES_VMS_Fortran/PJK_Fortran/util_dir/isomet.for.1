 	PROGRAM ISOMET
	COMMON /BASESZ/ X0,XM,Y0,YM,XPMIN,XPMAX,SINP,COSP,TANT
	COMMON /FIGURE/ XP,YP(32),ZP(32),NXY
	LOGICAL NAME(26)
	DIMENSION XD(25)
	DIMENSION IPL(32)
	EQUIVALENCE (XD(1),PHIVEW),(XD(2),THTVEW),(XD(3),XNX)
	EQUIVALENCE (XD(4),XNY),(XD(5),DXP)
	DATA NAME /'PHIV','THTV','  NX','  NY',' DXP',' KIT','  RW',
     1 ' RKX',' RKZ','MODE',' NPR','  NC','END1','END2',12*'    '/
	DATA X0,XM,Y0,YM /0.,4.,0.,4./
	DATA DXP /.01/
	DATA PHIVEW,THTVEW /45.,30./
	DATA IPL /32*0/
	DATA RADDEG /57.2957795/
	DATA XNX,XNY /16.,16./
C	THIS ROUTINE PLOTS CONTOURS IN 3D
C	THESE CONTOURS ARE ASSUMED TO BE NX CURVES OF Z(Y) FOR
C	CONSTANT X, AND NY CURVES OF Z(X)
C	AS THE PICTURE IS VIEWED, X,Y,Z ARE THE COORDINATES OF THE
C	BODY TO BE PLOTTED, XP,YP, AND ZP ARE THE COORDINATES IN THE
C	PROJECTION PLANE.  XP IS TO THE RIGHT,YP IS AWAY, AND ZP IS UP
C
C	EQUATION OF VIEW-PLANE BASEPLATE INTERSECTION IS Y SIN(PHIVEW)
C         - X COS(PHIVEW) = -XP
C	DISTANCE TO POINT X,Y IS YP = X*SIN(PHIVEW) + Y*COS(PHIVEW)
C
 200	WRITE (7,701)
 701	FORMAT(' STEP 1, MANUAL CHOICE OF INITIAL PARAMETERS')
 101	WRITE (7,702)
 702	FORMAT(' TYPE NO. AND NEW VALUE OF VARIABLE TO BE CHANGED, 0,0
     1 FOR NO CHANGE ')
	READ (5,*) ND,XTT
	IF(ND.EQ.0) GO TO 102
C	ENCODE(132,1000,STRING) ND,XD(ND),XTT
 	WRITE(7,1000) NAME(ND),XD(ND),XTT
 1000 FORMAT (/,8X,7HCHANGE ,A4,6H FROM ,F18.9    ,4H TO ,F18.9,/)  
C	CALL PLTPRT(STRING)
	XD(ND) = XTT
	GO TO 101
C
 102	CONTINUE
 103	NXY = XNX + XNY + .5
	IF(NXY.LT.32) GO TO 104
	XNX = XNX*.97
	XNY = XNY*.97
	GO TO 103
 104    NX = XNX+.01
	NY = XNY+.01
	NXY = NX+NY+1
	CALL PLTFST('L',NXY,0,'INTEGRAND',IER,' -1  0   1')
	SINP = SIN(PHIVEW/RADDEG)
	COSP = COS(PHIVEW/RADDEG)
	TANT = ATAN(THTVEW/RADDEG)
	CALL BNDARY
	XP = XPMIN
C
C	DETERMINE BASEPLATE
C
  100	CALL BASEPL(XP,ZP(1),YP(1),ZP(2),YP(2))
C
C	FOR EACH STEP (XP VALUE) DETERMINE ZP FOR EACH CURVE, AND DETER-
C	MINE WHETHER X AND Y FALL WITHINE THE BASEPLATE BOUNDARIES.
	DO 10 N = 1,NX
	X = X0 + (XM-X0)*(N-1)/(NX-1)
	ZP(N+1) = ZP(1)
	YP(N+1) = YP(1)
	IF(SINP.EQ.0.) GO TO 10
	Y = (-XP + X*COSP)/SINP
	IF(Y.GT.YM.OR.Y.LT.Y0) GO TO 10
	CALL SURF(X,Y,Z)
	ZP(N+1) = Z + (X*SINP + Y*COSP)*TANT
	YP(N+1) = X*SINP + Y*COSP
   10	CONTINUE
C
	DO 20 N = 1,NY
	Y = Y0 + (YM-Y0)*(N-1)/(NY-1)
	ZP(N+NX+1) = ZP(1)
	YP(N+NX+1) = YP(1)
	IF(COSP.EQ.0.) GO TO 20
	X = (XP + Y*SINP)/COSP
	IF(X.LT.X0.OR.X.GT.XM) GO TO 20
	CALL SURF(X,Y,Z)
	ZP(N+NX+1) = Z + (X*SINP + Y*COSP)*TANT
	YP(N+NX+1) = X*SINP + Y*COSP
   20	CONTINUE
	CALL HIDLIN
	DO 50 N = 1,NXY
   50	IPL(N) = ZP(N)*100. + 384.
	ITIC = 1
	CALL PLOTF(IPL,ITIC,IER)
	XP = XP + DXP
	IF(XP.LE.XPMAX) GO TO 100
	CALL CLOSEF(1)
	STOP
	END
	SUBROUTINE BNDARY
	COMMON /BASESZ/ X0,XM,Y0,YM,XPMIN,XPMAX,SINP,COSP,TANT
	DATA RADDEG /57.2957795/
C
C	DETERMINE XP (PLOT COORDINATE) LIMITS
C	THIS ROUTINE ASSUMES THAT X0,Y0 IS THE NEAREST CORNER
C
	XP = X0*COSP - Y0*SINP
	XPMIN = XP
	XPMAX = XP
	XP = X0*COSP - YM*SINP
	XPMIN = AMIN1(XP,XPMIN)
	XPMAX = AMAX1(XP,XPMAX)
	XP = XM*COSP - Y0*SINP
	XPMIN = AMIN1(XP,XPMIN)
	XPMAX = AMAX1(XP,XPMAX)
	XP = XM*COSP - YM*SINP
	XPMIN = AMIN1(XP,XPMIN)
	XPMAX = AMAX1(XP,XPMAX)
	RETURN
	END
	SUBROUTINE BASEPL(XP,ZP1,YP1,ZP2,YP2)
	COMMON /BASESZ/ X0,XM,Y0,YM,XPMIN,XPMAX,SINP,COSP,TANT
	DIMENSION ZPT(2),YPT(2)
	DATA ZPT /2*0./
	DATA YPT /2*0./
	DATA RADDEG /57.2957795/
C
	IF(SINP.EQ.0.) GO TO 100
	IF(COSP.EQ.0.) GO TO 200
C
	NP = 0
C	SIDE X = X0
	X = X0
	Y = (-XP + X*COSP)/SINP
	IF(Y.LT.Y0.OR.Y.GT.YM) GO TO 10
	NP = 1
	YPT(1) = X*SINP + Y*COSP
	ZPT(1) = YPT(1)*TANT
  10	CONTINUE
C	SIDE Y = Y0
	Y = Y0
	X = (XP + Y*SINP)/COSP
	IF(X.LT.X0.OR.X.GT.XM) GO TO 20
	NP = NP+1
	YPT(NP) = X*SINP + Y*COSP
	ZPT(NP) = YPT(NP)*TANT
  20	CONTINUE
	GO TO 300
 100	CONTINUE
C	SINP = 0., YP = Y	
	YPT(1) = Y0
	ZPT(1) = YPT(1)*TANT
	YPT(2) = YM
	ZPT(2) = YPT(2)*TANT
	GO TO 300
 200	CONTINUE
C	COSP = 0., YP = X
	YPT(1) = X0
	ZPT(1) = YPT(1)*TANT
	YPT(2) = XM
	ZPT(2) = YPT(2)*TANT
 300	ZP1 = ZPT(1)
	ZP2 = ZPT(2)
	YP1 = YPT(1)
	YP2 = YPT(2)
	RETURN
	END
	SUBROUTINE INTERP(XX,YY,NN,X,Y,ERR)
C
C	INTERPOLATE ON X TO FIND Y, GIVEN TABLES XX AND YY, CONTAINING
C	NN ELEMENTS
C
	DIMENSION XX(1),YY(1)
C
	Y = YY(1)
	ERR = -1.
	IF(X.LT.XX(1)) RETURN
	Y = YY(NN)
	ERR = 1.
	IF(X.GT.XX(NN)) RETURN
	ERR = 0.
	DO 10 I = 2,NN
	IF((X-XX(I)).GT.0.) GO TO 10
	Y = YY(I-1) + (YY(I)-YY(I-1))*(X-XX(I-1))/(XX(I)-XX(I-1))
	RETURN
  10	CONTINUE
	RETURN
	END
	SUBROUTINE HIDLIN
C
C	DETERMINE WHICH LINES ARE HIDDEN AND ERASE THEM
C
	COMMON /FIGURE/ XP,YP(32),ZP(32),NXY
C
C	SORT POINTS IN ORDER OF DISTANCE AWAY FROM EYE
C
	CALL SORTN(YP,ZP,NXY)
	ZMIN = ZP(1)
	ZMAX = ZMIN
	DO 100 N = 2,NXY
	ZTEMP = ZP(1)
	IF(ZP(N).GT.ZMAX) ZTEMP = ZP(N)
	IF(ZP(N).LT.ZMIN) ZTEMP = ZP(N)
	ZMAX = AMAX1(ZMAX,ZTEMP)
	ZMIN = AMIN1(ZMIN,ZTEMP)
  100	ZP(N) = ZTEMP
	RETURN
	END
	SUBROUTINE SURF(X,Y,Z)
	Z = (X-2.)**2 - (Y-2.)**2
	Z = .5*Z
	RETURN
	END
      SUBROUTINE SORTN(IXS,FOLLOW,NS)
      REAL IXS(32),IXT
      DIMENSION FOLLOW(32)
C     ORDER X COORDS IN INCREASING ORDER
      DO 11 N = 1,NS-1
      N1 = N + 1
      DO 12 M = N1,NS
      IF((IXS(M)-IXS(N)).GT.0.) GO TO 12
C     EXCHANGE
      IXT = IXS(N)
      IXS(N) = IXS(M)
      IXS(M) = IXT
      IXT = FOLLOW(N)
      FOLLOW(N) = FOLLOW(M)
      FOLLOW(M) = IXT
   12 CONTINUE
   11 CONTINUE
      RETURN
      END
