      SUBROUTINE POLFIT(NPTS,NTERMS,CHISQR) 
CM      SUBROUTINE POLFIT(X,Y,SIGMAY,NPTS,NTERMS,MODE,A,CHISQR) 
C 
C     PURPOSE 
C       MAKE LEAST SQUARES FIT TO DATA WITH A POLYNOMIAL CURVE
C          Y = A(1) + A(2)*X + A(3)*X**2 + ...
C	   BY MINIMIZING SUM WT*(Y - POLYNOMIAL)**2
C
C     DESCRIPTION OF PARAMETERS 
C       X........ARRAY OF DATA POINTS FOR INDEPENDENT VARIABLE
C       Y........  "   "   "     "     "   DEPENDENT      " 
C       SIGMAY...ARRAY OF STANDARD DEVIATIONS FOR Y DATA POINTS 
C       NPTS.....NUMBER OF PAIRS OF DATA POINTS 
C       NTERMS...NUMBER OF COEFFICIENTS (DEGREE OF POLYNOMIAL + 1)
C       MODE.....DETERMINES METHOD OF WEIGHTING LEAST SQUARES FIT 
C                +1 (INSTRUMENTAL) WEIGHT(I) = 1./SIGMAY(I)**2
C                 0 (NO WEIGHTING) WEIGHT(I) = 1. 
C                -1 (STATISTICAL)  WEIGHT(I) = 1./Y(I)
C       A........ARRAY OF COEFFICIENTS OF POLYNOMIAL
C       CHISQR...REDUCED CHI SQUARE FOR FIT 
C 
C     SUBROUTINE AND FUNCTION SUBPROGRAMS REQUIRED
C       DETERM(ARRAY,NORDER)
C          EVALUATES THE DETERMINATE OF A SYMMETRIC TWO-DIMENSIONAL 
C          MATRIX OF ORDER 'NORDER' 
C 
C     COMMENTS
C       DIMENSION STATEMENT VALID FOR NTERMS UP TO 10 
C 
C	PROGRAM MODIFIED FOR LPSCEX, MAY 1984
C
      DOUBLE PRECISION SUMX, SUMY, XTERM, YTERM, ARRAY, CHISQ 
      COMMON /FITBLK/ X(516),Y(516),WT(516),A(8)
CM      DIMENSION X(1), Y(1), SIGMAY(1), A(1) 
      DIMENSION SUMX(19), SUMY(10), ARRAY(10,10)
C 
C        ACCUMULATE WEIGHTED SUMS 
C 
      NMAX = 2*NTERMS - 1 
      DO 13 N = 1, NMAX 
   13 SUMX(N) = 0.
      DO 15 J = 1, NTERMS 
   15 SUMY(J) = 0.
      CHISQ = 0. 
   21 DO 50 I = 1, NPTS 
      XI = X(I) 
      YI = Y(I)
      WEIGHT = WT(I)
CM   31 IF (MODE) 32, 37, 39
CM   32 IF (YI) 35, 37, 33
CM   33 WEIGHT = 1./YI
CM      GO TO 41
CM   35 WEIGHT = 1. / (-YI) 
CM      GO TO 41
CM   37 WEIGHT = 1. 
CM      GO TO 41
CM   39 WEIGHT = 1. / SIGMAY(I)**2
   41 XTERM = WEIGHT
      DO 44 N = 1, NMAX 
      SUMX(N) = SUMX(N) + XTERM 
   44 XTERM = XTERM * XI
      YTERM = WEIGHT * YI 
      DO 48 N = 1, NTERMS 
      SUMY(N) = SUMY(N) + YTERM 
   48 YTERM = YTERM * XI
      CHISQ = CHISQ + WEIGHT * YI**2
   50 CONTINUE
C 
C        CONSTRUCT MATRICES AND CALCULATE COEFFICIENTS
C 
   51 DO 54 J = 1, NTERMS 
      DO 54 K = 1, NTERMS 
      N = J + K - 1 
   54 ARRAY(J,K) = SUMX(N)
      DELTA = DETERM(ARRAY,NTERMS)
      IF (DELTA) 61, 57, 61 
   57 CHISQR = 0. 
      DO 59 J = 1, NTERMS 
   59 A(J) = 0. 
      GO TO 80
   61 DO 70 L = 1, NTERMS 
   62 DO 66 J = 1, NTERMS 
      DO 65 K = 1, NTERMS 
      N = J + K - 1.
   65 ARRAY(J,K) = SUMX(N)
   66 ARRAY(J,L) = SUMY(J)
   70 A(L) = DETERM(ARRAY, NTERMS)/DELTA
C 
C        CALCULATE CHI SQUARE 
C 
   71 DO 75 J = 1, NTERMS 
      CHISQ = CHISQ - 2.*A(J)*SUMY(J) 
      DO 75 K = 1, NTERMS 
      N = J + K - 1 
   75 CHISQ = CHISQ + A(J)*A(K)*SUMX(N) 
   76 FREE = NPTS - NTERMS
   77 CHISQR = CHISQ / FREE 
C   77 CHISQR = AMAX1((CHISQ / FREE) ,0.)
   80 RETURN
      END 
      FUNCTION DETERM(ARRAY, NORDER)
C 
C     PURPOSE 
C       CALCULATE THE DETERMINANT OF A SQUARE MATRIX
C 
C     USAGE 
C       DET = DETERM(ARRAY, NORDER) 
C 
C     DESCRIPTION OF PARAMETERS 
C       ARRAY....MATRIX 
C       NORDER...ORDER OF DETERMINANT (DEGREE OF MATRIX)
C 
C     SUBROUTINE AND FUNCTION SUBPROGRAMS REQUIRED
C       NONE
C 
C     COMMENTS
C       THIS SUBPROGRAM DESTROYS THE INPUT MATRIX ARRAY 
C       DIMENSION STATEMENT VALID FOR NORDER UP TO 10 
C 
      DOUBLE PRECISION ARRAY, SAVE
      DIMENSION ARRAY(10,10)
C	print*,'arr',((array(i,j),i=1,norder),j=1,norder)
   10 DETERM = 1. 
      DO 50 K = 1, NORDER 
C 
C        INTERCHANGE COLUMNS IF DIAGONAL ELEMENT IS ZERO
C 
      IF (ARRAY(K,K)) 41, 21, 41
   21 DO 23 J = K, NORDER 
      IF (ARRAY(K,J)) 31, 23, 31
   23 CONTINUE
      DETERM = 0. 
      GO TO 60
   31 DO 34 I = K, NORDER 
      SAVE = ARRAY(I,J) 
      ARRAY(I,J) = ARRAY(I,K) 
   34 ARRAY(I,K) = SAVE 
      DETERM = -DETERM
C 
C       SUBTRACT ROW K FROM LOWER ROWS TO GET DIAGONAL MATRIX 
C
   41 DETERM = DETERM * ARRAY(K,K)
      IF (K - NORDER) 43, 50, 50
   43 K1 = K + 1
      DO 46 I = K1, NORDER
      DO 46 J = K1, NORDER
   46 ARRAY(I,J) = ARRAY(I,J) - ARRAY(I,K)*ARRAY(K,J)/ARRAY(K,K)
   50 CONTINUE
   60 RETURN
      END 

