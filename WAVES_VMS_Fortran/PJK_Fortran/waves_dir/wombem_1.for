      PROGRAM WOMBEM
C
C     LINK WITH BESSEL,PLTLIB
C
C     MODIFIED FOR CALC. OF WOMBAT INSTAB., OCT 1984
C
C	MODIFIED TO USE PRTPLT, EVERYTHING ON VERSATEK
C	REMODIFIED JAN 1986 TO USE PRINTER PLUS SCREEN
C
      COMMON /BEAMBL/ XD(80),XNUA2(10),WALF(10),WC(10),WP2(10),NC,RPT2
     1  ,WP(10),WT,WCE,RP,RC
      COMMON /POLEBK/ WPOLE(20),NPOLE
      COMPLEX W,XNUA2,DEQ,DEQ1,W1,DW,RW,WROOT(20),RPT2,CRECIP,SUM 
      COMPLEX Z,ZS,RJLZ,RJNZ,DUM1,DUM2,RILX,RKLX,RILS,RKLS,CSURA
      DIMENSION RME(10),DENS(10),SWALF(10),BETAZ(10),WCS(20)
      DIMENSION NDEQP(5),IXDATA(2)
	BYTE STRING(132),TITL(4)
	LOGICAL*1 TIM(8),DAT(9)
	LOGICAL ITITL(8)
	EXTERNAL BEAMWK,POLY
C	EQUIVALENCE (XD(1),XKZ),(XD(2),WCE),(XD(3),RP),(XD(4),RC)
	EQUIVALENCE (XD(1),XKZ),(XD(2),FHZCE),(XD(10),FHZPE)
	EQUIVALENCE (XD(5),WR),(XD(6),WI),(XD(7),RWR)
	EQUIVALENCE (XD(8),AZL),(XD(9),XNC)
	EQUIVALENCE (XD(11),RME(1)),(XD(21),DENS(1)),(XD(31),BETAZ(1))
	EQUIVALENCE (XD(41),SWALF(1))
     	EQUIVALENCE (XD(54),BBX),(XD(55),BBY),(XD(56),XSOLV)
	EQUIVALENCE (XD(59),BEAMD)
        EQUIVALENCE (XD(64),WTR),(XD(65),WTI)
      DATA ITITL /'MISC','MASS','DENS',' VZ ','SIGN',2*'MISC','ROOT'/
      DATA NC /4/ 
      DATA AZL /0./ 
      DATA XKZ /6./ 
      DATA XD(3),XD(4) /1.,1000./
      DATA WR,WI /3.1,0./
      DATA RWR /1.01/
      DATA WCE /.6/ 
      DATA RME /-1.,51400.,51400.,-1.,6*1. / 
      DATA DENS /1.,.501,.5,.001,6*1. / 
      DATA SWALF /-1.,1.,-1.,1.,6*1./ 
      DATA BETAZ /3*0.,.0767,6*0./
      DATA BBX,BBY /.0001,1./
      DATA XD(2) /2.66E6/
      DATA XD(10) /3.2E6/
      DATA XD(52), XD(53) /-4., 4./
      DATA XD(57) /6./
C     XD(58) IS NPP = NO. OF POINTS TO BE PLOTTED
      DATA XD(58) /511./
      DATA XSOLV /4./
      DATA BEAMD /.363/
      DATA NDEQP /3*512,32,768/
      DATA XD(67) /1./
      DATA TWOPI /6.2831859/
C
C	
C       XSOLV = 0 IS PLOT AND PRINT DEQ FOR W REAL
C                   XD(52),(53) ARE MIN AND MAX FREQS TO PLOT
C                   XD(58) IS NUMBER OF POINTS
C	            XD(67) = 1.IS PRINT,   =0.  IS PLOT
C             = 1 IS FIND ONE VALUE OF DEQ AND PRINT ON SCREEN
C                   XD(5),(6) ARE REAL AND IMAG PARTS OF FREQ.
C             = 2 IS FIND ONE ROOT
C                   XD(5),(6) ARE STARTING VALUES 
C             = 3 IS FIND SEVERAL ROOTS (NO. OF ROOTS = XD(57))
C             = 4 IS PLOT RADIAL POTENTIAL FUNCTION
C	XSOLV = XD(56)
C
	CALL DATE(DAT)
	CALL TIME(TIM)
	ENCODE(132,104,STRING) DAT,TIM
	CALL PLTPRT(STRING)
  104   FORMAT('0 PROGRAM WOMBEM',5X,9A1,5X,8A1)
        ENCODE(132,105,STRING)
  105   FORMAT(' INPUT VARIABLES')
	CALL PLTPRT(STRING)
	DO 106 JJ = 1,7
	KK = 10*JJ-9
        ENCODE(132,1016,STRING) KK,ITITL(JJ),(XD(KK+N),N=0,9)
	CALL PLTPRT(STRING)
  106   CONTINUE
 1016   FORMAT(I5,2X,A4,10E12.4)
	NROOT = XD(57)+.5
        XNC = NC
 200	WRITE (7,701)
 701	FORMAT(' STEP 1, MANUAL CHOICE OF INITIAL PARAMETERS')
 101	WRITE (7,702)
 702	FORMAT(' TYPE NO. AND NEW VALUE OF VARIABLE TO BE CHANGED, 0 
     1FOR NO CHANGE ')
	READ (5,501) ND,XTT
 501	FORMAT(I5,F15.5)
	IF(ND.EQ.0) GO TO 102
	ENCODE(132,502,STRING) ND,XD(ND),XTT
 502	FORMAT(' CHANGE VARIABLE NO.',I3,' FROM',F15.5' TO',F15.5)
	CALL PLTPRT(STRING)
	XD(ND) = XTT
	GO TO 101
 102	NC = XNC + .5
C
C     CALCULATE RC AND RP
      XD(3) = BEAMD*XD(34)*3.E10/XD(2)/TWOPI
      RP = XD(3)*XD(10)*TWOPI/3.E10
      RC = XD(4)*XD(10)*TWOPI/3.E10
      ENCODE(132,1023,STRING) XD(3),XD(4)
 1023 FORMAT(' RP ='F8.2' CM,  RC='F8.2' CM')
	CALL PLTPRT(STRING)
C
C     CALCULATE PLASMA AND CYCLOTRON FREQS. 
      ENCODE(132,1003,STRING)
 1003 FORMAT(3X,'NO.',5X,'DENS',7X,'BETAZ',9X,
     1  'WP',10X,'WC',7X,'W ALPHA',6X,'W A/WC') 
	CALL PLTPRT(STRING)
      WCE = XD(2)/XD(10)
      DO 10 N = 1,NC  
      WC(N) = WCE/RME(N)
      WP2(N) = DENS(N)/ABS(RME(N))
      WP(N) = SQRT(ABS(WP2(N))) 
   10 CONTINUE
      IROOT = 0
  201 CONTINUE
C 
C     CALCULATE WALF (TNP EQ. 2.7.3) AND POLES
C     M IS ETA, N IS ALPHA
C
      DO 20 N = 1,NC  
      ST = 0. 
      DO 21 M = 1,NC  
      ST = ST + SIGN(1.,RME(M))*DENS(M)/WC(N)**2/RME(N) 
   21 CONTINUE
C	PRINT 1002,N,ST
      STT = SQRT(1. - 2.*ST)
      WALF(N) = -.5*WC(N)*(1. + STT*SWALF(N)) 
      WAWC = WALF(N)/WC(N)
	NEN = N
      IF(IROOT.EQ.0) ENCODE(132,1002,STRING)
     1 NEN,DENS(N),BETAZ(N),WP(N),WC(N),WALF(N),WAWC
      IF(IROOT.EQ.0) CALL PLTPRT(STRING)
C      IF(IROOT.EQ.0) 
C    1 PRINT 1002,N,DENS(N),BETAZ(N),WP(N),WC(N),WALF(N),WAWC
      WPOLE(2*N-1) = XKZ*BETAZ(N) + AZL*WALF(N)
      WCS(2*N-1) = ABS(WC(N))
      WPOLE(2*N) = WPOLE(2*N-1) - WC(N) - 2.*WALF(N)
      WCS(2*N) = ABS(WC(N))
   20 CONTINUE
 1002 FORMAT(I5,6E12.4)
      IF(IROOT.EQ.0) ENCODE(132,1012,STRING) XKZ
      IF(IROOT.EQ.0) CALL PLTPRT(STRING)
 1012 FORMAT(' KZ*C/WP =',E13.5)
       IF(IROOT.EQ.0) ENCODE(132,1014,STRING)
       IF(IROOT.EQ.0) CALL PLTPRT(STRING)
 1014 FORMAT(' POLES')
      NPOLE = 2*NC
      IF(IROOT.EQ.0) ENCODE(132,1013,STRING) (WPOLE(N),N=1,NPOLE)
      IF(IROOT.EQ.0) CALL PLTPRT(STRING)
C     ORDER POLES IN ORDER OF INCREASING W
      CALL SORTN(WPOLE,WCS,NPOLE)
      NPOLES = NPOLE
C     GET RID OF IDENTICAL POLES
      DO 22 IT = 1,2
      DO 23 N = 2,NPOLE
      IF(N.GT.NPOLES) GO TO 23
      IF(ABS(WPOLE(N)-WPOLE(N-1)).GT.5.E-7*WCS(N)) GO TO 23
      WPOLE(N) = WPOLE(NPOLES)
      WCS(N) = WCS(NPOLES)
      NPOLES = NPOLES - 1
   23 CONTINUE
      NPOLE = NPOLES
C     AGAIN ORDER POLES IN ORDER OF INCREASING W
   22 CALL SORTN(WPOLE,WCS,NPOLE)
      IF(IROOT.EQ.0) ENCODE(132,1015,STRING)
       IF(IROOT.EQ.0) CALL PLTPRT(STRING)
 1015 FORMAT(' POLES AFTER SORTING AND ASSOC. CYCLO. FREQ.')
      IF(IROOT.EQ.0) ENCODE(132,1013,STRING) (WPOLE(N),N=1,NPOLE)
      IF(IROOT.EQ.0) CALL PLTPRT(STRING)
C      PRINT 1013,((WPOLE(N)-WPOLE(N-1)),N=2,NPOLE)
      IF(IROOT.EQ.0) ENCODE(132,1013,STRING) (WCS(N),N=1,NPOLE)
      IF(IROOT.EQ.0) CALL PLTPRT(STRING)
C     ROUGH AND TEMPORARY ESTIMATE OF ROOTS
C     THESE ESTIMATES ARE USED ON FIRST PASS ONLY
      IF(IROOT.EQ.0) GO TO 25
      DO 24 N = 2,NPOLE
      WT = .5*(WPOLE(N)+WPOLE(N-1))
      WROOT(N) = CMPLX(WT,.01*WT)
   24 CONTINUE
      WROOT(1) = -.1
      WROOT(NPOLE) = 1.1*WPOLE(NPOLE)
   25 IROOT = IROOT + 1
 1013 FORMAT(8E16.7)
C
      IF(XSOLV.GT..5) GO TO 60
C
C	PLOT AND PRINT DEQ V.S. W FOR W REAL
C
      DO 3 JJ = 1,6
      KK = 10*JJ-9
      ENCODE(132,1016,STRING) KK,ITITL(JJ),(XD(KK+N),N=0,9)
      CALL PLTPRT(STRING)
    3 CONTINUE
C      IF(XD(67).LT..5) CALL PLTFST('L',4,0,
C     1'SURFACE WAVE DISPERSION RELATION',IER,' -1  0   1')
C      IF(XD(67).LT..5) OPEN(UNIT=3,NAME='WOBEAM.RES',TYPE='NEW')
	CALL SCOPE
	CALL SCOPST('S','S',2,0,'P','P',IER)
	IXDATA(1) = 55.
	IXDATA(2) = 55.
	CALL SCOPLT(IXDATA)
      NPP = XD(58)+.5
      WS = XD(52)
      CMIN = FLILO(XD(52),BBX)
      CMAX = (FLILO(XD(53),BBX) - CMIN)/MAX0(NPP,1)
      SUM = 0.
      DEQ1 = 0.
      DO 1 JJ=0,NPP
      WTT=CMIN+CMAX*JJ
      WT = AFLILO(WTT,BBX)
      W =CMPLX(WT,0.)
      CALL BEAMWK(W,DEQ,DMAG)
      JEN = JJ
      ENCODE(132,1017,STRING) JEN,W,DEQ,DMAG,RPT2
C      IF(XD(67).GT..5)	CALL PLTPRT(STRING)
      CALL PLTPRT(STRING)
      WRITE(7,1020) JJ,W,DEQ,DMAG
C      WRITE(3,1020,IERR = 121) JJ,W,DEQ,DMAG,RPT2
 1017 FORMAT(I6,' W='2E13.5'  DEQ='2E13.5'  DMAG='E11.3,
     1 '  RPT2=',2E10.2)
 1020 FORMAT(I6,' W='E12.4,E10.2,'  DEQ='E12.4,E10.2,' DMAG=',E10.2)
C     CALCULATE INTEGRAL
  121 JK = JJ.AND.1
      SIMFAC = JK + 1
      SUM = SUM + SIMFAC*(DEQ-DEQ1)/(DEQ+DEQ1)
      DEQ1 = DEQ
C     PUT TIC MARKS AT POWERS OF 10.
C      IF(XD(67).GT..5) GO TO 1
      ITIC = 1
      DO 2 N = 0,5
      TEST = BBX*10.**N
      IF(WS.LE.TEST.AND.WT.GT.TEST) ITIC = 0
      TEST = - TEST
      IF(WS.LE.TEST.AND.WT.GT.TEST) ITIC = 0
    2 CONTINUE
      TEST = 0.
      IF(WS.LE.TEST.AND.WT.GT.TEST) ITIC = 0
      WS = WT
      DEQRC = FLILO(REAL(DEQ),BBY)
      NDEQP(1) = 32.*DEQRC + 512.5
	IXDATA(2) = 27.*DEQRC + 55.
C      14.7 IS SQUARE OF FIRST ZERO OF J1
      RPT2P = AMIN1(RPT2*32./14.7 + 32.,63.)
      RPT2P = AMAX1(RPT2P,1.1)
      NDEQP(3) = RPT2P
	IXDATA(1) = 1.72*RPT2P
C      CALL PLOTF(NDEQP,ITIC,IERR)
	CALL SCOPLT(IXDATA)
    1 CONTINUE
C      IF(XD(67).LT..5) CALL CLOSEF(1)
C      IF(XD(67).LT..5) CLOSE(UNIT=3)
      ENCODE(132,1018,STRING)
 1018 FORMAT('1')
      CALL PLTPRT(STRING)
C     NORMALIZE INTEGRAL
      SUM = (4./3.)*SUM/TWOPI
      ENCODE(132,1019,STRING) SUM
	CALL PLTPRT(STRING)
      WRITE(7,1019) SUM
 1019 FORMAT(' NO. OF GROWING ROOTS IS IMAG. PART OF: ',2E13.5)
      ENCODE(120,1018,STRING)
	CALL PLTPRT(STRING)
C      IF(XD(67).LT..5) CALL PLTPRT(STRING)
      GO TO 200
C
   60 IF(XSOLV.GT.1.5) GO TO 70
C
C     EVALUATE DEQ FOR ONE VALUE OF W
C
      W = CMPLX(WR,WI)
      CALL BEAMWK(W,DEQ,DMAG)
      WRITE(7,1006) XKZ,W,DEQ
      WRITE(7,1022) (WR-XKZ*BETAZ(4))/WCE
 1022 FORMAT(' (W-KV)/WC',E15.7)
      ENCODE(132,1006,STRING) XKZ,W,DEQ
      CALL PLTPRT(STRING)
C      PRINT 1006,XKZ,W,DEQ
      GO TO 200
C
   70 IF(XSOLV.GT.2.5) GO TO 40
C
C     LOOK FOR A ROOT OF EQ.2.7.15
C
      NPP = XD(58) + .5
      W=CMPLX(WR,WI)
      RW=CMPLX(RWR,0.)
      CALL POLY(W,DEQ,DMAG)
      W1=W
      DEQ1=DEQ
   32 W=W*RW
      CALL POLY(W,DEQ,DMAG)
      IF(CABS(DEQ-DEQ1).EQ.0.) GO TO 32
      DO 30 I=1,20
      DW=-DEQ*(W-W1)*CRECIP(DEQ-DEQ1)
      W1=W
      DEQ1=DEQ
      W=W+DW
      CALL POLY(W,DEQ,DMAG)
      TEST = ABS(DEQ-DEQ1) + ABS(AIMAG(DEQ-DEQ1))
      IF(TEST.EQ.0.) GO TO 31
C 1008 FORMAT('  W1',2E15.7,'  DEQ1',2E15.7,'  DW',2E15.7)
      TEST = ABS(DEQ) + ABS(AIMAG(DEQ))
      IF(TEST.LT.3.E-7*DMAG) GO TO 31
   30 CONTINUE
   31 CONTINUE
      FHZ = W*FHZPE
      XKZCM = XKZ*TWOPI*FHZPE/3.E10
      ENCODE(132,1006,STRING) XKZ,W,DEQ,DMAG,FHZ,XKZCM
	CALL PLTPRT(STRING)
 1006 FORMAT(' KZ'F10.4'  W',2E15.7,'  DEQ',2E11.4,'  DMAG',E11.4
     1  ,'  F(HZ)',E11.4,'  KZ(CM)',E11.4)
      WRITE(7,1006)  XKZ,W,DEQ
      WR = W
      WRITE(7,1022) (WR-XKZ*BETAZ(4))/WCE
      WI = AIMAG(W)
      XKZ = XD(52)+IROOT*(XD(53)-XD(52))/MAX0(NPP,1)
      IF(IROOT.GT.NPP) GO TO 200
      GO TO 201
C
C
C	TRY TO FIND SEVERAL ROOTS
C
      NROOT = XD(57)+.5
      CALL ROOTS(NROOT,POLY,WROOT,NBAD,IBAD)
      GO TO 200
C
 40   IF(XSOLV.GT.4.5) GO TO 80
C
C      PLOT RADIAL POTENTIAL FUNCTION
      NPP=XD(58)+0.5
      L=AZL+.5
      W=CMPLX(WR,WI)
      X = XKZ*RP
       CALL BESIZ(CMPLX(X,0.),L,1,1,RJLZ,RJNZ,DUM1,DUM2,LERR)
      Y = XKZ*RC
       CALL BESIZ(CMPLX(Y,0.),L,2,1,RILS,DUM1,RKLS,DUM2,LERR)
       CALL BESIZ(CMPLX(X,0.),L,2,1,RILX,DUM1,RKLX,DUM2,LERR)
      CSURA = RJLZ*CRECIP(RKLS*RILX - RILS*RKLX)
      CALL BEAMWK(W,DEQ,DMAG)
      ZS = CSQRT(RPT2)
	ENCODE(132,1017,STRING) L,W,DEQ,DMAG,RPT2
	CALL PLTPRT(STRING)
	WRITE(7,1017) L,W,DEQ,DMAG,RPT2
C      CALL PLTFST('L',5,0,'RADIAL POTENTIAL FUNCTION',IER,
C     1 '0 - 2 RP                                              0 - RC ')
	CALL SCOPE
	CALL SCOPST('S','S',2,0,'P','P',IER)
      DO 77 II=1, NPP
      R = (2.*II*RP)/NPP
      DO 78 IK = 1,2
	IF(IK.EQ.2) R = II*RC/NPP
	IF(R.GT.RP) GO TO 76
C	R IS INSIDE THE PLASMA COLUMN
	Z = ZS*R/RP
	CALL BESIZ(Z,L,1,1,RJLZ,RJNZ,DUM1,DUM2,LERR)
	POTF = RJLZ
        ENCODE(132,1100,STRING) LERR,'RJNX',Z
	IF(LERR.NE.0) CALL PLTPRT(STRING)
	GO TO 79
 76	X = XKZ*R
C	R IS OUTSIDE THE PLASMA COLUMN
C
C	IMAGINARY BESSEL FNS, I AND K
	TEST = ABS(X)
	IF(TEST.GE.80.) GO TO 71
C
C	ENTRY FOR MODERATE ARGUMENT
       CALL BESIZ(CMPLX(X,0.),L,2,1,RILX,DUM1,RKLX,DUM2,LERR)
        ENCODE(132,1100,STRING) LERR,'RKNX',CMPLX(X,0.)
	IF(LERR.NE.0) CALL PLTPRT(STRING)
C        IF (LERR .NE. 0) PRINT 1100 , LERR,'RKNX',CMPLX(X,0.)
 1100  FORMAT (' DANGER, ERROR IN BESSEL CALCULATION ***** ERR.NO.',I3
     1  ,2X,A4,2X,2E11.3)
	GO TO 72
C
C	ENTRY FOR VERY LARGE ARGUMENT
C	THIS FUNCTION ASSUMES RC .GT. RP
  71	CONTINUE
	RILX = 0.
	RKLS = 0.
C
  72  POTF = CSURA*(RKLS*RILX - RILS*RKLX)  
  79  NDEQP(2*IK-1) = 256.*POTF + 256.5
      IF(IK.EQ.2) NDEQP(3) = NDEQP(3) + 512.
	IXDATA(IK) = 110.*POTF
   78 CONTINUE
C      CALL PLOTF (NDEQP, ITIC,IERR)
	CALL SCOPLT(IXDATA)
   77 CONTINUE
C      CALL CLOSEF (1)
	NDEQP(4) = 32
   80 CONTINUE
      IF(XD(56).GT.4.5) STOP
	GO TO 200
      STOP  
      END 
       SUBROUTINE BEAMWK(W,DEQ,DMAG)
C 
C      THIS ROUTINE EVALUATES THE DISPERSION RELATION FOR SURFACE
C      WAVES ON A BEAM, R.C.DAVIDSON, THEORY OF NONNEUTRAL PLASMAS 
C      (TNP)  EQ. 2.7.15 
C      NC IS TH NUMBER OF COMPONENTS (TNP ALPHA, ETA = 1 TO NC)
C      RME(N) IS THE RATIO OF MASS(N) TO ELECTRON MASS, BUT IS 
C      NEGATIVE IF CHARGE IS NEGATIVE
C      DENS(N) IS RATIO OF DENSITY TO SOME STANDARD DENSITY, USUALLY 
C      DENSITY OF COMPONENT (1)  
C      BETAZ(N) IS VZ/C FOR COMPONENT N
C      ALL FREQS ARE RATIOS TO ELECTRON PLASMA FREQ. AT THE STANDARD 
C      DENSITY 
C      XKZ IS IN UNITS OF WP/C, WHERE WP IS STANDARD (RADIAN) PL.F.
C      THE MAGNETIC FIELD IS SPECIFIED BY GIVING WCE, THE RATIO OF 
C      ELECTRON CYCLTRON FREQ TO THE STANDARD PLASMA FREQ. 
C      SWALF(N) = SIGN IN WALF, DETERMINES WHETHER + OR - IS USED
C      IN W ALPHA (TNP EQ, 2.7.3)
C 
      COMMON /BEAMBL/ XD(80),XNUA2(10),WALF(10),WC(10),WP2(10),NC,RPT2  
     1  ,WP(10),WT,WCE,RP,RC
      DIMENSION RME(10),DENS(10),SWALF(10),BETAZ(10) 
        COMPLEX W,DEQ,XNUA2,DEQC,DEQE,CRECIP,RPT2 
        COMPLEX T2,T,Z,AT(10),BT,CT,DT
        COMPLEX DBIX,DBJZ,DBKX,TT(10)
        COMPLEX DUMMY1,DUMMY2,QJN,QIKN 
        COMPLEX RJMZ,RJNZ 
        COMPLEX RKMX,RKMY,RKNX,RKNY 
        COMPLEX RIMX,RIMY,RINX,RINY 
	EQUIVALENCE (XD(1),XKZ)
	EQUIVALENCE (XD(5),WR),(XD(6),WI),(XD(7),RW)
	EQUIVALENCE (XD(8),AZL),(XD(9),XNC)
	EQUIVALENCE (XD(11),RME(1)),(XD(21),DENS(1)),(XD(41),SWALF(1))
	EQUIVALENCE (XD(31),BETAZ(1))
C 
C CALCULATE XNUA , TNP EQ.2.7.4 
C 
C        PRINT 1005
C 1005   FORMAT('0BEAM(W,K)')
       DMAG = 1.
       IF(XKZ.NE.0.) GO TO 20
       CALL LONGWK(W,DEQ,DMAG)
       RETURN
   20  DO 30 N=1,NC
       AT(N) = W - XKZ*BETAZ(N) - AZL*WALF(N)
       XNUA2(N)=AT(N)**2- CMPLX((WC(N)+2*WALF(N))**2,0.) 
C       PRINT 1008, N, AT(N), N, XNUA2(N) 
C 1008  FORMAT(' AT(',I1,')',2E15.4,'  XNUA2(',I1,')',2E15.4) 
   30  CONTINUE
C 
C CALCULATE T2 ,TNP. EQ. 2.7.8  
C 
       BT=CMPLX(0.,0.) 
       CT=CMPLX(0.,0.) 
       DO 40 N=1,NC
         BT=BT+WP2(N)*CRECIP(AT(N)**2)
         CT=CT+WP2(N)*CRECIP(XNUA2(N))  
   40  CONTINUE
       T2=-XKZ**2*(1.-BT)*CRECIP(1.-CT)
       RPT2 = RP**2*T2
C
C     CALCULATE DEQ = LEFT  - RIGHT SIDES OF EQ. 2.7.15 
C 
       L=AZL+.5
       X=XKZ*RP
       Y=XKZ*RC
       Z=CSQRT(RPT2)
C       PRINT 1013,X,Y,Z,RPT2
C 1013  FORMAT (4X,'X',E15.4,4X,'Y',E15.4,4X,'Z',2E15.4,4X
C     1 ,'RPT2',2E12.3)
       DT=CMPLX(0.,0.) 
       DO 60 N=1,NC
       TT(N)=WP2(N)*(WC(N)+2.*WALF(N))*CRECIP(XNUA2(N)*(AT(N)))
       DT = DT + TT(N)
       DMAG = AMAX1(DMAG,CABS(TT(N)))
   60  CONTINUE
C
C                       GET THE BESSEL FUNCTIONS
C
C	IMAGINARY B.F.S, I AND K
	TEST = ABS(Y)
	IF(TEST.GE.80.) GO TO 71
	IF(TEST.LE.1.E-6) GO TO 73
C
C	ENTRY FOR MODERATE ARGUMENT
       CALL BESIZ(CMPLX(X,0.),L,2,1,RIMX,RINX,RKMX,RKNX,LERR)
	ENCODE(120,1100,STRING) LERR,'RKNX',CMPLX(X,0.)
        IF (LERR .NE. 0) CALL PLTPRT(STRING)
       CALL BESIZ(CMPLX(Y,0.),L,2,1,RIMY,RINY,RKMY,RKNY,LERR)
	ENCODE(120,1100,STRING) LERR,'RKNY',CMPLX(Y,0.)
        IF (LERR .NE. 0) CALL PLTPRT(STRING)
       DBKX=AZL*RKMX/CMPLX(X,0.)-RKNX
       DBIX=AZL*RIMX/CMPLX(X,0.)+RINX
	QIKN = (RKMY*DBIX-DBKX*RIMY)*CRECIP(RKMY*RIMX-RKMX*RIMY)
	GO TO 72
C
C	ENTRY FOR VERY LARGE ARGUMENT
C	THIS FUNCTION ASSUMES RC .GT. RP
  71	CONTINUE
        QIKN = -1. - .5/X
	GO TO 72
C
C	ENTRY IF ARGUMENT IS NEAR ZERO
  73    QIKN = 1.
C
C	NOW ORDINARY BESSEL FUNCTIONS
C
  72    TEST = Z
	TEST = ABS(TEST) + ABS(AIMAG(Z))
	IF(TEST.LE.1.E-6) GO TO 74
	TEST = ABS(AIMAG(Z))
	IF(TEST.GT.80.) GO TO 76
	CALL BESIZ(Z,L,1,1,RJMZ,RJNZ,DUMMY1,DUMMY2,LERR)
	ENCODE(120,1100,STRING) LERR,'RJNZ',Z
        IF (LERR .NE. 0) CALL PLTPRT(STRING)
        DBJZ=AZL*RJMZ/Z-RJNZ
	QJN = Z*DBJZ*CRECIP(RJMZ)
 1100  FORMAT (' DANGER, ERROR IN BESSEL CALCULATION ***** ERR.NO.',I3
     1  ,2X,A4,2X,2E11.3)
	GO TO 75
C
C	ENTRY FOR SMALL ARGUMENT
   74   QJN = AZL
	IF(L.EQ.0) QJN = -.5*Z**2
	GO TO 75
C
C	ENTRY FOR LARGE ARGUMENT
   76   CONTINUE
	TEST = 1.
	IF(AIMAG(Z).GT.0.) TEST = -1.
	QJN = CMPLX(0.,TEST)*Z
C
C	FINAL EVALUATION OF EQN 2.7.15, LEFT - RIGHT SIDES
C
   75   DEQ=CMPLX(X,0.)*QIKN - (1.-CT)*QJN - AZL*DT 
      RETURN
      END 							! end beamwk
	FUNCTION FLILO(X,B)
C
C
C       FLILO MEANS LINEAR FUNCTION FOR SMALL ARGUMENT
C       AND LOGARITHM FOR LARGE ARGUMENT
C       SIGN IS PRESERVED
C       FOR /X/.LT.B   FLILO=X
C       FOR /X/.GT.B   FLILO=A*LOG10(X)+C IN SUCH A WAY
C       THAT FLILO AND ITS DERIVATIVE ARE CONTINUOUS AT /X/=/B/
C
        XM=ABS(X)
        IF(XM.GT.B) GO TO 1
 	FLILO=X
  	RETURN
    1   FT=B*ALOG(XM/B)+B
        FLILO=SIGN(FT,X)
        RETURN         
	END
         FUNCTION AFLILO(X,B)
C
C       INVERSE OF FLILO
C 
        XM=ABS(X)
        IF(XM.GT.B) GO TO 1
        AFLILO=X
        RETURN
    1   FT=B*EXP(XM/B-1.)
        AFLILO=SIGN(FT,X)
        RETURN
        END
      SUBROUTINE LONGWK(W,DEQ,DMAG)
C     THIS ROUTINE EVALUATES THE DISPERSION RELATION FOR SURFACE
C     WAVES ON A BEAM, R.C.DAVIDSON, THEORY OF NONNEUTRAL PLASMAS 
C     (TNP)  EQ. 2.9.2 , FOR THE LONG WAVELENGTH LIMIT
C     EQ. 2.9.2 IS NORMALIZED TO AGREE WITH EQ. 2.7.15
C     NC IS TH NUMBER OF COMPONENTS (TNP ALPHA, ETA = 1 TO NC)
C     RME(N) IS THE RATIO OF MASS(N) TO ELECTRON MASS, BUT IS 
C     NEGATIVE IF CHARGE IS NEGATIVE
C     DENS(N) IS RATIO OF DENSITY TO SOME STANDARD DENSITY, USUALLY 
C     DENSITY OF COMPONENT (1)  
C     BETAZ(N) IS VZ/C FOR COMPONENT N
C     ALL FREQS ARE RATIOS TO ELECTRON PLASMA FREQ. AT THE STANDARD 
C     DENSITY 
C     THE MAGNETIC FIELD IS SPECIFIED BY GIVING WCE, THE RATIO OF 
C     ELECTRON CYCLOTRON FREQ TO THE STANDARD PLASMA FREQ.
C     SWALF(N) = SIGN IN WALF, DETERMINES WHETHER + OR - IS USED
C     IN W ALPHA (TNP EQ, 2.7.3)
C 
      COMMON /BEAMBL/ XD(80),XNUA2(10),WALF(10),WC(10),WP2(10),NC,RPT2
     1  ,WP(10),WT,WCE,RP,RC
      DIMENSION RME(10),DENS(10),SWALF(10),BETAZ(10)
	EQUIVALENCE (XD(1),XKZ)
	EQUIVALENCE (XD(5),WR),(XD(6),WI),(XD(7),RW)
	EQUIVALENCE (XD(8),AZL),(XD(9),XNC)
	EQUIVALENCE (XD(11),RME(1)),(XD(21),DENS(1)),(XD(41),SWALF(1))
	EQUIVALENCE (XD(31),BETAZ(1))
      COMPLEX W,XNUA2,DEQ,WDOP,DEN,RPT2
C 
      DEQ = 2./((RP/RC)**2-1.)
      DMAG = CABS(DEQ)
C     CALCULATE SUM (TNP EQ. 2.9.2) 
      DO 20 N = 1,NC  
      WDOP = W - XKZ*BETAZ(N) 
      DEN = (WDOP-AZL*WALF(N))*(WDOP + (2.-AZL)*WALF(N) + WC(N))
C      IF(CABS(DEN).LT.1.E-17*WP2(N)) GO TO 21
C      DEQ = DEQ + WP2(N)/DEN
C      DMAG = AMAX1(DMAG,CABS(WP2(N)/DEN))
C      GO TO 20
C   21 BNORM = DEN
      BNORM = DEN
      BNORM = ABS(BNORM) + ABS(AIMAG(DEN))
      IF(BNORM.LT.1.E-30) GO TO 22
      DEN = DEN/BNORM
      BNORM = 1./BNORM
      DEQ = DEQ + BNORM*(WP2(N)/DEN)
      DMAG = AMAX1(DMAG,BNORM)
      GO TO 20
   22 DEQ = 1.E30
      DMAG = 1.E30
   20 CONTINUE
      DEQ = AZL*DEQ 
      RETURN
      END 
      SUBROUTINE ROOTS(NR,FUNCT,XK,NBAD,IBAD) 
C     THIS ROUTINE FINDS NR ROOTS OF THE FUNCTION FUNCT 
C     FUNCT IS CALCULATED BY A SUBROUTINE WHICH ALSO RETURNS  
C     AN ESTIMATE OF ITS MAGNITUDE, EMAG  
      COMPLEX EPS,XK,XKT,EPSR,XKL,DER,EPS0,CRECIP
      EXTERNAL FUNCT  
      DIMENSION NRS(20),XK(20)
      DATA ERR /6.E-7/
      DATA RK /.99/ 
      IBAD = 0
      NBAD = 0
C     FIND NR ROOTS 
      DO 1 N = 1,NR 
      XKL = XK(N)*RK  
      CALL FUNCT(XKL,EPSR,EMAG) 
      XKT=XKL/RK
      IF(CABS(XKT).EQ.0.) XKT = .1*XK(N+1)
      IF(CABS(XKT).EQ.0.) XKT = 1.E-6
C     REMOVE ROOTS ALREAD FOUND 
      N1 = N - 1
      IF(N1.EQ.0) GO TO 3 
      DO 4 I = 1,N1 
      EPSR = EPSR*CRECIP(XKT - XK(I)) 
      EMAG = EMAG/CABS(XKT - XK(I)) 
    4 CONTINUE
    3 CONTINUE
C     ITERATE TO FIND ROOTS 
      DO 2 J = 1,20 
      NRS(N) = J
      CALL FUNCT(XKT,EPS,EMAG)
C     REMOVE ROOTS ALREADY FOUND
      IF(N1.EQ.0) GO TO 5 
      DO 6 I = 1,N1 
      EPS = EPS*CRECIP(XKT-XK(I)) 
      EMAG = EMAG/CABS(XKT-XK(I)) 
    6 CONTINUE
    5 IF(CABS(XKT-XKL).GT.1.0E-15) GO TO 20
	ENCODE(120,101,STRING) XKT,XKL,EPS,EPSR
C	CALL PLTPRT(STRING)
        GO TO 21
   20 DER = (EPS-EPSR)/(XKT-XKL)
   21 XKL = XKT 
      EPSR = EPS
      IF(CABS(DER).EQ.0.) XKT = XKT*1.000001
      IF(CABS(DER).NE.0.) XKT = XKT - EPS/DER 
      IF(CABS(XKT-XKL).EQ.0.) GO TO 7 
      AERR = ERR*(EMAG + CABS(DER*XKL))
      IF(CABS(EPS).LT.AERR) GO TO 7 
    2 CONTINUE
      IF(NBAD.EQ.0) IBAD = N
      NBAD = NBAD + 1 
      ENCODE(120,103,STRING) N,XKT,EPS 
C      CALL PLTPRT(STRING)
  103 FORMAT(I4,'TH ROOT MISSED, GOT W=',2E14.6,', VAL= '2E12.3) 
    7 XK(N) = XKT 
    1 CONTINUE
C     NOW NR ROOTS ARE FOUND
      ENCODE(120,100,STRING) (NRS(N),XK(N),N=1,NR) 
C      CALL PLTPRT(STRING)
  100 FORMAT(' ITER. AND ROOTS',4(I4,2E10.3)) 
  101 FORMAT(' AT5',8E16.8) 
      RETURN
      END 
      SUBROUTINE SORTN(IXS,FOLLOW,NS)
      REAL IXS(20),IXT
      DIMENSION FOLLOW(20)
C     ORDER X COORDS IN INCREASING ORDER
      DO 11 N = 1,NS-1
      N1 = N + 1
      DO 12 M = N1,NS
      IF((IXS(M)-IXS(N)).GT.0) GO TO 12
C     EXCHANGE
      IXT = IXS(N)
      IXS(N) = IXS(M)
      IXS(M) = IXT
      IXT = FOLLOW(N)
      FOLLOW(N) = FOLLOW(M)
      FOLLOW(M) = IXT
   12 CONTINUE
   11 CONTINUE
      RETURN
      END
      SUBROUTINE POLY(W,DEQ,DMAG)
C
C     THIS ROUTINE REMOVES THE POLES FROM DEQ
C
      COMMON /POLEBK/ WPOLE(20),NPOLE
      COMPLEX W,DEQ,DEQS
      DATA IR,JR /0,0/
      CALL BEAMWK(W,DEQ,DMAG)
      DEQS = DEQ
      IF(CABS(W).GT.50.) W=.001*CMPLX(RAN(IR,JR),RAN(IR,JR))
      DO 10 N = 1,NPOLE
      DEQ = DEQ*(W-WPOLE(N))
      DMAG = DMAG*CABS(W-WPOLE(N))
  10  CONTINUE
C      PRINT 100,W,DEQ,DEQS,DMAG
 100  FORMAT(' POLY W=',2E12.4,' DEQ,DEQS=',4E12.4,' DMAG=',E12.4)
      RETURN
      END
      FUNCTION CRECIP(X)
C
C	THIS FUNCTION RETURNS THE COMPLEX RECIPROCAL OF X
C	IT AVOIDS THE PROBLEMS OF SQUARING LARGE NUMBERS
C
      COMPLEX X,CRECIP
      BNORM = X
      BNORM = ABS(BNORM) + ABS(AIMAG(X))
      IF(BNORM.LT.1.E-30) GO TO 1
      BNORM = 1./BNORM
      CRECIP = X*BNORM
      CRECIP = BNORM/CRECIP
      RETURN
    1 CRECIP = 1.E30
      RETURN
      END
	SUBROUTINE PLTPRT(STRING)
	BYTE STRING(132)
	WRITE (6,100) STRING
 100	FORMAT(' '132A1)
	DO 10 N = 1,132
  10	STRING(N) = ' '
	RETURN
	END
