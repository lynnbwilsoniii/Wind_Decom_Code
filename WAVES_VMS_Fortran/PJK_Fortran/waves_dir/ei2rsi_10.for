      PROGRAM EI2RSI
C
C	THIS ROUTINE PLOTS OR PRINTS THE DISPERSION RELATION FOR
C	THE ELECTRON-ION TWO-ROTATING-STREAM INSTABILITY, DAVIDSON
C	TNNP SECT 2.9.3, EQN. 2.9.13  (LHS-RHS) WITH KZ = 0, L = 1.
C	FREQUENCIES ARE RATIOS TO ION PLASMA FREQUENCY.
C
C	LINK WITH PLTLIB,FLILO, OR FAKEPL IF DESIRED
C
	LOGICAL*1 TIM(8),DAT(9)
	LOGICAL ITITL(8)
	COMPLEX W,DEQ,DEN1,DEN2
	BYTE STRING(132)
      COMMON /POLEBK/ WPOLE(20),WP2(10),XD(80)
      DIMENSION XNUA2(10),WALF(10),WC(10),WP(10)
      DIMENSION RME(10),DENS(10),SWALF(10),BETAZ(10),WCS(20)
	DIMENSION NDEQP(4),IPL(2),ROOTJ(5)
	EQUIVALENCE (XD(1),XKZ),(XD(2),WCE),(XD(3),RP),(XD(4),RC)
	EQUIVALENCE (XD(5),WR),(XD(6),WI),(XD(7),RWR)
	EQUIVALENCE (XD(8),AZL),(XD(9),XNC)
	EQUIVALENCE (XD(11),RME(1)),(XD(21),DENS(1)),(XD(31),BETAZ(1))
	EQUIVALENCE (XD(41),SWALF(1))
     	EQUIVALENCE (XD(54),BBX),(XD(55),BBY),(XD(56),XSOLV)
        EQUIVALENCE (XD(64),WTR),(XD(65),WTI)
      DATA ITITL /'MISC','MASS','DENS',' VZ ','SIGN',2*'MISC','ROOT'/
      DATA NC /2/ 
      DATA AZL /1./ 
      DATA XKZ /0./ 
      DATA RP,RC /.0084,.336/
      DATA WR,WI /3.1,0./
      DATA RWR /1.1/
      DATA WCE /2./ 
      DATA RME /-1.,51400.,8*1. / 
      DATA DENS /1.,1.,8*1. / 
      DATA SWALF /-1.,1.,-1.,1.,6*1./ 
      DATA BETAZ /3*0.,.0,6*0./
      DATA BBX,BBY /.0001,1./
      DATA XD(52), XD(53) /-500., 500./
      DATA XD(57) /6./
C     XD(58) IS NPP = NO. OF POINTS TO BE PLOTTED
      DATA XD(58) /365./
      DATA XSOLV /3./
      DATA TWOPI /6.2831859/
      DATA NDEQP/4*512/
      DATA IPL/2*115/
      DATA ROOTJ /2.404826,3.831706,5.135,6.380,7.588/
C	XD(67)=0. IS CRT,  = 1. IS PAPER PLOT
      DATA XD(67) /1./
      DATA XD(68) /1./
      DATA DEQS,DEQSS /1.,1./
C
  201	CONTINUE
	DO 203 I = 1,24
  203	WRITE(7,1013)
 1013	FORMAT(' -')
      CALL SCOPE
  202	IF(XD(67).LT..5) CALL SCOPST('F','S',2,0,'P','P',IER)
	CALL DATE(DAT)
	CALL TIME(TIM)
	ENCODE(132,104,STRING) DAT,TIM
	IF(XD(67).GT..5) CALL PLTPRT(STRING)
  104   FORMAT('0 PROGRAM EI2RES',5X,9A1,5X,8A1)
C	OPEN(UNIT=3,NAME='EI2RES.DAT',TYPE='NEW')
	XNC = NC
C 
 200	CONTINUE
C	WRITE (6,701)
 701	FORMAT(' STEP 1, MANUAL CHOICE OF INITIAL PARAMETERS')
 101	WRITE (6,702)
 702	FORMAT(' TYPE NO. ,NEW VALUE OF VARIABLE TO BE CHANGED, 0 FOR NO
     1 CHANGE '$)
	READ (5,501) ND,XTT
 501	FORMAT(I5,F15.5)
	IF(ND.EQ.0) GO TO 102
	WRITE(6,502) ND,XD(ND),XTT
	ENCODE(132,502,STRING) ND,XD(ND),XTT
	IF(XD(67).GT..5) CALL PLTPRT(STRING)
 502	FORMAT(' CHANGE VARIABLE NO.',I3,' FROM',F15.5' TO',F15.5)
	XD(ND) = XTT
	IF(XD(56).GT.4.5) STOP
	GO TO 101
 102	NC = XNC + .5
	WS = XD(52)
C
        ENCODE(132,105,STRING)
  105   FORMAT(' INPUT VARIABLES')
	IF(XD(67).GT..5) CALL PLTPRT(STRING)
	DO 73 JJ = 1,7
	KK = 10*JJ-9
        ENCODE(132,1016,STRING) KK,ITITL(JJ),(XD(KK+N),N=0,9)
	IF(XD(67).GT..5) CALL PLTPRT(STRING)
   73   CONTINUE
 1016   FORMAT(I5,2X,A4,10E12.4)
C
C     CALCULATE PLASMA AND CYCLOTRON FREQS. 
      ENCODE(132,1003,STRING)
	IF(XD(67).GT..5) CALL PLTPRT(STRING)
 1003 FORMAT(3X,'NO.',5X,'DENS',7X,'BETAZ',9X,
     1  'WP',10X,'WC',7X,'W ALPHA',6X,'W A/WC') 
	RTRM = SQRT(ABS(RME(2)/RME(1)))
      DO 10 N = 1,NC  
      WC(N) = WCE*RTRM/RME(N)
      WP2(N) = DENS(N)*RME(2)/ABS(RME(N))
      WP(N) = SQRT(ABS(WP2(N))) 
   10 CONTINUE
C 
C     CALCULATE WALF (TNP EQ. 2.7.3) AND POLES
C
      DO 20 N = 1,NC  
      ST = 0. 
      DO 21 M = 1,NC  
      ST = ST + SIGN(1.,RME(M))*DENS(M)/WC(N)**2/RME(N) 
   21 CONTINUE
C	PRINT 1002,N,ST
      STT = SQRT(1. - 2.*ST)
      WALF(N) = -.5*WC(N)*(1. + SIGN(STT,SWALF(N))) 
      WAWC = WALF(N)/WC(N)
      NN = N
      ENCODE(132,1002,STRING) NN,DENS(N),BETAZ(N),WP(N),WC(N),WALF(N)
     1 ,WAWC
	IF(XD(67).GT..5) CALL PLTPRT(STRING)
      WPOLE(2*N-1) = XKZ*BETAZ(N) + AZL*WALF(N)
      WCS(2*N-1) = ABS(WC(N))
      WPOLE(2*N) = WPOLE(2*N-1) - WC(N) - 2.*WALF(N)
      WCS(2*N) = ABS(WC(N))
   20 CONTINUE
 1002 FORMAT(I5,6E12.4)
	F = DENS(2)/DENS(1)
	ENCODE(132,1018,STRING) F,WCE
 1018	FORMAT(' f = ',F7.3,',   Wce/Wpe =',F7.3)
	CALL PLTPRT(STRING)
	FR2I = 2.*RME(2)/WCE**2
	FR2E = 2./WCE**2
	WEP = .5*WCE*RTRM*(1.+SQRT(1.- FR2E*(1.-F)))
	WEN = .5*WCE*RTRM*(1.-SQRT(1.- FR2E*(1.-F)))
	WIP = -.5*WCE*(1.+SQRT(1.+ FR2I*(1.-F)))/RTRM
	WIN = -.5*WCE*(1.-SQRT(1.+ FR2I*(1.-F)))/RTRM
	WPOLE(1) = WEP
	WPOLE(2) = WEN
	WPOLE(3) = WIP
	WPOLE(4) = WIN
	ENCODE(132,1017,STRING) WEP,WEN,WIP,WIN
 1017   FORMAT(' POLES',4E13.4)
	CALL PLTPRT(STRING)
      NW10S = 10.*XD(52) - .0001
      NWS = XD(52) - .0001
      WEV2 = (WALF(1)-WALF(2))**2
C	THE FOLLOWING ASSUMES M = LOWEST VALUE
      L = AZL + .5
      LL = MIN0(L+1,5)
      PLM = ROOTJ(LL)
      IF(LL.GT.5) PLM = AZL + 1.85575*AZL**(1./3.)
      XKPER = PLM/RP
      XK2 = XKZ**2 + XKPER**2
      RKPAR2 = XKZ**2/XK2
      RKPER2 = XKPER**2/XK2
      ENCODE(132,1012,STRING) XKZ,XKPER
	IF(XD(67).GT..5) CALL PLTPRT(STRING)
 1012 FORMAT('  KZ*C/WP =',E13.5,' KX*C/WP =',E13.5)
	IF(XD(67).GT..5) CALL PLTFST('L',4,0,'ELECTRON-ION TWO-ROTATING
     1-STREAM DISPERSION RELATION',IER,' -1  0   1')
      NPT = XD(58) + .5
      IF(XD(67).LT..5) NPT = 512
      DO 32 I = 0,NPT
      WT = XD(52) + I*(XD(53)-XD(52))/MAX0(NPT,1)
      W = CMPLX(WT,WI)
      DEQ = 1./(1.-(RP/RC)**2)
      DEN1 = 2.*(W-WEP)*(W-WEN)
C      IF(DEN1.NE.0.) DEQ = DEQ - WP2(1)/DEN1
      DEQ = DEQ - WP2(1)/DEN1
      DEN2 = 2.*(W-WIP)*(W-WIN)
C      IF(DEN2.NE.0.) DEQ = DEQ - WP2(2)/DEN2
      DEQ = DEQ - WP2(2)/DEN2
C	IF(DEN1.EQ.0.OR.DEN2.EQ.0.) DEQ = 0.
 	NDEQP(1) = 32.*FLILO(DEQ,BBY) + 512.5
	IPL(1) = 16.*FLILO(DEQ,BBY) + 115.5
	IPL(1) = MAX0(IPL(1),0)
	IPL(1) = MIN0(IPL(1),230)
C     PRINT ROOTS ON SCREEN IF XD(68).EQ.1.
	DEQT = DEQ
	IF(DEQT*DEQS.GT.0.) GO TO 33
	IF((DEQSS-DEQS)*(DEQS-DEQT).LE.0.) GO TO 33
	IF(XD(68).GT..5) WRITE(7,1014) W,WS
 1014 FORMAT(' ROOT BETWEEN '2E13.5)
   33 CONTINUE
      WS = W
      DEQSS = DEQS
      DEQS = DEQ
C     PUT TIC MARKS AT INTEGRAL PLASMA FREQ. AND TENTHS
      ITIC = 1
      NW10 = 10.*W
      IF(NW10.NE.(NW10S)) ITIC = 8
      NW10S = NW10
      NW = W
      IF(NW.NE.NWS) ITIC = 0
      NWS = NW
	IF(XD(67).GT..5) CALL PLOTF(NDEQP,ITIC,IERR)
	IF(XD(67).LT..5) CALL SCOPLT(IPL)
   32 CONTINUE
	IF(XD(67).GT..5) CALL CLOSEF(1)
C      CLOSE(UNIT=3)
      GO TO 201
   80 STOP
      END
      SUBROUTINE BEAMWK(W,DEQ,DMAG)
C
	COMPLEX W,DEQ,DEN1,DEN2
      COMMON /POLEBK/ WPOLE(20),WP2(10),XD(80)
	EQUIVALENCE (XD(1),XKZ),(XD(2),WCE),(XD(3),RP),(XD(4),RC)
	EQUIVALENCE (WPOLE(1),WEP),(WPOLE(2),WEN)
	EQUIVALENCE (WPOLE(3),WIP),(WPOLE(4),WIN)
C
      DEQ = 1./(1.-(RP/RC)**2)
      DEN1 = 2.*(W-WEP)*(W-WEN)
C      IF(DEN1.NE.0.) DEQ = DEQ - WP2(1)/DEN1
      DEQ = DEQ - WP2(1)/DEN1
      DEN2 = 2.*(W-WIP)*(W-WIN)
C      IF(DEN2.NE.0.) DEQ = DEQ - WP2(2)/DEN2
      DEQ = DEQ - WP2(2)/DEN2
	RETURN
	END
      SUBROUTINE POLY(W,DEQ,DMAG) 
C 
C     THIS ROUTINE REMOVES THE POLES FROM DEQ 
C 
      COMMON /POLEBK/ WPOLE(20),NPOLE 
      COMPLEX W,DEQ,DEQS
      DATA IR,JR /0,0/
      CALL BEAMWK(W,DEQ,DMAG) 
      DEQS = DEQ
      IF(CABS(W).GT.50.) W=.001*CMPLX(RAN(IR,JR),RAN(IR,JR))
      DO 10 N = 1,NPOLE 
      DEQ = DEQ*(W-WPOLE(N))
      DMAG = DMAG*CABS(W-WPOLE(N))
  10  CONTINUE
C      PRINT 100,W,DEQ,DEQS,DMAG
 100  FORMAT(' POLY W=',2E12.4,' DEQ,DEQS=',4E12.4,' DMAG=',E12.4)
      RETURN
      END 

