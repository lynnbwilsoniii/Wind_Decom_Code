      PROGRAM TYPE3
C
C	THIS IS A PROGRAM TO INTEGRATE THE EQUATIONS OF E.M.
C	AND PLASMA WAVES NEAR THE PLASMA FREQUENCY IN ORDER
C	TO DETERMINE TUNNELLING
C
      COMMON /PARAMS/ WPE,WCX,WCZ,EOM,XKY,XKZ,W,C,CI
      EXTERNAL DERIV,OUTPUT
      COMPLEX CI,E(3),B(3),VMOE(3),DBDX(3),DEDX(3),CKXB
      CHARACTER*8 LABELS(10)
      CHARACTER*10 STITLE(10)
C
      DIMENSION X(10),DX(10),PRMT(20),WT(10),AUX(8,10)
      DIMENSION IX(12),IY(12),XC(900),YC(900)
      DIMENSION MAXPLT(10)
      DATA LABELS /'Re(By)','Im(By)','Re(Bz)','Im(Bz)','Re(Ey)',
     1  'Im(Ey)','Re(Ez)','Im(Ez)','DET','Wpe-W'/
      DATA TWOPI /6.2831853/
      DATA WT /10*.125/
      DATA X /10*0./
      DATA NPR /0/                    !NPR = 1 GIVES FULL PRINTOUT
      DATA MAXPLT /10*1024/
      DATA YSCL /128./
      DATA C / 2.9979E10/
C
	XI = 1.
	CI = CMPLX(0.,XI)
	CALL BPLTBGN(10,MAXPLT,LABELS,'TYPE 3','DIFFUSN',1.)
C
C     SET UP INITIAL CONDITIONS
C
	GO TO 10
 7654   CONTINUE
      WRITE(6,700)
  700 FORMAT(' TYPE EROCK (F8.3) IN V/M, RETURN FOR NO CHANGE')
      READ(5,500) EROCKT
      IF(EROCKT.NE.0.) EROCK = EROCKT
  500 FORMAT(F8.3)
      WRITE(6,701)
  701 FORMAT(' TYPE 1 IF FULL PRINT IS WANTED')
      READ(5,501) NPR
  501 FORMAT(I5)
C
   10 CONTINUE
	X(1) = 1.
	X(7) = -1.
	WPE = TWOPI*2.0E4
	W  =  TWOPI*2.02E4
	WCX = TWOPI*100.
	WCZ = TWOPI*100.
	WCZ = 0.
	WC2 = WCX**2 + WCZ**2
	WC = SQRT(WC2)
	IPOL = 1
C	XKU IS A VECTOR WHICH GIVES THE DIRECTION OF K AT X = 0
	XKZU = 0.
	XKYU = 0.
	XKXU = 1.
	XKU2 = XKXU**2 + XKYU**2 + XKZU**2
	XKU = SQRT(XKU2)
	WRITE(3,*) ' WPE=',WPE,' W=',W
	WRITE(3,*) ' WCX=',WCX,' WCZ=',WCZ
	WRITE(3,*) ' YSCL=',YSCL,' IPOL=',IPOL
C
	CKXB = C*(XKY*B(3) - XKZ*B(2))
	XNYC = XKY*C/W
	XNZC = XKZ*C/W
C
C	DETERMINE E AND B FOR PURE PROPAGATING MODE (1=R OR 2=L)
C	B0 IS IN X,Z PLANE, BUT K CAN HAVE ANY DIRECTION
C	W, KY, AND KZ ARE GIVEN AND KX MUST BE DETERMINED
	COSTK = 1.
	IF(WC2.NE.0..AND.XKU.NE.0.) 
     1   COSTK = (XKXU*WCX + XKZU*WCZ)/SQRT(WC2)/XKU
C	USE B FOR TEMPORARY STORAGE OF E
	CALL EMCOPL(2,COSTK,XK,B)
	XK = XK*WPE
	PRINT*,'IPOL=2',COSTK,XK/C
	CALL EMCOPL(IPOL,COSTK,XK,B)
	XK = XK*WPE
	PRINT*,'IPOL=',IPOL,COSTK,XK/C
	XKX = XKXU*XK/XKU/C
	XKY = XKYU*XK/XKU/C
	XKZ = XKZU*XK/XKU/C
	XK2 = XKY**2 + XKZ**2 + XKX**2
	WRITE(3,*) ' KX,KY,KZ=',XKX,XKY,XKZ
C
C	TRANSFORM E FROM USUAL SYSTEM TO THIS SYSTEM
C
C	CALCULATE UNIT VECTORS OF USUAL SYSTEM IN THIS SYSTEM
C	USUAL SYSTEM IS SYSTEM USED IN EMCOPL, NAMELY B0 IN Z
C	DIRECTION, K IN X,Z PLANE.  THIS SYSTEM IS X IN DIRECTION
C	OF PLASMA DENSITY GRADIENT, B0 IN X,Z PLANE, K ARBITRARY
C	UX,Y,Z ARE A UNIT VECTOR EXPRESSED IN THIS SYSTEM, ALONG
C	COORDINATE AXES IN USUAL SYSTEM.
C
C	USUAL Z AXIS IS DIRECTION OF B0
	UX = WCX/WC
	UZ = WCZ/WC
	E(3) = UZ*B(3)
	E(1) = UX*B(3)
	E(2) = 0.
C	USUAL Y AXIS IS IN DIRECTION OF  -K X B0 OF THIS SYSTEM
C	IF K IS NOT PARALLEL TO B0:
	UX = XKY*WCZ
	UY = XKZ*WCX - XKX*WCZ
	UZ = -XKY*WCX
	UN = SQRT(UX**2 + UY**2 + UZ**2)
C	IF K IS PARALLEL TO B0, TAKE ANY PERPENDICULAR VECTOR:
	IF(UN.EQ.0.) THEN
	  UX = WCZ
	  UZ = -WCX
	  UY = 0.
	  UN = SQRT(UX**2 + UY**2 + UZ**2)
	ENDIF
	E(1) = E(1) - UX*B(2)/UN
	E(2) = E(2) - UY*B(2)/UN
	E(3) = E(3) - UZ*B(2)/UN
C	USUAL X AXIS IS IN DIRECTION OF B0 X (B0 X K)
	UXT = -WCZ*UY
	UYT = WCZ*UX - WCX*UZ
	UZT = WCX*UY
	UN = SQRT(UXT**2 + UYT**2 + UZT**2)
	E(1) = E(1) + UXT*B(1)/UN
	E(2) = E(2) + UYT*B(1)/UN
	E(3) = E(3) + UZT*B(1)/UN
	PRINT*,' E',E
	WRITE(3,*) ' E',E
	B(1) = (C/W)*(XKY*E(3) - XKZ*E(2))
	B(2) = (C/W)*(XKZ*E(1) - XKX*E(3))
	B(3) = (C/W)*(XKX*E(2) - XKY*E(1))
	PRINT*,'K',XKX,XKY,XKZ
	PRINT*,'B',B
	WRITE(3,*) ' B',B
	X(1) = B(2)
	X(2) = AIMAG(B(2))
	X(3) = B(3)
	X(4) = AIMAG(B(3))
	X(5) = E(2)
	X(6) = AIMAG(E(2))
	X(7) = E(3)
	X(8) = AIMAG(E(3))
      CALL DERIV(0.,X,DX)
      PRINT*,(X(I),I=1,8)
      PRINT*,(DX(I),I=1,8)
	WRITE(6,703)
  703 FORMAT(' OK, START INTEGRATION')
C
      PRMT(2) = 0.
C
C     DO INTEGRATION 
C
      DELX = -1.E5
	NSTEP = 300
      DO 1 NS = 1,NSTEP
C      IF(NS.GT.100) WPE = TWOPI*2.04E4
      IF(NS.GT.200) WPE = TWOPI*2.0E4
      PRMT(1) = PRMT(2)
      PRMT(2) = PRMT(1) + DELX
      PRMT(3) = 1.01*DELX
      PRMT(4) = 1.E-4
      DO 2 K = 1,10
   2  DX(K) = WT(K)
      CALL RKGS(PRMT,X,DX,8,IHLF,DERIV,OUTPUT,AUX)
      XX = -PRMT(2)
      IF(NPR.NE.0)PRINT*,(X(I),I=1,5)
	DO 20 N = 1,8
	YY = X(N)
	IY(N) = YSCL*YY + 512.5
  20	CONTINUE
	DET = W**2*(W**2 - WC2) - WPE**2*(W**2 - WCX**2)
	IY(9)  = 1.E-17*DET + 512.5
	IY(10) = .1*(WPE - W) + 512.5
	CALL BPLOT(IY)
C	WRITE(3,101) NS,X(1),X(2),X(3),DX(1),DX(2),EPHI(X(1))
   1  CONTINUE
 101  FORMAT(I5,F8.2,8E12.3)
C
C
C	PRINT*,IX(1),IY(1),IX(NP),IY(NP)
 1234	CONTINUE
C
C     PLOT RESULTS AFTER ORDERING
C
C      IF(NPR.NE.0)       WRITE(3,101) NS,PRMT(2),X
C      CALL GRAPH(NP,IX,IY)
C
	CALL BPLTERM
	STOP
	END
      SUBROUTINE DERIV(T,X,DX)
C
C     THIS ROUTINE CALCULATES THE DERIVATIVES FOR THE EQUATIONS OF
C	MOTION
C
      COMMON /PARAMS/ WPE,WCX,WCZ,EOM,XKY,XKZ,W,C,CI
      COMPLEX CI,E(3),B(3),VMOE(3),DBDX(3),DEDX(3),CKXB
C
      DIMENSION X(10),DX(10),VEL(6)
      DATA FOURPI /12.56/
C
C	X(1) = RE(BY), X(2) = IM(BY), X(5) = RE(EY), X(8) = IM(EZ) 
C
	WOC = W/C
	WC2 = WCX**2 + WCZ**2
	WP2 = WPE**2
	XNYC = XKY*C/W
	XNZC = XKZ*C/W
C
	B(2) = CMPLX(X(1),X(2))
	B(3) = CMPLX(X(3),X(4))
	E(2) = CMPLX(X(5),X(6))
	E(3) = CMPLX(X(7),X(8))
	CKXB = C*(XKY*B(3) - XKZ*B(2))
C
C	 VELOCITY AND EX
C
	DET = W**2*(W**2 - WC2) - WPE**2*(W**2 - WCX**2)
	E(1) = (-CKXB*W*(W**2-WC2) -CI*WP2*WCZ*W*E(2) 
     1  - WP2*WCZ*WCX*E(3))/DET
	VMOE(1) = (CI*CKXB*(W**2 - WCX**2) - W**2*WCZ*E(2)
     1  + CI*W*WCX*WCZ*E(3))/DET
	VMOE(2) = (-W*WCZ*CKXB + CI*W*(WP2 - W**2)*E(2)
     1  + WCX*(WP2 - W**2)*E(3))/DET
	VMOE(3) = (-CI*CKXB*WCZ**2 + WCX*(W**2 - WP2)*E(2)
     1  -CI*W*(W**2 - WCZ**2 - WP2)*E(3))/DET
C
	B(1) = XNYC*E(3) - XNZC*E(2)
C
	DBDX(3) = CI*XKZ*B(1) + CI*W*E(2)/C + WP2*VMOE(2)/C
	DBDX(2) = CI*XKY*B(1) - CI*W*E(3)/C - WP2*VMOE(3)/C
C
	DX(1) = DBDX(2)
	DX(2) = AIMAG(DBDX(2))
	DX(3) = DBDX(3)
	DX(4) = AIMAG(DBDX(3))
C
	DEDX(3) = CI*XKZ*E(1) - CI*W*B(2)/C
	DEDX(2) = CI*XKY*E(1) + CI*W*B(3)/C
C
	DX(5) = DEDX(2)
	DX(6) = AIMAG(DEDX(2))
	DX(7) = DEDX(3)
	DX(8) = AIMAG(DEDX(3))
C
C	PRINT 101,X,F
C
 101  FORMAT(11E12.3)
      RETURN
      END
      FUNCTION ELECF(R)
C
      COMMON /PARAMS/ WPE,WCX,WCZ,EOM,XKY,XKZ,W,C,CI
      COMPLEX CI
C
C     THIS RETURNS THE ELECTRIC FIELD IN VOLTS/METER
C
	ELECF = EROCK*(RROCK/R)**2
      RETURN
      END
      SUBROUTINE GRAPH(N,IX,IY)
C
C	THIS ROUTINE PLOTS N POINTS OF THE ARRAYS IY VS. IX
C
      COMMON /PARAMS/ WPE,WCX,WCZ,EOM,XKY,XKZ,W,C,CI
      COMPLEX CI
	DIMENSION IX(1),IY(1)
C
C     SET UP PLOT (LINK WITH FASTRIP/LIB)
C
C        ENCODE(10,106,STITLE) EROCK
 106	FORMAT(' E0 = 'F7.2)
	CALL BITPLTBGN('XFIELD','ORBITS')
C	CALL SMLTIC
C
C	SORT ARRAYS IN ORDER OF X
C	NN IS THE ARRAY INDEX, IXP IS THE X COORDINATE BEING PLOTTED
C
C	CALL SORTN(IX,IY,N)
	NN = 1
	IXP = MIN0(1,IX(1))
C
C	PLOT THE LINE X = IXP
C
  10	IF(IX(NN).GT.IXP) GO TO 20
	IPLT = MIN0(IY(NN),1099)
	CALL SETDOT(IPLT)
	NN = NN+1
	IF(NN.LE.N) GO TO 10
  20	CALL OVERLAY
	CALL BUFLINE
C	PRINT*,IXP,NN,IX(NN),IY(NN)
	IXP = IXP+1
	IF(NN.LE.N) GO TO 10
	CALL THROW(50)
	CALL BPLTERM
	RETURN
	END
      SUBROUTINE OUTPUT(T,X,DX,IHLF,NDIM,PRMT) 
C
      COMMON /PARAMS/ WPE,WCX,WCZ,EOM,XKY,XKZ,W,C,CI
      COMPLEX CI
      DIMENSION X(10),DX(10),PRMT(20)
C
C      PRINT 102,T,X(1),X(2),DX(1),DX(2),(PRMT(I),I=1,2)
  102 FORMAT(' IN OUTPUT',F8.2,4E12.4,5F7.2)
      IF(IHLF.EQ.12) RETURN
      IF(IHLF.GE.10) PRINT 101,IHLF,X(1),X(2),X(3)
  101 FORMAT(' IN OUTPUT, IHLF=',I3,' X=',10E11.3)
      IF(IHLF.GE.10) WRITE(3,101) IHLF,X(1),X(2),X(3)
      RETURN
      END
	SUBROUTINE EMCOPL(IPOL,COSTK,XK,E)
C	SOLVES COLD PLASMA DISPERSION EQUATION, NOT ELECTROSTATIC
C	IN STIX'S NOTATION ER IS R,EL IS L,EP IS P,EPERP IS S
C	EPSL IS A
C
      COMMON /PARAMS/ WPE,WCX,WCZ,EOM,XKY,XKZ,WF,C,CI
	COMPLEX CNU,D,DN,FN,BN,EPSL,EN2P
	COMPLEX EN2M,XKP,XKM,ERN,ELN,EPN
	COMPLEX ER,EL,EP,EPERP,EPERPN,LAMBDA,ZPL,SQL
	COMPLEX E(3),CI
 	REAL NU 
C
	DIMENSION WP(10),WC(10),NU(10),A(10),DENS(10),WP2(10)
	DATA NC /2/
	DATA NU /10*0./
	DATA A /1.,1.,8*1./
	DATA DENS /1.,1.,.05,7*1./
C	DATA WCYCL /.007/
	DATA TWOPI /6.28318531/
C	DATA FP /20.1E3/
C	DATA COSTK /1./
C	W,WC,WP2 ARE RATIO TO PLASMA FREQ. OF COMP. 1
C
	PRINT 703, COSTK,(A(N),N=2,NC)
 703	FORMAT(' COS THETA ='F7.4,3X,'ION AT.WTS.',10F5.1)
	PRINT 704,(DENS(N),N=2,NC)
 704	FORMAT(20X,'ION REL.DENS.',10F5.3)
C	PRINT 702
 702	FORMAT('0')
	WC2 = WCX**2 + WCZ**2
	WCYCL = SQRT(WC2)/WPE
 	A(1) = -1./1836.
	DO 11 N = 1,NC
	WP2(N) = DENS(N)/1836./ABS(A(N))
	WC(N) = WCYCL/1836./A(N)
 11	CONTINUE
	W = WF/WPE
	FHZ = WF/TWOPI
C     CALCULATE EPSILON 
      ER = 1. 
      EL = 1. 
      EP = 1. 
      EMAG = 1. 
      DO 10 N = 1,NC  
C     REPLACE M BY M*(1. - I*NU/W)
C      CNU = CMPLX(0.,NU(N))/FP/TWOPI
	CNU = 0.
      ER = ER - WP2(N)/W/(W-CNU+WC(N))
      EL = EL - WP2(N)/W/(W-CNU-WC(N))
      EP = EP - WP2(N)/W/(W-CNU)
      EMAG = AMAX1(EMAG,CABS(ER),CABS(EL),CABS(EP)) 
 10   CONTINUE
	ERN = ER/EMAG
	ELN = EL/EMAG
	EPN = EP/EMAG
      EPERPN = .5*(ERN + ELN)
      EPERP = .5*(ER + EL)
	DN = .5*(ERN - ELN)
	SINTK2 = 1. - COSTK**2
	SINTK = SQRT(AMAX1(SINTK2,0.))
	FN = CSQRT(((ERN*ELN-EPN*EPERPN)*SINTK2)**2
     1    + 4.*(EPN*DN*COSTK)**2)
	BN = ERN*ELN*SINTK2 + EPN*EPERPN*(1. + COSTK**2)
	EPSL = EPERP*SINTK2 + EP*COSTK**2
	EN2P = .5*EMAG**2*(BN + FN)/EPSL
	XKP = W*CSQRT(EN2P)
	EN2M = .5*EMAG*(BN - FN)/(EPSL/EMAG)
	XKM = W*CSQRT(EN2M)
	XK = XKP
	EN2 = EN2P
	IF(IPOL.EQ.2) XK = XKM
	IF(IPOL.EQ.2) EN2 = EN2M
	ENXZ = EN2*SINTK*COSTK
	E(3) = 1.
	IF(ENXZ.NE.0.) THEN
	  E(1) = (SINTK2*EN2 - EP)*E(3)/ENXZ
	ELSE
	  E(1) = 1.
	  E(3) = 0.
  	ENDIF
C
	D = .5*CI*(ER-EL)
	PRINT 700,WCZ,ER,EL,D,CI
	E(2) = -(ENXZ*E(3) + (EPERP - COSTK**2*EN2)*E(1))/D
	PRINT 700,FHZ,EP,EPERP,ER,EL,EMAG
C	PRINT 700,FHZ,EPN,EPERPN,ERN,ELN
	PRINT 700,FHZ,EN2P,XKP,EN2M,XKM
	PRINT 700, WCX,E
 1	CONTINUE
C     PRINT 100,W,X(1),EPSR,EPS0,EP 
  100 FORMAT(' COPLAS' 8E12.4)  
  700 FORMAT(' 'F12.4,4(E13.4,E12.4),E12.4)
      RETURN
      END 
      SUBROUTINE RKGS(PRMT,Y,DERY,NDIM,IHLF,FCT,OUTP,AUX)
C
C
      DIMENSION Y(1),DERY(1),A(4),B(4),C(4),PRMT(1),AUX(8,NDIM)
      DO 1 I=1,NDIM
    1 AUX(8,I)=.06666667*DERY(I)
      X=PRMT(1)
      XEND=PRMT(2)
      H=PRMT(3)
      PRMT(5)=0.
      CALL FCT(X,Y,DERY)
C
C     ERROR TEST
      IF(H*(XEND-X))38,37,2
C
C     PREPARATIONS FOR RUNGE-KUTTA METHOD
    2 A(1)=.5
      A(2)=.2928932
      A(3)=1.707107
      A(4)=.1666667
      B(1)=2.
      B(2)=1.
      B(3)=1.
      B(4)=2.
      C(1)=.5
      C(2)=.2928932
      C(3)=1.707107
      C(4)=.5
C
C     PREPARATIONS OF FIRST RUNGE-KUTTA STEP
      DO 3 I=1,NDIM
      AUX(1,I)=Y(I)
      AUX(2,I)=DERY(I)
      AUX(3,I)=0.
    3 AUX(6,I)=0.
      IREC=0
      H=H+H
      IHLF=-1
      ISTEP=0
      IEND=0
C
C
C     START OF A RUNGE-KUTTA STEP
    4 IF((X+H-XEND)*H)7,6,5
    5 H=XEND-X
    6 IEND=1
C
C     RECORDING OF INITIAL VALUES OF THIS STEP
    7 CALL OUTP(X,Y,DERY,IREC,NDIM,PRMT)
      IF(PRMT(5))40,8,40
    8 ITEST=0
    9 ISTEP=ISTEP+1
C
C
C     START OF INNERMOST RUNGE-KUTTA LOOP
      J=1
   10 AJ=A(J)
      BJ=B(J)
      CJ=C(J)
      DO 11 I=1,NDIM
      R1=H*DERY(I)
      R2=AJ*(R1-BJ*AUX(6,I))
      Y(I)=Y(I)+R2
      R2=R2+R2+R2
   11 AUX(6,I)=AUX(6,I)+R2-CJ*R1
      IF(J-4)12,15,15
   12 J=J+1
      IF(J-3)13,14,13
   13 X=X+.5*H
   14 CALL FCT(X,Y,DERY)
      GOTO 10
C     END OF INNERMOST RUNGE-KUTTA LOOP
C
C
C     TEST OF ACCURACY
   15 IF(ITEST)16,16,20
C
C     IN CASE ITEST=0 THERE IS NO POSSIBILITY FOR TESTING OF ACCURACY
   16 DO 17 I=1,NDIM
   17 AUX(4,I)=Y(I)
      ITEST=1
      ISTEP=ISTEP+ISTEP-2
   18 IHLF=IHLF+1
      X=X-H
      H=.5*H
      DO 19 I=1,NDIM
      Y(I)=AUX(1,I)
      DERY(I)=AUX(2,I)
   19 AUX(6,I)=AUX(3,I)
      GOTO 9
C
C     IN CASE ITEST=1 TESTING OF ACCURACY IS POSSIBLE
   20 IMOD=ISTEP/2
      IF(ISTEP-IMOD-IMOD)21,23,21
   21 CALL FCT(X,Y,DERY)
      DO 22 I=1,NDIM
      AUX(5,I)=Y(I)
   22 AUX(7,I)=DERY(I)
      GOTO 9
C
C     COMPUTATION OF TEST VALUE DELT
   23 DELT=0.
      DO 24 I=1,NDIM
   24 DELT=DELT+AUX(8,I)*ABS(AUX(4,I)-Y(I))
      IF(DELT-PRMT(4))28,28,25
C
C     ERROR IS TOO GREAT
   25 IF(IHLF-10)26,36,36
   26 DO 27 I=1,NDIM
   27 AUX(4,I)=AUX(5,I)
      ISTEP=ISTEP+ISTEP-4
      X=X-H
      IEND=0
      GOTO 18
C
C     RESULT VALUES ARE GOOD
   28 CALL FCT(X,Y,DERY)
      DO 29 I=1,NDIM
      AUX(1,I)=Y(I)
      AUX(2,I)=DERY(I)
      AUX(3,I)=AUX(6,I)
      Y(I)=AUX(5,I)
   29 DERY(I)=AUX(7,I)
      CALL OUTP(X-H,Y,DERY,IHLF,NDIM,PRMT)
      IF(PRMT(5))40,30,40
   30 DO 31 I=1,NDIM
      Y(I)=AUX(1,I)
   31 DERY(I)=AUX(2,I)
      IREC=IHLF
      IF(IEND)32,32,39
C
C     INCREMENT GETS DOUBLED
   32 IHLF=IHLF-1
      ISTEP=ISTEP/2
      H=H+H
      IF(IHLF)4,33,33
   33 IMOD=ISTEP/2
      IF(ISTEP-IMOD-IMOD)4,34,4
   34 IF(DELT-.02*PRMT(4))35,35,4
   35 IHLF=IHLF-1
      ISTEP=ISTEP/2
      H=H+H
      GOTO 4
C
C
C     RETURNS TO CALLING PROGRAM
   36 IHLF=11
      CALL FCT(X,Y,DERY)
      GOTO 39
   37 IHLF=12
      GOTO 39
   38 IHLF=13
   39 CALL OUTP(X,Y,DERY,IHLF,NDIM,PRMT)
   40 RETURN
      END
