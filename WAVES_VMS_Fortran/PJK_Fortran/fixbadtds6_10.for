	SUBROUTINE FIXBADTDS(IFXB,NDATA,VDATA,ITDSCHAN,SPS,ISPS)
C
C	ITDSCHAN (1-6) IS THE TDS_CHANNEL, ITEM = 'CHANNEL'
C	ISPS AND SPS ARE ITEMS 'RX_SPEED' AND 'RX_SPEED_R4'
C	THESE AND NDATA AND VDATA ARE PROVIDED BY SUBROUTINE TDS_PHYS, 
C		WHICH MUST BE CALLED FIRST.  NDATA ARE ITEM = 'DATA'
C		AND VDATA ARE THE DATA CONVERTED TO PREAMP OUTPUT
C		VOLTAGES, I.E. TDSCAL(ITDSCHAN,ISPS,NDATA)

C	IFXB IS THE VERSION NUMBER OF THIS FIXING PROGRAM
C
	COMMON /FIXUPBLK/ NBAD3,NBAD2,NBAD1
C	COMMON /TDS_STATUS/ ITDSCHAN,SPS,FILTER,IRX,ISPS
	COMMON /CHECK/FVDATA(2048)
C
C
	REAL 		VDATA(2050),FDATA(15),WT(15),WTS(2048)
	REAL		ZCROSS(2048),ZINT(2048)
	INTEGER*4	NDATA(2048),MPDATA(2050)
        DATA WT /15*1./
        DATA WTS /2048*1./
C
C	THIS SUBROUTINE LOOKS FOR CERTAIN VALUES IN A TDS EVENT OUTPUT
C	WHICH ARE KNOWN TO BE SUSPICIOUS, AND PUTS IN NEW VALUES BASED
C	ON FITTING A SINE WAVE THROUGH SOME ADJACENT VALUES.  THIS IS A 
C	TRY WHICH FIXES ONLY VALUES OF IWRONG1  (IWRONG1 = +-71 OR 81), 
C	AND SAMPLES FOLLOWING +-IWRONG2 = -58.  
C		IN THIS VERSION, IF THE SAMPLE FOLLOWING +-IWRONG2 HAS
C	A VALUE GE IWRONG1 = 71 OR 81, IT IS CONSIDERED OK
C	THE BAD VALUES ARE THOUGHT TO RESULT FROM TIMING IN THE A/D CIRCUIT, 
C	WHICH ALLOWS THE SIGNAL TO CHANGE AFTER A CHOICE HAS BEEN MADE AS TO 
C	SIGN, AND AS TO HIGH OR LOW GAIN.
C		THIS ONE, VERSION 5, (a) TRIES TO USE ONE CYCLE OF POINTS
C	(b) WANTS TO USE TWO POINTS BEYOND THE BAD ONE, BUT CAN USE
C	ONLY ONE, IF THE SECOND ONE IS ALSO BAD  (c) PUTS LESS WEIGHT
C	ON POINTS WHICH HAVE BEEN FIXED
C
	IFXB=6
C
	IF(ITDSCHAN.LE.2) THEN
	  IWRONG1 = 71
	  IWRONG2 = 58
	  VMAX1 = .275
	  VMIN1 = .045
	ELSE
	  IWRONG1 = 81
	  IWRONG2 = 58
	  VMAX1 = .618
	  VMIN1 = .106
	ENDIF
C
C	ESTIMATE FREQUENCY AND GENERAL SIZE OF MAXIMUM
C
	NBAD2 = 0			! THE NUMBER OF "58"'S FIXED
	NBAD1 = 0			! THE NUMBER OF IWRONG1' FIXED
	NBAD3 = 0			! THE NUMBER OF 2 BAD P' FIXED
	MAXDATA = 0			
	MINDATA = 256
	DO N = 1,2048
	  MPDATA(N) = NDATA(N)-128
	  IF(MPDATA(N).NE.IWRONG1) MAXDATA = MAX0(NDATA(N),MAXDATA)
	  IF(MPDATA(N).NE.-IWRONG1) MINDATA = MIN0(NDATA(N),MINDATA)
	ENDDO
	VMAX = TDSCAL(ITDSCHAN,ISPS,MAXDATA)
	VMIN = TDSCAL(ITDSCHAN,ISPS,MINDATA)
C***********VMAX1 AND VMIN1 ABOVE DID NOT WORK, SO:
	VMAX1 = VMAX
	VMIN1 = 0.	
C
C	VMAX1 = TDSCAL(ITDSCHAN,ISPS,81+128)
C	VMIN1 = TDSCAL(ITDSCHAN,ISPS,60+128)
C	PRINT*,'71 LIMITS',VMAX1,VMIN1
C	VMIN1 = TDSCAL(ITDSCHAN,ISPS,70+128)
C	VMAX1 = TDSCAL(ITDSCHAN,ISPS,91+128)
C	PRINT*,'81 LIMITS',VMAX1,VMIN1
C
C	FIND ZERO CROSSINGS, AND COUNT THEM TO ESTIMATE FREQUENCY
C
	IZCNT = 0
	IL = 1
	DO IL = 2,2047
	  IZ = IL
C		COUNT ONLY POS TO NEG
	  IF(MPDATA(IL).GT.0.AND.MPDATA(IL+1).LE.0) THEN
	        IZCNT = IZCNT+1
		S1 = MPDATA(IL)
		S2 = MPDATA(IL+1)
		DELZ = S1/(S1 - S2)
		IF(DELZ.GE.0.AND.DELZ.LE.1.) THEN
			ZCROSS(IZCNT) = IL + DELZ
		ELSE
			ZCROSS(IZCNT) = IL + .5
		ENDIF
	  ENDIF
	ENDDO
C
	STD = 0.
	DO N = 1,IZCNT-1
	  ZINT(N) = ZCROSS(N+1) - ZCROSS(N)
	  IF(ZINT(N).EQ.0.) ZINT(N) = 1.E-6
	  STD = STD + ZINT(N)**2              		 ! IN SAMPLES
	ENDDO
C
	AVRFREQ=0.
	RMS = 0.
	IF(IZCNT.GT.1) THEN
	  AVRPER = (ZCROSS(IZCNT)-ZCROSS(1))/(IZCNT-1)   ! IN SAMPLES
	  AVRFREQ = .001*SPS/AVRPER                      ! IN KHZ
	  RMS = SQRT(AMAX1(STD/(IZCNT-1) - AVRPER**2,0.))
	ENDIF
C
C	REMOVE MULTIPLE ZERO CROSSING FOR LOW FREQUENCIES
C
	IF(AVRPER.GT.20.) THEN
	  ZLIM = .2*RMS
	  IZCNTS = IZCNT
	  NNN = 2
	  DO N = 1,IZCNT-1
	    IF(ZINT(NNN).LT.ZLIM) THEN
	      IZCNTS = IZCNTS-1
	      ZINT(NNN-1) = ZINT(NNN-1) + ZINT(NNN)
	      DO NN = NNN,IZCNTS-1
		ZINT(NN) = ZINT(NN+1)
	      ENDDO
	    ELSE
	      NNN = NNN+1
	    ENDIF
	  ENDDO
C	  PRINT*,'NUMBER OF MULTIPLE CROSSINGS REMOVED',IZCNT-IZCNTS
	  IZCNT = IZCNTS
	  STD = 0.
	  AVR = 0.
	  DO N = 1,IZCNT-1
	    AVR = AVR + ZINT(N)
	    STD = STD + ZINT(N)**2              		 ! IN SAMPLES
	  ENDDO
	  IF(IZCNT.GT.1) THEN
	    AVRPER = AVR/(IZCNT-1)
	    RMS = SQRT(AMAX1(STD/(IZCNT-1) - AVRPER**2,0.))
c	    print*,'now average period is',avrper,' +-',rms,' in samples'
	  ENDIF 
	ENDIF
C
	IF(AVRPER.EQ.0.) RETURN
C
	NPERIOD = AVRPER + 1.
	NPERIOD = MIN0(NPERIOD,10)
	NPERIOD = MAX0(NPERIOD,5)
	NPNT = NPERIOD
C
C	NOW FIX BAD POINTS
C
	  N = NPERIOD-2

C
 100	CONTINUE
C
	DO I = 1,2048
	  WTS(I) = 1.
	ENDDO
C
C
C	FIX SAMPLES FOLLOWING VALUES OF +-58 = IWRONG2 
C
	  NPNT = NPERIOD
	  NEXT = N+1
C
	  IF(IABS(MPDATA(N)).EQ.IWRONG2) THEN
	      NFIX2 = N+2
	      NFIX = N+1
	      IF(NFIX.GT.2045) GO  TO 300
C		IF(NEXT MPDATA GT 71, IT'S OK, IF EQ 71, FIX NEXT PASS
	      IF(IABS(MPDATA(N+2)).EQ.IWRONG1) GO TO 200
	      IF(IABS(MPDATA(N+1)).GE.IWRONG1) GO TO 300
	      NFIX2 = N+3
     	      IF(IABS(MPDATA(N+3)).EQ.IWRONG1) GO TO 200
		WTS(NFIX) = .5
		DO NF = 1,NPNT
		  FDATA(NF) = VDATA(NFIX+2+NF-NPERIOD)
		  WT(NF)    =   WTS(NFIX+2+NF-NPERIOD)
		ENDDO
		NFIXF = NPERIOD-2
		WT(NFIXF)=0.
		CALL FIXUP(NFIX,NPNT,FDATA,WT,AVRPER,RMS)
		NBAD2 = NBAD2+1
		FIXED_V = AMIN1(FDATA(NFIXF),VMAX)
	        VDATA(NFIX) = AMAX1(FIXED_V,VMIN)
		NEXT = NFIX+2
	        GO TO 300
	  ENDIF
C
C	BAD VALUES WHICH ARE DUE TO THE CHOICE OF SMALL SIGNAL
C	A/DB CONVERTER WHEN IT SHOULD HAVE BEEN LARGE SIGNAL A/DB.  
C	THESE DEPEND ON CHANNEL.  THEY HAVE
C	THE VALUES +-71 IN CHANNELS 1 AND 2, +-81 IN CHANNELS 3-6
C
	  IF(IABS(MPDATA(N)).EQ.IWRONG1) THEN
	      NFIX = N
	      NFIX2 = N+2
	      IF(NFIX.GT.2046) GO  TO 300
	      IF(IABS(MPDATA(N+1)).EQ.IWRONG2.AND.
     1		IABS(MPDATA(N+2)).LT.IWRONG1) GO TO 210
	      DO NF = 1,NPERIOD
		  FDATA(NF) = VDATA(NFIX+2+NF-NPERIOD)
		  WT(NF)    =   WTS(NFIX+2+NF-NPERIOD)
	      ENDDO
	      NPNT = NPERIOD
	      NFIXF = NPERIOD-2
	      WT(NFIXF)=0.
	      CALL FIXUP(NFIX,NPNT,FDATA,WT,AVRPER,RMS)
	      NBAD1 = NBAD1+1
	      TEMP = VDATA(NFIX)
	      FIXED_V = AMIN1(ABS(FDATA(NFIXF)),VMAX1)
	      FIXED_V = AMAX1(FIXED_V,VMIN1)
	      VDATA(NFIX) = SIGN(FIXED_V,TEMP)
 	      NEXT = NFIX+2
	  ENDIF
	  GO TO 300
C
C	  ENTRIES FOR TWO BAD POINTS IN THE SET
C
 200	  CONTINUE
C
	  NBAD3 = NBAD3+1
C	  THIS IS THE ENTRY WHEN MPDATA(NFIX) FOLLOWS +-IWRONG2 = 58
C
C	  TEST THE NEXT POINT, i.e. ONE BEYOND THE PREVIOUS SET
C
	  NPNT = NPERIOD+1
	  NFIXF = NPERIOD-2
	  NFIXF2 = NFIXF + NFIX2-NFIX
	  NEXT = NFIX+3
	  IF(IABS(MPDATA(NFIX+3)).EQ.IWRONG1.OR.
     1		IABS(MPDATA(NFIX+2)).EQ.IWRONG2) THEN
C		the next point is bad and shouldn't be used, so
c		see if the last point of the set is OK
	    IF((NFIX2-NFIX).EQ.1) THEN
		NPNT = NPERIOD
	        NEXT = NFIX+2               ! last point is OK
	    ELSE
		NPNT = NPERIOD-1	    ! last point is not OK
	        NEXT = NFIX+1		    ! fit a shorter set
	  	GO TO 201
	    ENDIF
	  ENDIF
C
	  WTS(NFIX) = .5
	  WTS(NFIX2) = .5
	  DO NF = 1,NPNT
		  FDATA(NF) = VDATA(NFIX+2+NF-NPERIOD)
		  WT(NF)    =   WTS(NFIX+2+NF-NPERIOD)
	  ENDDO
	      NFIXF = NPERIOD-2
	      WT(NFIXF)=0.
	      NFIXF2 = NFIXF + NFIX2-NFIX
	      WT(NFIXF2)=0.
	      CALL FIXUP(NFIX,NPNT,FDATA,WT,AVRPER,RMS)
	      FIXED_V = AMIN1(FDATA(NFIXF),VMAX)
	      VDATA(NFIX) = AMAX1(FIXED_V,VMIN)
	      FIXED_V = AMIN1(FDATA(NFIXF2),VMAX)
	      VDATA(NFIX2) = AMAX1(FIXED_V,VMIN)
	    GO TO 300
 201	  CONTINUE
C	  PRINT*,'AT 201,NEXT POINT WAS BAD'
	  DO NF = 1,NPNT			! NPNT IS NPERIOD-1
		  FDATA(NF) = VDATA(NFIX+2+NF-NPERIOD)
		  WT(NF)    =   WTS(NFIX+2+NF-NPERIOD)
	  ENDDO
	    NFIXF = NPERIOD-2
	    WT(NFIXF)=0.
	    NFIXF2 = NFIXF + NFIX2-NFIX
	    WT(NFIXF2)=0.
	    X = 1./AVRPER
	    CALL SINFIT2(X,NPNT,FDATA,WT,SUMSQ)
	    FIXED_V = AMIN1(FDATA(NFIXF),VMAX)
	    VDATA(NFIX) = AMAX1(FIXED_V,VMIN)
	    FIXED_V = AMIN1(FDATA(NFIXF2),VMAX)
	    VDATA(NFIX2) = AMAX1(FIXED_V,VMIN)
	    NEXT = NFIX+1			! ??? TO BE CHECKED
	    GO TO 300
C
 210	  CONTINUE
C	  THIS IS THE ENTRY WHEN MPDATA(NFIX) IS +-71 OR 81
C		AND MPDATA(NFIX+1) IS -58
C	  TEST THE NEXT POINT
	  NBAD3 = NBAD3+1
	  NPNT = NPERIOD+1
	  IF(IABS(MPDATA(NFIX+3)).EQ.IWRONG1) GO TO 211
	  IF(MPDATA(NFIX+3).EQ.-IWRONG2) GO TO 211
	      WTS(NFIX) = .5
	      WTS(NFIX2) = .5
	      DO NF = 1,NPNT
		  FDATA(NF) = VDATA(NFIX+2+NF-NPERIOD)
		  WT(NF)    =   WTS(NFIX+2+NF-NPERIOD)
	      ENDDO
	      NFIXF = NPERIOD-2
	      WT(NFIXF)=0.
	      NFIXF2 = NPERIOD-2 + NFIX2-NFIX
	      WT(NFIXF2)=0.
	      CALL FIXUP(NFIX,NPNT,FDATA,WT,AVRPER,RMS)
	      TEMP = VDATA(NFIX)
	      FIXED_V = AMIN1(ABS(FDATA(NFIXF)),VMAX1)
	      FIXED_V = AMAX1(FIXED_V,VMIN1)
	      VDATA(NFIX) = SIGN(FIXED_V,TEMP)
	      FIXED_V  = AMIN1(FDATA(NFIXF2),VMAX)
	      VDATA(NFIX2) = AMAX1(FIXED_V,VMIN)
	      NEXT = NFIX+3
	    GO TO 300
C
 211	  CONTINUE
C	  PRINT*,'AT 211,NEXT POINT WAS BAD'
	  NPNT = NPERIOD-1
	  WTS(NFIX) = .5
	  WTS(NFIX2) = .5
	  DO NF = 1,NPNT
		  FDATA(NF) = VDATA(NFIX+2+NF-NPERIOD)
		  WT(NF)    =   WTS(NFIX+2+NF-NPERIOD)
	  ENDDO
	  NFIXF = NPERIOD-2
	  WT(NFIXF)=0.
	  NFIXF2 = NPERIOD-2 + NFIX2-NFIX
	  WT(NFIXF2)=0.
	  X = 1./AVRPER
	  CALL SINFIT2(X,NPNT,FDATA,WT,SUMSQ)
	  TEMP = VDATA(NFIX)
	  FIXED_V = AMIN1(ABS(FDATA(NFIXF)),VMAX1)
	  FIXED_V = AMAX1(FIXED_V,VMIN1)
	  VDATA(NFIX) = SIGN(FIXED_V,TEMP)		! sign of temp
	  FIXED_V  = AMIN1(FDATA(NFIXF2),VMAX)
	  VDATA(NFIX2) = AMAX1(FIXED_V,VMIN)
	  NEXT = NFIX+1
C	  GO TO 300
C
 300	  CONTINUE
C
	N = NEXT
	IF(N.LE.2046) GO TO 100
C	
C	TYPE*,'NUMBER FIXED, 71s, after 58s,2 BAD',NBAD1,NBAD2,NBAD3
C
C	SAVE FVDATA FOR FIXCHECK PLOT
C
	DO N = 1,2048
	  FVDATA(N) = VDATA(N)
	ENDDO
	RETURN
	END
	SUBROUTINE FIXUP(N,NPNT,FDATA,WT,AVRPER,RMS)
C
	EXTERNAL SINFIT2
	REAL X,DX,FDATA(15),WT(15)
C
	  X = .2
	  IF(AVRPER.NE.0.)  X = 1./AVRPER
	  DX = .1*X
	  SUMSQS = 1.E8
	  DO IT = 1,10
	    CALL HUNTMN4(X,DX,NPNT,FDATA,WT,SINFIT2,SUMSQ)  
	    X = ABS(X)
	    SUMSQS = SUMSQ
	    IF(SUMSQ.LT.1.E-9) GO TO 100
	  ENDDO
	  RETURN
 100	  CONTINUE
	  IF(X.NE.0.) AVRPER = .7*AVRPER + .3/X
	  RETURN
	END
       SUBROUTINE SINFIT2(X,NPNT,FDATA,WT,SUMSQ)
C
C	THIS ROUTINE FITS A SINE WAVE TO DATA.  X IS SUPPOSED TO
C	BE VARIED BY HUNTMN, WHILE Y(1) AND Y(2) ARE DETERMINED BY
C	LEAST SQUARES FIT IN CLOSED FORM.  
C
C	X IS FREQUENCY IN CYCLES PER SAMPLE  (A SMALL NUMBER)
C
C	Y(1) IS COEFF OF COSINE
C	Y(2) IS COEFF OF SINE
C
C	COMMON /FIXBLK/ MPDATA(2050),FDATA(5),FIXED_V
        DOUBLE PRECISION COS1,SIN1,COSN,SINN,SINNT,THT0
        REAL X,C(2,2),Y(2),ERR(15),WT(15),FDATA(15)
        DATA TWOPI /6.2831853/
C
	DO I = 1,2
	  Y(I)= 0.
	  DO J = 1,2
	    C(I,J) = 0.
	  ENDDO
	ENDDO
C
	THT0 = TWOPI*X
	COS1 = DCOS(THT0)
	SIN1 = DSIN(THT0)
	SINN = SIN1
	COSN = COS1
	DO N = 1,NPNT
	  Y(1) = Y(1) + WT(N)*FDATA(N)*COSN
	  Y(2) = Y(2) + WT(N)*FDATA(N)*SINN
	  C(1,1) = C(1,1) + WT(N)*COSN**2
	  C(1,2) = C(1,2) + WT(N)*COSN*SINN
	  C(2,2) = C(2,2) + WT(N)*SINN**2
C
	  SINNT = COSN*SIN1 + SINN*COS1
	  COSN = COS1*COSN - SIN1*SINN
	  SINN = SINNT
	ENDDO
	C(2,1) = C(1,2)
	CALL GAUSSJ(C,2,2,Y,1,1)
C
	SUMSQ = 0.
	SUMN = 1.E-8
	THT0 = TWOPI*X
	COS1 = DCOS(THT0)
	SIN1 = DSIN(THT0)
	SINN = SIN1
	COSN = COS1
	DO N = 1,NPNT
          ERR(N) =  FDATA(N) - Y(1)*COSN - Y(2)*SINN 
	  SUMSQ = SUMSQ + WT(N)*ERR(N)**2
	  SUMN = SUMN + WT(N)
	  SINNT = COSN*SIN1 + SINN*COS1
	  COSN = COS1*COSN - SIN1*SINN
	  SINN = SINNT
	ENDDO
	SUMSQ = SUMSQ/SUMN
	DO N = 1,NPNT
	  IF(WT(N).LT..1) THEN
	    ANGG = N*THT0
	    FDATA(N) = Y(1)*COS(ANGG) + Y(2)*SIN(ANGG)
	  ENDIF
	ENDDO
C
C	PRINT*,'SINFIT2 EXIT,X,ERR,FDATA,SUMSQ',X,ERR(3),FDATA(3),SUMSQ
       RETURN
       END
	SUBROUTINE HUNTMN4( X, DX, NPNT, FDATA, WT, FN, FF) 
C
C     THIS IS MODIFIED FOR WIND FROM MK V, APRIL 1988 
C
	REAL X, Y, DX, DXB, FDATA(15), WT(15)
	COMMON /HNTBLK/ NHUNT(25) 
	DATA NHUNT/25*1/
C
C
    	Y = X 
	   DXB = 0.  
	CALL FN(Y,NPNT,FDATA,WT,F0)  
	FM = F0 
	   IF(NHUNT(1).EQ.0) GO TO 2  
	   XB = X
	   Y = X + DX   
	   CALL FN(Y,NPNT,FDATA,WT, F1)
	   IF(F1.GE.FM) GO TO 4
	   FM = F1 
	   XB = Y
 4	   Y = X - DX   
	   CALL FN(Y,NPNT,FDATA,WT,F2) 
	   IF(F2.GE.FM) GO TO 8
	   FM = F2 
	   XB = Y
 8	   DEN = F1 + F2 - 2.*F0   
	   IF(DEN.EQ.0.) GO TO 2 
C	   DEN IS SECOND DERIV DIVIDED BY 2.*DX**2.  IF ITS NEGATIVE
C	   THEN THE EXTREMUM IS A MAXIMUM.  IN THAT CASE, GO ONE STEP
C	   BEYOND THE LOWEST POINT.
	   IF(DEN.GT.0.) THEN
	     DEX = -.5*(F1 - F2)/DEN  
	   ELSE
	     DEX = SIGN(2.,(F2-F1))
	   ENDIF
	   Y = X + DEX*DX
	   CALL FN(Y,NPNT,FDATA,WT,FF) 
	   IF(FF.LT.FM) GO TO 18 
C		NEW VALUE IS NOT BETTER
	   FF = FM 
	   Y = XB
	   IF((F1+F2).LT.3.*F0) GO TO 18
C		DX IS TOO BIG, ADJUST TO GIVE 50 % INCREASE IN F
	   DX = SQRT(ABS(F0/DEN))*DX
	   GO TO 19
 18	   CONTINUE
	   DX = .5*(ABS(DX) + ABS(X - Y))
 19	   DXB = Y - X
	   X = Y  
	   F0 = FF  
	   FM = FF 
 2	CONTINUE
C
	RETURN
C
C     ENTRY HERE MEANS THAT F1, F2, OR FF IS SMALLEST 
C
 34	IF(FF.LE.F1.AND.FF.LE.F2) RETURN
	DEX = 1.  
	IF(F2.LT.F1) DEX = -1. 
C	DO 35 I = 1,N  
	   Y = X + DEX*DXB
	   X = Y
C 35	CONTINUE
	FF = AMIN1(F1,F2) 
C
	RETURN
	END
