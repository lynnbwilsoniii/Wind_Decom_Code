	subroutine makefile(ch)
c
C	A PROGRAM TO SEARCH FOR ION ACOUSTIC WAVES IN TDSF. 
C	OF COURSE THERE ARE ONLY TWO COMPONENTS, BUT I
C	WANT TO DO STATISTICS ON APPARENT FREQUENCY AND AMPLITUDE
c
C	MODIFIED TO PRODUCE AN ESTIMATE OF CURRENT AT THE TIME OF THE
C		ION ACOUSTIC WAVES.  THE ESTIMATE IS DONE BY SR CURREST
C
C	TO EXCLUDE UPSTREAM WAVES, USE PERIODS WHEN WIND IS MORE THAN
C		100 RE UPSTREAM
C		1996 MAY 19 TO AUG 12   =   5252  to  5336
C		1997 JAN 12 TO JUL 4    =   5490  to  5663
C		1997 NOV 2  TO FEB 20   =   5784  to  
C
	integer*4 ch,ok,okt,OK1,OK2,SCETI4(2),N1DATA(2048),N2DATA(2048)
	INTEGER*4 W_CHANNEL_CLOSE,W_EVENT,RET_SIZE,W_MESSAGES_OFF
	INTEGER*4 W_ITEM_I4,W_ITEM_R4,W_ITEM_R8
	INTEGER*4 TDS_CHANNEL,ISRC,SUNCLOCK
	REAL*8 SCET8
	REAL DBSPEC1(1025),V1DATA(2048)
	REAL DBSPEC2(1025),V2DATA(2048)
	REAL ZCROSS(1024),Z1INT(1024),Z2INT(1024)
	REAL VMATRIX(2,2),EVAL(2),EVECT(2,2)
	REAL FREQ(1024),FCOUNT(2),FAVR(2),FSTD(2),F3MOM(2),FBW(2),SKEW(2)
	character*32 ITEM
	character*4 event
	DATA TWOPI /6.2831853/
	DATA YXRATIO /11.8/
C	ABOVE BASED ON LEFFX = 41.1, LEFFY = 3.79
	DATA PXTOT,PYTOT /0.,0./
	data event /'TDSF'/
C	data event /'FILL'/
C
	YXSQ = YXRATIO**2
	IFOUND = 0
 100	ok = w_event(ch,event)
C
C	CHECK FOR END OF RECORD
C
	if (ok.ne.1) then
		if(ok.eq.82) then
		   ok = w_channel_close(ch)
		   PRATIO = 0.
	 	   IF(PYTOT.NE.0.) PRATIO = PXTOT/PYTOT
		   WRITE(69,*) SCETI4(1),PXTOT,PYTOT,PRATIO
		   return
	        endif
		write(6,*) 'cannot open ',event, ', ok=', ok
	endif
C
C	END OF END OF RECORD CHECK
C
c	OKT = W_MESSAGES_OFF(ch)
C
C
	ITEM = 'CHANNEL'
	ok = W_ITEM_I4(ch, item, TDS_CHANNEL, 1, ret_size)
C	ITEM = 'CAL_PA'
C	ok = W_ITEM_I4(ch, item, ICAL, 1, ret_size)
C	IF(ICAL.NE.0) GO TO 100
C
	IPROS = 2
	IF(TDS_CHANNEL.EQ.1) THEN
C	  ITEM = 'DATA'
C	  ok1 = W_ITEM_I4(ch, item, N1DATA, 2048, ret_size)
	  CALL TDS_PHYS(CH,IPROS,N1DATA,V1DATA,DBSPEC1)
	  ITEM = 'EVENT_NUMBER'
	  ok = W_ITEM_I4(ch, item, NO_EVT1, 1, ret_size)
		MAXCH1 = 0
		DO N = 1,2048
		  MAXCH1 = MAX0(MAXCH1,IABS(N1DATA(N)-128)) 
		ENDDO
	  GO TO 100
	ELSEIF(TDS_CHANNEL.EQ.2) THEN
C	  ITEM = 'DATA'
C	  ok2 = W_ITEM_I4(ch, item, N2DATA, 2048, ret_size)
	  CALL TDS_PHYS(CH,IPROS,N2DATA,V2DATA,DBSPEC2)
	  ITEM = 'EVENT_NUMBER'
	  ok = W_ITEM_I4(ch, item, NO_EVT, 1, ret_size)
	  IF(NO_EVT.NE.NO_EVT1) GO TO 100
	ELSE
	  GO TO 100
	ENDIF
C
CDIAG	PRINT*,'******START EVENT',NO_EVT1,NO_EVT,' *****'
C
C	MOST OF THE EVENTS ARE BLOBS.  TO ELIMINATE THEM:
C	BLOBS START NEAR THE MIDDLE, AND MOSTLY OCCUPY THE
C	SECOND HALF OF AN EVENT.  SO REQUIRE THAT THE MAXIMUM
C	INTERVAL BETWEEN ZEROS IN THE SECOND HALF NOT BE 
C	MORE THAN ?? TIMES THE AVERAGE INTERVAL IN THE FIRST
C	HALF
C
C	THERE ARE ALSO SPIKES.  TO ELIMINATE THEM, CALCULATE THE
C	NUMBER OF POINTS WHICH ARE LARGER THAN HALF THE PEAK.
C
	IF(TDS_CHANNEL.EQ.1) GO TO 100		! GO GET CHANNEL 2
C
	XMAX = 0.
	YMAX = 0.
	XMIN = 0.
	YMIN = 0.
	DO N = 1,2048
	  XMAX = AMAX1(XMAX,V1DATA(N))
	  YMAX = AMAX1(YMAX,V2DATA(N))
	  XMIN = AMIN1(XMIN,V1DATA(N))
	  YMIN = AMIN1(YMIN,V2DATA(N))
	ENDDO
	CRIT = .5
C****
	XMAX = AMAX1(XMAX,-XMIN)
	YMAX = AMAX1(YMAX,-YMIN)
C****
	XMAX = CRIT*XMAX
	YMAX = CRIT*YMAX
	XCOUNT = 0.
	YCOUNT = 0.
	DO N = 1,2048
	  IF(ABS(V1DATA(N)).GT.XMAX) XCOUNT = XCOUNT + 1.
	  IF(ABS(V2DATA(N)).GT.YMAX) YCOUNT = YCOUNT + 1.
	ENDDO
C
	DO N = 1,2048
	  N1DATA(N) = N1DATA(N) - 128
	  N2DATA(N) = N2DATA(N) - 128
	ENDDO
C
C	FIND ZERO CROSSINGS
C
	IZCNT = 1
	ZCROSS(IZCNT) = 0.
	IL = 1
	IZ = IL
C	  IF(N1DATA(IL).EQ.0) PRINT*,'ZERO DATA',IL,N1DATA(IL),N1DATA(IL+1)
C
C	FIRST HALF OF CHANNEL 1
C
	DO IL = 1,1023
C
C	    IF(N1DATA(IL).EQ.0) PRINT*,'ZERO DATA',IL,N1DATA(IL-1),
C     1     N1DATA(IL),N1DATA(IL+1)
C
C		COUNT ONLY POS TO NEG
C
	    IF(N1DATA(IL).GT.0.AND.N1DATA(IL+1).LE.0) THEN
	        IZCNT = IZCNT+1
		S1 = N1DATA(IL)
		S2 = N1DATA(IL+1)
		IF(S1-S2.NE.0.) THEN
	  	   ZCROSS(IZCNT) = IL + S1/(S1-S2)
	  	ELSE
		   ZCROSS(IZCNT) = IL 
		ENDIF	
	    ENDIF
	ENDDO
C
	ZCNT1 = IZCNT
C
	AVR1_1ST_HALF = 1023./ZCNT1
	NZCNT1 = IZCNT
C
	Z1MAX = 0.
	DO N = 1,IZCNT-1
	  Z1INT(N) = ZCROSS(N+1) - ZCROSS(N)
	  Z1MAX = AMAX1(Z1INT(N),Z1MAX)
C	  IF(Z1INT(N).EQ.0.) PRINT*,'ZINT=0 AT ',N
	  IF(Z1INT(N).EQ.0.) Z1INT(N) = 1.E-6
	ENDDO
C
C	SECOND HALF OF CHANNEL 1
C
	DO IL = 1024,2047
C
C		COUNT ONLY POS TO NEG
C
	    IF(N1DATA(IL).GT.0.AND.N1DATA(IL+1).LE.0) THEN
	        IZCNT = IZCNT+1
		S1 = N1DATA(IL)
		S2 = N1DATA(IL+1)
		IF(S1-S2.NE.0.) THEN
	  	   ZCROSS(IZCNT) = IL + S1/(S1-S2)
	  	ELSE
		   ZCROSS(IZCNT) = IL 
		ENDIF	
	    ENDIF
	ENDDO
	IZCNT = IZCNT + 1
	ZCROSS(IZCNT) = 2048.
C
	AVR1_2ND_HALF = 1023./(IZCNT-NZCNT1)
C
	Z1MAX = 0.
	DO N = NZCNT1,IZCNT-1
	  Z1INT(N) = ZCROSS(N+1) - ZCROSS(N)
	  if(z1int(n).gt.z1max) then
	     z1max = z1int(n)
	     nnmax = n
	  endif
C	  IF(Z1INT(N).EQ.0.) PRINT*,'ZINT=0 AT ',N
	  IF(Z1INT(N).EQ.0.) Z1INT(N) = 1.E-6
	ENDDO
CDIAG	print*,'max int ch 1',z1max,' at',zcross(nnmax),zcross(nnmax+1)
C
C	NOW AVR1_1ST_HALF IS THE AVERAGE INTERVAL, IN NUMBER OF SAMPLES
C	IN THE FIRST HALF OF THE EVENT, AND Z1MAX IS THE MAXIMUM
C	INTERVAL IN THE SECOND HALF.  Z1MAX IS EXPECTED TO BE LARGE
C	FOR BLOBS
C
CDAIG	print*,'zero crossings, ch 1,AVR1_1ST_HALF,Z1MAX',NO_EVT,izcnt,
CDIAG     1		AVR1_1ST_HALF,Z1MAX
	IF(Z1MAX.GT.5.*AVR1_1ST_HALF.AND.Z1MAX.GT.220.) THEN
	  PRINT*,NO_EVT,'  CH 1 BLOB',AVR1_1ST_HALF,Z1MAX
	  ITEM = 'SUN_ANGLE'
	  ok = W_ITEM_I4(ch, item, SUNCLOCK, 1, ret_size)
C	  write(51,*) no_evt,avr1_1st_half,z1max,sunclock
	  IFOUND = 0
	  GO TO 100
	ENDIF
C
	ZCNT1 = IZCNT

C
C	FIRST HALF OF CHANNEL 2
C
	IZCNT = 1
	ZCROSS(IZCNT) = 1.
C
	DO IL = 1,1023
C
C		COUNT ONLY POS TO NEG
C
	  IF(N2DATA(IL).GT.0.AND.N2DATA(IL+1).LE.0) THEN
	        IZCNT = IZCNT+1
		S1 = N2DATA(IL)
		S2 = N2DATA(IL+1)
		IF(S1-S2.NE.0.) THEN
	  	   ZCROSS(IZCNT) = IL + S1/(S1-S2)
	  	ELSE
		   ZCROSS(IZCNT) = IL 
		ENDIF	
	  ENDIF
	ENDDO
C
	AVR2_1ST_HALF = 1023./IZCNT
	NZCNT2 = IZCNT
C
C	SECOND HALF OF CHANNEL 2
C
	DO IL = 1025,2047
C
C		COUNT ONLY POS TO NEG
C
	  IF(N2DATA(IL).GT.0.AND.N2DATA(IL+1).LE.0) THEN
	        IZCNT = IZCNT+1
		S1 = N2DATA(IL)
		S2 = N2DATA(IL+1)
		IF(S1-S2.NE.0.) THEN
	  	   ZCROSS(IZCNT) = IL + S1/(S1-S2)
	  	ELSE
		   ZCROSS(IZCNT) = IL 
		ENDIF	
	  ENDIF
	ENDDO
	IZCNT = IZCNT + 1
	ZCROSS(IZCNT) = 2048.
C
	Z2MAX = 0.
	DO N = NZCNT2,IZCNT-1
	  Z2INT(N) = ZCROSS(N+1) - ZCROSS(N)
c	  Z2MAX = AMAX1(Z2INT(N),Z2MAX)
	  if(z2int(n).gt.z2max) then
	     z2max = z2int(n)
	     nnmax = n
	  endif
	  IF(Z2INT(N).EQ.0.) PRINT*,'ZINT=0 AT ',N
	  IF(Z2INT(N).EQ.0.) Z2INT(N) = 1.E-6
	ENDDO
C	print*,'max int ch 2',z2max,' at',zcross(nnmax),zcross(nnmax+1)
CDIAG	print*,'zero crossings, ch 2,AVR2_1ST_HALF,Z2MAX',NO_EVT,izcnt,
CDIAG     1		AVR2_1ST_HALF,Z2MAX
	IF(Z2MAX.GT.5.*AVR2_1ST_HALF.AND.Z2MAX.GT.220.) THEN
	  PRINT*,NO_EVT,' CH 2 BLOB',AVR2_1ST_HALF,Z2MAX
	  ITEM = 'SUN_ANGLE'
	  ok = W_ITEM_I4(ch, item, SUNCLOCK, 1, ret_size)
C	  write(52,*) no_evt,avr2_1st_half,z2max,sunclock
	  IFOUND = 0
	  GO TO 100
	ENDIF
C
	ZCNT2 = IZCNT
C
C	I FOUND THAT THERE ARE BLOBS AT RANDOM IN CHANNEL 2, PRESUMABLE
C	BECAUSE THE TRIGGER, FROM CHANNEL 1, SOMETIMES CATCHES
C	ONE AT RANDOM.  SO TEST FOR THESE
C
	AVR2_ALL = 2047./IZCNT
	Z3MAX = 0.
	DO N = 1,IZCNT-1
	  Z2INT(N) = ZCROSS(N+1) - ZCROSS(N)
	  if(z2int(n).gt.z3max) then
	     z3max = z2int(n)
	     nnmax = n
	  endif
	ENDDO
c	PRINT*,'TEST 3',NO_EVT,AVR2_ALL,Z3MAX,NNMAX
C
	IF(Z3MAX.GT.5.*AVR2_ALL.OR.Z3MAX.GT.220.) THEN
	  PRINT*,NO_EVT,' CH 2 RANDOM BLOB',AVR2_1ST_HALF,Z3MAX
	  ITEM = 'SUN_ANGLE'
	  ok = W_ITEM_I4(ch, item, SUNCLOCK, 1, ret_size)
	  write(53,*) no_evt,avr2_all,z3max,sunclock,nnmax
	  IFOUND = 0
	  GO TO 100
	ENDIF
C
	ITEM = 'SOURCE'
	ok = W_ITEM_I4(ch, item, ISRC, 1, ret_size)
	ITEM = 'EVENT_NUMBER'
	ok = W_ITEM_I4(ch, item, NO_EVT, 1, ret_size)
	ITEM = 'EVENT_SCET'
	ok = W_ITEM_I4(ch, item, SCETI4, 2, ret_size)
	ITEM = 'EVENT_CENTER_SCET_R8'
	ok = W_ITEM_R8(ch, item, SCET8, 1, ret_size)
	ITEM = 'FAST_RX_SPEED_R4'
	ok = W_ITEM_R4(ch, item, SPS, 1, ret_size)
	ITEM = 'WIND_MFI_BPHI(GSE)_R4'
	ok = W_ITEM_R4(ch, item, AZMAG, 1, ret_size)
	ITEM = 'MAG_ELEVATION'
	ok = W_ITEM_I4(ch, item, MAGEL, 1, ret_size)
	ITEM = 'SUN_ANGLE'
	ok = W_ITEM_I4(ch, item, SUNCLOCK, 1, ret_size)
	ITEM = 'WIND_3DP_E_TEMP_R4'
	ok = W_ITEM_R4(ch, item, TEMPE, 1, ret_size)
	ITEM = 'WIND_3DP_ION_TEMP_R4'
	ok = W_ITEM_R4(ch, item, TEMPI, 1, ret_size)
	ITEM = 'WIND_3DP_ION_DENSITY_R4'
	ok = W_ITEM_R4(ch, item, DENS, 1, ret_size)
	ITEM = 'WIND_3DP_ION_VX(GSE)_R4'
	ok = W_ITEM_R4(ch, item, VX, 1, ret_size)
	ITEM = 'WIND_3DP_ION_VY(GSE)_R4'
	ok = W_ITEM_R4(ch, item, VY, 1, ret_size)
	ITEM = 'WIND_MFI_BMAG_R4'
	ok = W_ITEM_R4(ch, item, BMAG, 1, ret_size)
	ITEM = 'WIND_SPIN_RATE_R4'
	ok = W_ITEM_R4(ch, item, SPINRATE, 1, ret_size)
	if(ok.ne.1) then
	  spinrate = 2.
	endif
	CALL CURREST(CH,SCET8,SCETI4,CURR)
C
C	CALCULATE FREQUENCIES FOR SPECTRUM
C
	DO N = 1,1024
	  FREQ(N) = (N-1)*SPS/2048.    ! FREQ(N) GOES WITH DBSPECT(N)
	ENDDO
C
C	CALCULATE BANDWIDTH, ETC.
C
	FLLIM = 4
	FUPLIM = 205			! 12 KHZ AT 120 KSPS
	PRINT*,'DO FREQS',FREQ(FLLIM),FREQ(FUPLIM)
	DO NC = 1,2
	  FCOUNT(NC) = 1.E-20
	  FAVR(NC) = 0.
	  FSTD(NC) = 0.
	  F3MOM(NC) = 0.
	  DO N = FLLIM,FUPLIM
	    IF(NC.EQ.1) THEN
		VLT = 10.**(.1*DBSPEC1(N))
	    ELSE
		VLT = 10.**(.1*DBSPEC2(N))
	    ENDIF
	    FCOUNT(NC) = FCOUNT(NC) + VLT
	    FAVR(NC) = FAVR(NC) + VLT*FREQ(N)
	    FSTD(NC) = FSTD(NC) + VLT*FREQ(N)**2
	    F3MOM(NC) = F3MOM(NC) + VLT*FREQ(N)**3
	  ENDDO
	  FAVR(NC) = FAVR(NC)/FCOUNT(NC)
	  FSTD(NC) = FSTD(NC)/FCOUNT(NC) - FAVR(NC)**2
	  FBW(NC) = SQRT(AMAX1(FSTD(NC),0.))
	  SKEW(NC) = F3MOM(NC)/FCOUNT(NC) - 3.*FAVR(NC)*FSTD(NC)
     1		 - FAVR(NC)**3
	ENDDO
C
	AVRPER = 1.E-6
	IF(ZCNT2.NE.0.) AVRPER = 2048./SPS/ZCNT2
	FREQKHZ = .001/AVRPER
C
	WRITE(56,1111) SCETI4(1),NO_EVT,FREQKHZ,FAVR(1),FAVR(2),FBW(1)
     1	  ,FBW(2),SKEW(1),SKEW(2)
 1111	FORMAT(I10,I10,F7.3,2F8.0,2E11.3,2E11.3)
C****
C	WRITE(37,1037), NO_EVT,XMAX,YMAX,XCOUNT,YCOUNT
C	WRITE(37,1037), NO_EVT,XMAX/CRIT,YMAX/CRIT,XCOUNT,YCOUNT
C 1037	FORMAT(I10,2F8.4,2F7.1)
C**** 
	ANGLE =  -360.*SUNCLOCK/4096. - 45.       ! ANGLE SUN TO +EX AT END
	DANG = SPINRATE*360./SPS/TWOPI		  ! CHANGE PER SAMPLE
	THANT = ANGLE + 1024.*DANG + 360.	  ! ANGLE SUN TO +EX AT MIDDLE
C
	VMATRIX(1,1) = 0.
	VMATRIX(1,2) = 0.
	VMATRIX(2,2) = 0.
	DO N = 1,2048
	  VMATRIX(1,1) = VMATRIX(1,1) + V1DATA(N)**2 
	  VMATRIX(1,2) = VMATRIX(1,2) + V1DATA(N)*V2DATA(N)
	  VMATRIX(2,2) = VMATRIX(2,2) + V2DATA(N)**2 
	ENDDO
	PX = VMATRIX(1,1)/2048.
	PY = VMATRIX(2,2)/2048.
C
	FP = 9.*SQRT(DENS)			  ! PLASMA FREQ IN KHZ
	FCE = .028*BMAG
	BETA = .402*(TEMPE+TEMPI)/BMAG**2
C
	IF(FREQKHZ.GT.10.) THEN
	  PRINT*,'EVENT NO.',NO_EVT,' FREQ TOO BIG', FREQKHZ,' PWR',
     1		PX + YXSQ*PY
	  IFOUND = 0
c		to exclude cals
	  if(sceti4(2).lt.010000.or.sceti4(2).gt.011000) then
	    if(maxch1.lt.127) then
	      write(54,*) no_evt,freqkhz,px,py,px+yxsq*py
	    endif
	  endif
	  GO TO 100
	ENDIF
	IF(Z1MAX.GT.2.*Z2MAX) THEN
	  PRINT*,'EVENT NO.',NO_EVT,' A BIG GAP',Z1MAX,Z2MAX
	  ITEM = 'SUN_ANGLE'
	  ok = W_ITEM_I4(ch, item, SUNCLOCK, 1, ret_size)
	  write(55,*) no_evt,sunclock,z1max,z2max
	  IFOUND = 0
	  GO TO 100
	ENDIF
c	the following test eliminated a good event, 14583199 19960527
c	IF(ZCNT1.LT..7*ZCNT2) THEN
c	  PRINT*,'EVENT NO.',NO_EVT,' NOT ENOUGH ZERO CROSSING IN CH 1'
c	  IFOUND = 0
c	  GO TO 100
c	ENDIF
C
C	EVALUATE MINIMUM VARIANCE STUFF USING FACT THAT TRACE
C		AND DETERMINANT ARE UNCHANGED BY ROTATIONS.
C		THIS IS ENOUGH FOR A 2 X 2 MATRIX
C
	DET = VMATRIX(1,1)*VMATRIX(2,2) - VMATRIX(1,2)**2
	TRACE = VMATRIX(1,1) + VMATRIX(2,2)
	DISC = SQRT(TRACE**2 - 4.*DET)
	EVAL(1) = .5*(TRACE + DISC)
	EVAL(2) = .5*(TRACE - DISC)
C	AX MAJOR AND AX MINOR ARE SLOPES OF MAJOR AND MINOR AXES OF
C		VY PLOTTED AGAINS VX, BUT SLOPE IS MAJOR AXIS OF
C		EY PLOTTED AGAINST EX, AND GIVES DIRECTION.
	AXMAJOR = (EVAL(1)-VMATRIX(1,1))/VMATRIX(1,2)
	AXMINOR = (EVAL(2)-VMATRIX(1,1))/VMATRIX(1,2)
	SLOPE = YXRATIO*AXMAJOR
	GSEANG = THANT - ATAND(SLOPE)
	ANGTOB = GSEANG - AZMAG
	IF(ANGTOB.GT.90.) ANGTOB = ANGTOB - 180.
	IF(ANGTOB.GT.90.) ANGTOB = ANGTOB - 180.
	IF(ANGTOB.LT.-90.) ANGTOB = ANGTOB + 180.
	IF(ANGTOB.LT.-90.) ANGTOB = ANGTOB + 180.
C
C*****	CHECKING
	PRINT*,'VMATRIX',VMATRIX(1,1),VMATRIX(1,2),VMATRIX(2,2)
	PRINT*,'EVALS,AXS,PX,PY',EVAL(1),EVAL(2),AXMAJOR,AXMINOR,
     1		PX,PY
C*****
C
C	PLASMA PARAMETERS, ETC.

C	   write(s,'(i8.8,i6.6)',iostat=ios) s_scet(1), s_scet(2)
C	   s_scet = s(1:4)//'/'//s(5:6)//'/'//s(7:8)//' '//
C	1	s(9:10)//':'//s(11:12)//':'//s(13:14)
C
c	print date, time, event no., freq, Px, Py, Vy/Vx, angles of
c		antenna,B, phiB, mag B or fce, fp
c
	WT = PX + YXSQ*PY
	PXTOT = PXTOT + PX/WT
	PYTOT = PYTOT + PY/WT
	XYRATIO = PXTOT/PYTOT
	PRINT*, 'PXTOT,PYTOT,RATIO',PXTOT,PYTOT,XYRATIO
C
	  WRITE(90,1011) sceti4,NO_EVT,FREQKHZ,PX,PY,SLOPE,ANGTOB,
     1	     AZMAG,MAGEL,FP,FCE,BETA,XCOUNT,YCOUNT
 1011	format(I10,I7,I10,F7.2,2E10.3,F8.3,2F7.1,I5,F7.3,F7.4,F8.4,2F7.0)
C
	IF(OK.NE.82) GO TO 100
	return
	end
	SUBROUTINE CURREST(CH,SCET,SCETI4,CURR)
C
C	RETURNS AN ESTIMATE OF THE CURRENT AT TIME SCET
C
	INTEGER*4 CH,YYYY,HR
	INTEGER*4 SCETI4(2),YMDSV
	CHARACTER*40 MAGFILE,JUNK
	REAL*8 SCET,SCETT,SCETEST
	DATA IOPEN /0/
	DATA YMDSV /-1/
C
	IF(SCETI4(1).NE.YMDSV) IOPEN = 0
	IF(IOPEN.EQ.0) THEN
	  WRITE(MAGFILE,101) SCETI4(1)
 101	  FORMAT('DATA_A:[KELLOGG]WI_MFI_',I8.8,'.DAT')
	  OPEN(UNIT=43,FILE=MAGFILE,STATUS='OLD',READONLY)
	  READ(43,102) JUNK
	  READ(43,102) JUNK
	  READ(43,102) JUNK
 102	  FORMAT(A)
	  IOPEN = 1
	  YMDSV = SCETI4(1)
	ENDIF
	SCETEST = 8.6400D04*DMOD(SCET,1.D00)
	print*,'scetest',scetest
	READ(43,1077,ERR=100,END=300) MDAY,MO,YYYY,HR,MIN,SEC,BXS,BYS,BZS
C
C	FIND APPROPRIATE TIME
C
 100	CONTINUE	
	READ(43,1077,ERR=100,END=300) MDAY,MO,YYYY,HR,MIN,SEC,BXT,BYT,BZT
 1077	FORMAT(I2,1X,I2,1X,I4,I3,1X,I2,1X,F6.3,4G17.5)
	SCETT = 3600.D00*HR + 60.D00*MIN + SEC
	IF(SCETT.GT.SCETEST) THEN
	  GO TO 200
	ENDIF
	BXS = BXT
	BYS = BYT
	BZS = BZT
	GO TO 100
C
C	CALCULATE ESTIMATE OF CURRENT
C
 200	CONTINUE
	CURR = SQRT((BXT-BXS)**2 + (BYT-BYS)**2 + (BZT-BZS)**2)
	print*,'est',YYYY,hr,min,sec,curr
 300	CONTINUE
	RETURN
C	call w_ur8_to_ymd(scetfill,yyyy,mon,dd,hh,mm,ss,ms)
C	call w_ur8_to_ydoy(scetfill,yyyy,doy,msday)
	END
