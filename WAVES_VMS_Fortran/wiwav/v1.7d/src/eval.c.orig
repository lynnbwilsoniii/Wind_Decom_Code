/* eval.c - dual stack arithmetic expression evaluator
*/


#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define SUB_CHAR '$'
extern int w_really_get_item();

struct arg_blk {
   char *event;
   char *item;
   int ch;
};

#define OK 1
#define ERR 0
#define YES 1
#define NO 0

/* categories (parens are also operators) */
#define LPAREN         0x10		/* ( left parenthesis */
#define RPAREN         0x11		/* ) right parenthesis */
#define NUMBER         0x12		/* numeric constant */
#define VARIABLE       0x13		/* symbolic name */
#define UNARY_OP       0x14		/* a category */
#define BINARY_OP      0x15		/* a category */

/* types:  operators are arranged by relative priority such that higher values
   have higher priority
*/
#define PRIORITY_MASK  0xF0
#define NOTHING        0x00		/* null, empty slot */
#define EQ_OP          0x31		/* EQ */
#define GE_OP          0x32		/* GE */
#define GT_OP          0x33		/* GT */
#define LE_OP          0x34		/* LE */
#define LT_OP          0x35		/* LT */
#define NE_OP          0x36		/* NE */
#define AND_OP         0x37		/* AND */
#define OR_OP          0x38		/* OR */
#define PLUS           0x50		/* + addition */
#define MINUS          0x51		/* - subtraction */
#define MULTIPLY       0x60		/* * multiplication */
#define DIVIDE         0x61		/* / division */
#define MODULO         0x62		/* % modulo */
#define UNARY_PLUS     0x80		/* unary + */
#define UNARY_MINUS    0x81		/* unary - */
#define EXPONENT       0x90 		/* exponentiation ^ */

/* same as INT_RETURN, FLOAT_RETURN, and DOUBLE_RETURN in item.h */
#define I4_TYPE        0x1000		/* int */
#define R4_TYPE        0x2000		/* float */
#define R8_TYPE        0x4000		/* double */

static int (*my_msg)();
static char msg[256];

/* Multi-Data Types */
struct mdt {
   union {
      int i4;
      int ai4[2];
      unsigned int ui4;
      float r4;
      double r8;
      char *pc;
   } u;
};

struct token {
   struct mdt v;
   int category;
   int type;
   char *name;
   union {
      int len;
      int priority;
   } u;
};

/* array based list structure and macros */
#define MAX_TOKENS_IN_LIST 128
#define LAST_LIST_INDX MAX_TOKENS_IN_LIST - 1
struct token_list {
   int i; /* index of current element */
   int n; /* number of elements in list */
   struct token t[MAX_TOKENS_IN_LIST];
};

/* initialize the list */
#define LIST_INIT(pl) pl->n = 0; pl->i = -1;

/* get pointer to next available list position (for building list) */
#define LIST_INC(pl,pt,ok) ok = pl->n < MAX_TOKENS_IN_LIST ? YES : NO;\
   if (ok == YES) {++pl->n; ++pl->i; pt = &(pl->t[pl->i]);}

/* decrement list pointer (for building list) */
#define LIST_DEC(pl,pt,ok) ok = pl->n > 0 ? YES : NO;\
   if (ok == YES) {--pl->n; --pl->i; pt = &(pl->t[pl->i]);}

/* non-destructive reset pointer to top of list (for traversing) */
#define LIST_TOP(pl,pt,ok) ok = pl-> n > 0 ? YES : NO;\
   pl->i = 0; pt = &(pl->t[pl->i]);

/* get pointer to next list position (for traversing) */
#define LIST_NEXT(pl,pt,ok) ok = pl->i < pl->n - 1 ? YES : NO;\
   if (ok == YES) {pt = &(pl->t[++pl->i]); }

#define LIST_SIZE(pl) pl->n

#define LIST_SHOW(pl,i) for(i=0; i < pl->n; i++) \
      printf("%d. category=%Xx, type=%Xx, i4=%d r8=%lf\n", \
      i, pl->t[i].category, pl->t[i].type, pl->t[i].v.u.i4, pl->t[i].v.u.r8);


/* array based queue structure and macros */
/* ...decided to use a list class instead...jk...these don't work... */
#define MAX_TOKENS_IN_QUE 128
#define LAST_QUE_INDX MAX_TOKENS_IN_QUE - 1
struct token_que {
   int head;
   int tail;
   int n;
   struct token t[MAX_TOKENS_IN_QUE];
};
/* get pointer to next available que position */
#define QUE_NEXT(pq,pt,ok) ok = pq->n > 0 && pq->idx < pq->n ? YES : NO;\
if (ok==YES) {pt = &(pq->t[pq->idx++]);}
#define QUE_INIT(pq) pq->n = 0; pq->head=-1; pq->tail=-1;
#define DEQUE(pq,pt,ok) ok = pq->n > 0 && pq->idx < pq->n ? YES : NO;\
if (ok==YES) {pt = &(pq->t[pq->idx++]);}
#define ENQUE(pq,pt,ok) ok = pq->n < MAX_TOKENS_IN_QUE ? YES : NO;\
if (ok==YES) {pq->t[pq->n++] = *pt;}
#define QUE_IS_EMPTY(pq,empt) empt = pq->n == 0 || pq->idx >= pq->n ? YES : NO;
#define QUE_COUNT(pq,val) val = pq->n;
#define SHOW_QUE(pq,i) for(i=0; i < pq->n; i++) \
      printf("%d. category=%Xx, type=%Xx, val=%d.\n", \
      i, pq[i].t.category, pq[i].t.type, pq[i].t.v.u.i4);
#define QUE_PEEK(pq,pt) pt = &(pq->t[pq->n]);

/* stack structure and macros */
#define MAX_TOKENS_IN_STACK 128
struct token_stack {
   int idx;
   struct token *t[MAX_TOKENS_IN_STACK];
};
#define STACK_INIT(stk) stk.idx = -1;
#define STACK_POP(stk,pt,err) if (stk.idx < 0) goto err;\
pt = stk.t[stk.idx--];
#define STACK_PUSH(stk, pt, err) if (stk.idx >= MAX_TOKENS_IN_STACK) goto err;\
stk.t[++stk.idx] = pt;
#define STACK_TOP(stk,pt,err) if (stk.idx < 0) goto err;\
pt = stk.t[stk.idx];
#define STACK_IS_EMPTY(stk,val) val = stk.idx < 0 ? YES : NO;

#define IS_DIGIT(c) c >= '0' && c <= '9'
#define IS_ALPHA(c) ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))

static int parse_and_tokenize(e, pl)
   char *e;               /* expression */
   struct token_list *pl; /* list of tokens */
{
   char *rn="parse_and_tokenize";
   int ok;
   int i,j,n;
   char *pc;
   int is_dbl;
   int is_unary;
   int done;
   char buf[64];
   struct token *pt, *pp;

   LIST_INIT(pl);
   LIST_INC(pl,pt,ok);
   n = 0;
   while (*e != '\0')
   {
      if (*e <= ' ')
      {
         e++;
         continue;
      }
      switch(*e)
      {
      case '(': pt->category = LPAREN;     pt->type = LPAREN;   break;
      case ')': pt->category = RPAREN;     pt->type = RPAREN;   break;
      case '^': pt->category = BINARY_OP;  pt->type = EXPONENT; break;
      case '%': pt->category = BINARY_OP;  pt->type = MODULO;   break;
      case '/': pt->category = BINARY_OP;  pt->type = DIVIDE;   break;
      case '*': pt->category = BINARY_OP;  pt->type = MULTIPLY; break;
      case '+': pt->category = BINARY_OP;  pt->type = PLUS;     break;
      case '-': pt->category = BINARY_OP;  pt->type = MINUS;
         is_unary = NO;
         if (n == 0) is_unary = YES;
         else
         {
            if ((pp->category == BINARY_OP) ||
                 (pp->category == LPAREN)) is_unary = YES;
         }
         if (is_unary == YES)
            {pt->category = UNARY_OP; pt->type = UNARY_MINUS;}
         break;
      case '$':
         pt->name = e++;
         pt->category = VARIABLE;
         pt->u.len = 2;
         pt->type = NOTHING;
         if ( ! (IS_DIGIT(*e)) ) goto parameter_err;
         break;
      case '"':					/* quoted variable name */
         pt->name = ++e;
         pt->category = VARIABLE;
         pt->type = NOTHING;
         for (pt->u.len = 0; *e != '\0' && *e != '"'; ++e, ++pt->u.len);
         if (*e == '\0') goto no_trailing_quote_err;
         if (pt->u.len == 0) goto bad_variable_name;
         break;
      default:
         if (IS_DIGIT(*e))			/* a numeric value */
         {
            i = 0;
            is_dbl = NO;
            done = NO;
            while (done == NO && i < sizeof(buf) - 1)
            {
              buf[i++] = *e++;
              if (IS_DIGIT(*e)) continue;
              if (*e == '.') {is_dbl = YES; continue;}
              if (*e == 'e' || *e == 'E' || *e == 'd' || *e == 'D')
              {
                 is_dbl = YES;
                 e++;
                 i++;
                 if (! (*e == '-' || *e == '+')) {e--; i--;}
                 continue;
              }
              done = YES;
              buf[i] = '\0';
              e--;
            }
            pt->category = NUMBER;
            if (is_dbl == YES)
            {
               pt->type = R8_TYPE;
               j = sscanf(buf, "%lf", &(pt->v.u.r8));
               if (j != 1) goto r8_read_err;
            }
            else
            {
               pt->type = I4_TYPE;
               j = sscanf(buf, "%d", &(pt->v.u.i4));
               if (j != 1) goto i4_read_err;
            }
         }
         else if (IS_ALPHA(*e))			/* a variable name */
         {
            i = 1;
            done = NO;
            pt->name = e;
            while (done == NO)
            {
              e++;
              i++;
              if (IS_ALPHA(*e)) continue;
              if (IS_DIGIT(*e)) continue;
              if (*e == '_') continue;
              if (*e == '$') continue;
              if (*e == '.') continue;
              done = YES;
              e--;
              i--;
            }
            pt->u.len = i;
            pt->category = VARIABLE;
            pt->type = NOTHING;
         }
         else
            goto what_is_this;
         break;
      }
      ++e;
      ++n;
      pp = pt;
      LIST_INC(pl, pt, ok);
      if (ok != YES) goto enlist_err;
   }
   LIST_DEC(pl,pt,ok);

   return OK;

what_is_this:
   sprintf(msg,"%s: What is this at #%d? %.16s.", rn, n, e);
   ok = my_msg(msg);
   return ERR;
r8_read_err:
   sprintf(msg, "%s: error reading %.16s as double precision.", rn, buf);
   ok = my_msg(msg);
   return ERR;
i4_read_err:
   sprintf(msg,"%s: error reading %.12s as integer.", rn, buf);
   ok = my_msg(msg);
   return ERR;
parameter_err:
   e--;
   sprintf(msg, "%s: non-digit parameter specified: \"%3.3s\"", rn, e);
   ok = my_msg(msg);
   return ERR;
enlist_err:
   sprintf(msg,"%s: token list build error (overflow).", rn);
   my_msg(msg);
   return ERR;
no_trailing_quote_err:
   sprintf(msg,"%s: missing trailing quotation mark.", rn);
   my_msg(msg);
   return ERR;
bad_variable_name:
   sprintf(msg,"%s: quotation of empty empty string.", rn);
   my_msg(msg);
   return ERR;
}

static int i4_calculate(operator, op1, op2, ans)
   int operator;
   int op1;
   int op2;
   int *ans;
{
   char *rn="i4_calculate";
   double a, b, c;

   switch(operator)
   {
   case MULTIPLY:    *ans = op1 * op2;  break;
   case DIVIDE:      *ans = op1 / op2;  break;
   case PLUS:        *ans = op1 + op2;  break;
   case MINUS:       *ans = op1 - op2;  break;
   case MODULO:      *ans = op1 % op2;  break;
   case UNARY_PLUS:  *ans =   op1;      break;
   case UNARY_MINUS: *ans = - op1;      break;
   case AND_OP:      *ans = op1 & op2;  break;
   case OR_OP:       *ans = op1 | op2;  break;
   case EQ_OP:       *ans = op1 == op2; break;
   case NE_OP:       *ans = op1 != op2; break;
   case GE_OP:       *ans = op1 >= op2; break;
   case GT_OP:       *ans = op1 >  op2; break;
   case LE_OP:       *ans = op1 <= op2; break;
   case LT_OP:       *ans = op1 <  op2; break;
   case EXPONENT:
      a = (double) op1;
      b = (double) op2;
      c = pow(a,b);
      *ans = (int) c;
      break;
   default:
      sprintf(msg,"%s: invalid operator: 0x%x\n", rn, operator);
      my_msg(msg);
      *ans = 0;
      return ERR;
      break;
   }

   return OK;
}

static int r8_calculate(operator, op1, op2, ans)
   int operator;
   double op1;
   double op2;
   double *ans;
{
   char *rn="r8_calculate";

   switch(operator)
   {
   case MULTIPLY:    *ans = op1 * op2;    break;
   case DIVIDE:      *ans = op1 / op2;    break;
   case PLUS:        *ans = op1 + op2;    break;
   case MINUS:       *ans = op1 - op2;    break;
   case UNARY_PLUS:  *ans =   op1;        break;
   case UNARY_MINUS: *ans = - op1;        break;
   case EXPONENT:    *ans = pow(op1,op2); break;
   default:
      sprintf(msg,"%s: invalid operator: 0x%x\n", rn, operator);
      my_msg(msg);
      *ans = 0.0;
      return ERR;
      break;
   }
   return OK;
}

static int resolve_data_types(v1, v2)
   struct token *v1;
   struct token *v2;
{
   double r8;

   switch(v1->type)
   {
   case I4_TYPE:
      switch(v2->type)
      {
      case I4_TYPE:
         break;
      case R8_TYPE: 
         v1->type = R8_TYPE; 
         v1->v.u.r8 = r8 = (double) v1->v.u.i4;
         break;
      case NOTHING:
         break;
      default:
         return ERR;
         break;
      }
      break;
   case R8_TYPE:
      switch(v2->type)
      {
      case I4_TYPE:
         v2->type = R8_TYPE; 
         v2->v.u.r8 = r8 = (double) v2->v.u.i4;
         break;
      case R8_TYPE: 
         break;
      case NOTHING:
         break;
      default:
         return ERR;
         break;
      }
      break;
   default:
      return ERR;
      break;
   }
   return OK;
}

static int calculate(op, v1, v2)
   struct token *op;
   struct token *v1;
   struct token *v2;
{
   char *rn="calculate";
   int i4;
   double r8;
   int ok;

   /* convert data types */
   ok = resolve_data_types(v1, v2);
   if (ok != OK) return ERR;
/*
printf("%s(2)...op=%xx v1=%d,%xx v2=%d,%xx\n", rn,
op->type, v1->v.u.i4, v1->type, v2->v.u.i4, v2->type);
*/
   switch (v1->type)
   {
   case I4_TYPE:
      ok = i4_calculate(op->type, v1->v.u.i4, v2->v.u.i4, &i4);
      v1->v.u.i4 = i4;
      break;
   case R8_TYPE:
      ok = r8_calculate(op->type, v1->v.u.r8, v2->v.u.r8, &r8);
      v1->v.u.r8 = r8;
      break;
   default:
      return ERR;
      break;
   }

   return OK;
}

static int eval(pl, result, ret_type, arg, f)
   struct token_list *pl;  /* token list describing expression to evaluate */
   struct mdt *result;     /* final result */
   int *ret_type;          /* resultant data type */
   struct arg_blk *arg;    /* application specific argument block */
   int (*f)();             /* function to call to resolve variable names */
{
   char *rn="eval";			/* routine name */
   struct token_stack operands;
   struct token_stack operators;
   struct token *ptk, *op, *vleft, *vright, tx;
   int ok;
   char name[64];
   int i;
   int new_type;
   int count;
   int empty;

   result->u.ai4[0] = 0;
   result->u.ai4[1] = 0;
   STACK_INIT(operands);
   STACK_INIT(operators);
   tx.type = NOTHING;
   tx.category = NOTHING;

   count = 0;
   LIST_TOP(pl,ptk,ok);
   while( ok == YES )
   {
      count++;
/*
      printf("%3d. category=%Xx, type=%Xx, val=%d.\n", 
            count, ptk->category, ptk->type, ptk->v.u.i4);
*/
      switch(ptk->category)
      {
      case VARIABLE:
         /* convert token to NUMBER */
         strncpy(name, ptk->name, ptk->u.len);
         name[ptk->u.len] = '\0';
/*
         printf("...getting value for %s...\n", name);
*/
         ok = f(name, &(ptk->v), &new_type, arg);
         ptk->category = NUMBER;
         ptk->type  = new_type;
         /* fall thru to NUMBER case */
      case NUMBER:
         STACK_PUSH(operands, ptk, operand_push_err);
         break;
      case LPAREN:
         ptk->u.priority = ptk->type & PRIORITY_MASK;
         STACK_PUSH(operators, ptk, operator_push_err);
         break;
      case RPAREN:
         STACK_POP(operators, op, operator_pop_err);
         while (op->category != LPAREN)
         {
            STACK_POP(operands, vright, operand_pop_err);
            if (op->category != UNARY_OP)
            {
               STACK_POP(operands, vleft, operand_pop_err);
            }
            else {vleft = vright; vright = &tx; }
            /* perform the operation */
            ok = calculate(op, vleft, vright);
            if (ok != OK) goto calculate_err;
            /* push result onto operand stack */
            STACK_PUSH(operands, vleft, operand_push_err);
            /* get the next operator */
            STACK_POP(operators, op, operator_pop_err);
         }
         break;
      default:
         /* token is an operator */
         ptk->u.priority = ptk->type & PRIORITY_MASK;
         STACK_IS_EMPTY(operators, empty);
         if (empty == YES)
         {
             STACK_PUSH(operators, ptk, operator_push_err);
             break;
         }
         STACK_TOP(operators, op, operator_top_err);
         if (op->u.priority < ptk->u.priority)
         {
             STACK_PUSH(operators, ptk, operator_push_err);
             break;
         }
         while (empty == NO && op->u.priority >= ptk->u.priority)
         {
            STACK_POP(operators, op, operator_pop_err);
            STACK_POP(operands, vright, operand_pop_err);
            if (op->category != UNARY_OP)
            {
               STACK_POP(operands, vleft, operand_pop_err);
            }
            else {vleft = vright; vright = &tx; }
            /* perform the operation */
            ok = calculate(op, vleft, vright);
            if (ok != OK) goto calculate_err;
            /* push result onto operand stack */
            STACK_PUSH(operands, vleft, operand_push_err);
            /* get the next operator */
            STACK_IS_EMPTY(operators, empty);
            if (empty == NO) { STACK_TOP(operators, op, operator_pop_err); }
         }
         STACK_PUSH(operators, ptk, operator_push_err);
         break;
      }
      LIST_NEXT(pl,ptk,ok);
   }

/*
 printf("%s...list empty, doing remaining stacks...\n", rn);
*/

   /* pop remaining operators and evaluate */
   STACK_IS_EMPTY(operators, empty);
   while ( empty == NO )
   {
      STACK_POP(operators, op, operator_pop_err);
      STACK_POP(operands, vright, operand_pop_err);
      if (op->category != UNARY_OP)
      {
         STACK_POP(operands, vleft, operand_pop_err);
      }
      else {vleft = vright; vright = &tx; }
      /* perform the operation */
      ok = calculate(op, vleft, vright);
      if (ok != OK) goto calculate_err;
      /* push result onto operand stack */
      STACK_PUSH(operands, vleft, operand_push_err);
      /* get the next operator */
      STACK_IS_EMPTY(operators, empty);
   }

/*
printf("%s...poping the result...\n", rn);
*/
   STACK_POP(operands, vleft, operand_pop_err);
   result->u.ai4[0] = vleft->v.u.ai4[0];
   result->u.ai4[1] = vleft->v.u.ai4[1];
   *ret_type = vleft->type;

   /* check for non-empty operand stack */
   STACK_IS_EMPTY(operands, empty)
   if (empty != YES) goto end_empty_chk_err;

   return OK;

operand_push_err:
   sprintf(msg,"%s: operand push error, tkn#=%d.\n", rn, count);
   my_msg(msg);
   return ERR;
operand_pop_err:
   sprintf(msg,"%s: operand pop error, tkn#=%d.\n", rn, count);
   my_msg(msg);
   return ERR;
operator_push_err:
   sprintf(msg,"%s: operator push error, tkn#=%d.\n", rn, count);
   my_msg(msg);
   return ERR;
operator_pop_err:
   sprintf(msg,"%s: operator pop error, tkn#=%d.\n", rn, count);
   my_msg(msg);
   return ERR;
operator_top_err:
   sprintf(msg,"%s: operator top error, tkn#=%d.\n", rn, count);
   my_msg(msg);
   return ERR;
calculate_err:
   sprintf(msg,"%s: cannot calculate, tkn#=%d.\n", rn, count);
   my_msg(msg);
   sprintf(msg,"  op cat,type=%xx,%xx  v1,v2 type: %xx %xx\n",
      op->category, op->type, vleft->type, vright->type);
   my_msg(msg);
   return ERR;
end_empty_chk_err:
   sprintf(msg,"%s: operand stack not empty on end.\n", rn);
   my_msg(msg);
   return ERR;
}

static int print_msg(msg)
   char *msg;
{
   printf("EVAL==> %s\n", msg);
   return OK;
}

static int resolve_fun()
{
   my_msg("RESOLVE:  no expression variable resolution function found.");
   return ERR;
}

int w_item_expr_eval(ch, event,item, exp, result, ret_type, 
                     item_resolve_fun, err_msg_fun)
   int ch;                    /* wind_lib channel number */
   char *event;               /* name of current event */
   char *item;                /* string item name */
   char *exp;                 /* expression, e.g.: ((8 * XVAL) + 3)) */
   struct mdt *result;        /* final result */
   int *ret_type;             /* coded return data type */
   int (*item_resolve_fun)(); /* function to call to resolve variable names */
   int (*err_msg_fun)();      /* function to call to print error messages */
{
   char *rn="w_item_expr_eval";
   int ok;
   struct token_list list, *pl;
   int i;
   int x,y;
   struct arg_blk arg;

   arg.ch = ch;
   arg.event = event;
   arg.item = item;

   if (item_resolve_fun == NULL) item_resolve_fun = resolve_fun;

   if (err_msg_fun == NULL) my_msg = print_msg;
   else my_msg = err_msg_fun;

   pl = &list;
   ok = parse_and_tokenize(exp, pl);
   if (ok != OK) goto parse_err;
/*
   LIST_SHOW(pl,i);
*/

   i = 0;
   ok = eval(pl, result, ret_type, &arg, item_resolve_fun);
   return ok;

parse_err:
   sprintf(msg, "%s: cannot parse %.30s\n", rn, exp);
   my_msg(msg);
   return ERR;
}

/*
!------------------------------------------------------------------------------
Routine w_item_expr_var_resolve resolves variable names occuring in an
algebraic style parenthetical expression to numeric values.  Variable names
may be from the set $1, $2, ... $9 or any wind_lib item name valid for the
current event (including global items). The $n style variable names are
parameters embedded in the "original" item, e.g.: COLUMN_%27_WORD_%19
would be parsed to resolve $1 to 27 and $2 to 19.
*/
int w_item_expr_var_resolve(name, pval, ptype, arg)
   char *name; /* variable name */
   struct mdt *pval;
   int *ptype;
   struct arg_blk *arg; /* ch, event, item name, ... */
{
   char *rn= "W_ITEM_EXPR_VAR_RESOLVE";
   int i,j;
   char *pc;
   int ok;
   int size;
   int ret_size;
   int bit_start;
   int ret_type;
   void *pv;
   double r8;

/*
printf("...inside function fun with name %s.\n",name);
*/

   if (*name == '$')
   {
      /* check for parameter {$1,$2,...$9} embedded in item name */
      ++name;
      if (*name >= '1' && *name <= '9')
      {
         i = *name - '0';
         for (j=0, pc=arg->item; j<i & *pc != '\0'; ++pc)
            if (*pc == SUB_CHAR) ++j;
         if (i == j)
         {
            pval->u.i4 = atoi(pc);
            *ptype = I4_TYPE;
         }
         else goto parameter_not_found;
      }
      else goto invalid_parameter;
   }
   else
   {
      /* name is an item name, call w_really_get_item to get it's value */
/*
      printf("%s: calling get_item for %s %s.\n", rn, arg->event, arg->item);
*/
      pval->u.ai4[0] = 0;
      pval->u.ai4[1] = 0;
      ret_size = 0;
      bit_start = 0;
      ret_type = I4_TYPE;
      ok = w_really_get_item(arg->ch, arg->event, name,
           pval, (int) 2, &ret_size, &bit_start, &ret_type, &pv);
      if (ok != 1) goto get_item_err;
      if (ret_size < 1) goto get_item_sz_err;
/*
printf("%s: %s is i4 type, value=%d %X\n", rn, name, pval->u.i4, pval->u.i4);
printf("%s: %s is r4 type, value=%f\n", rn, name, pval->u.r4);
printf("%s: %s is r8 type, value=%f\n", rn, name, pval->u.r8);
*/
      *ptype = ret_type;
      switch(ret_type)
      {
      case I4_TYPE:
         break;
      case R4_TYPE:
         pval->u.r8 = r8 = pval->u.r4;
         *ptype = R8_TYPE;
         break;
      case R8_TYPE:
         break;
      default:
         goto data_type_err;
         break;
      }
   }

return OK;

parameter_not_found:
   sprintf(msg,"%s: item name embedded parameter #%d not found", rn, i);
   my_msg(msg);
   return ERR;
invalid_parameter:
   sprintf(msg,"%s: parameter must be one of $1,$2,...$9", rn);
   my_msg(msg);
   return ERR;
get_item_err:
   sprintf(msg,"%s: cannot get %.12s item %.20s for expression",
      rn, arg->event, name);
   my_msg(msg);
   return ERR;
get_item_sz_err:
   sprintf(msg,"%s: bad size for %.12s item %.20s for expression",
      rn, arg->event, arg->item);
   my_msg(msg);
   return ERR;
data_type_err:
   sprintf(msg,"%s: data type err for %.12s item %.20s for expression",
      rn, arg->event, arg->item);
   my_msg(msg);
   return ERR;
}

/*
!------------------------------------------------------------------------------
*/
/*
main()
{
   struct mdt x;
   char *item="MAJOR_FRAME_ROW_%75%44_%22";
   ok = w_item_expr_eval(ch, event, item, ex, &x, &ret_type,
           w_item_expr_var_resolve, print_msg);
   char *ex="(23 + 7) * 4 - DNA_TRIGGER + 1 + $1";
   char *ex="(23 + 7) - $1 + $2";
   char *ex="(23 + $1)";
   char *ex="(23 + 7.0) - $1 + $2";
   int ok;
   int ch;
   char *event="RAD2";
   int ret_type;

   ch = 0;
   printf("Will try to evaluate %s with item %s.\n", ex, item);
   x.u.i4 = -99;
   ok = w_item_expr_eval(ch, event, item, ex, &x, &ret_type,
           NULL, print_msg);
   printf("item=%s\n", item);
   printf("ex=%s, ok=%d, x.i4=%d x.r8=%lf Rtype=%xx\n",
              ex,    ok, x.u.i4, x.u.r8,  ret_type);
   return 1;
}
*/
