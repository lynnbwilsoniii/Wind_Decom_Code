! endian_lib.for - routines for converting between big and little endian
! integer formats

!------------------------------------------------------------------------------
! Rearranges bytes in argument sun such that if on entry argument sun was
! a big-end first integer on return argument sun would be a little-end
! first integer.
!---------------------------------------------------------------------------
	subroutine	w_vxtosuni4(sun)
	implicit	none
	byte		sun(4)
	byte		w(4)

	w(4) = sun(1)
	w(3) = sun(2)
	w(2) = sun(3)
	w(1) = sun(4)
	
	sun(1) = w(1)
	sun(2) = w(2)
	sun(3) = w(3)
	sun(4) = w(4)

	return
	end


!------------------------------------------------------------------------------
! Returns the little-end-first integer equivalent of the big-end-first
! argument.
!---------------------------------------------------------------------------
	integer*4	function	suntovxi4(sun)
	implicit	none
	byte		sun(4)
	integer*4	i
	byte		vx(4)
 	equivalence	(i,vx)

	vx(4) = sun(1)
	vx(3) = sun(2)
	vx(2) = sun(3)
	vx(1) = sun(4)
	suntovxi4 = i

	return
	end

!------------------------------------------------------------------------------
! Returns the big-end-first integer equivalent of the little-end-first
! argument.
!---------------------------------------------------------------------------
	integer*4	function	vxtosuni4(vx)
	implicit	none
	byte		vx(4)
	byte		sun(4)
	integer*4	i
 	equivalence	(i,sun)

	sun(1) = vx(4)
	sun(2) = vx(3)
	sun(3) = vx(2)
	sun(4) = vx(1)
	vxtosuni4 = i

	return
	end

!------------------------------------------------------------------------------
! Returns the big-end-first integer equivalent of the little-end-first
! argument for integer*2 values.
!---------------------------------------------------------------------------
	integer*2	function	vxtosuni2(vx)
	implicit	none
	byte		vx(2)
	byte		sun(2)
	integer*2	i
 	equivalence	(i,sun)

	sun(1) = vx(2)
	sun(2) = vx(1)
	vxtosuni2 = i

	return
	end

!------------------------------------------------------------------------------
! Rearranges the little-end-first input argument vx to become the big-end-first
! output argument sun for integers of size 2, 4, or 8 depending on the value
! of the input sz argument.
!---------------------------------------------------------------------------
	subroutine	vx2sun(vx,sun,sz)
	implicit	none
	integer*4	sz
	byte		vx(sz), sun(sz)

	if (sz .eq. 2) then
	   sun(1) = vx(2)
	   sun(2) = vx(1)
	else if (sz .eq. 4) then
	   sun(1) = vx(4)
	   sun(2) = vx(3)
	   sun(3) = vx(2)
	   sun(4) = vx(1)
	else if (sz .eq. 8) then
	   sun(1) = vx(8)
	   sun(2) = vx(7)
	   sun(3) = vx(6)
	   sun(4) = vx(5)
	   sun(5) = vx(4)
	   sun(6) = vx(3)
	   sun(7) = vx(2)
	   sun(8) = vx(1)
	else
	   type *, 'Error: illegal argument to VX2SUN', sz
	end if

	return
	end
