#
# WindWaves MacosX Makefile
#
WIND_VERSION = v1.7d
LNM=LOGICALNAMEMAPPING='CDF_INC=../cdf/include'  export LOGICALNAMEMAPPING

ABSOFT_DIR= /Applications/Absoft
ABSOFT_LIB_DIR= $(ABSOFT_DIR)/lib
ABSOFT_LIBS = -L$(ABSOFT_LIB_DIR) -lf90math -lfio -lf77math

LIBDIR = ../lib
F77INCLUDES = ./
BINDIR = ../bin
OBJ_LIB = $(LIBDIR)/libWIND.a
SHR_LIB = $(LIBDIR)/libWAVES.so.1.1
IDL_LIB = $(LIBDIR)/libIDL_WAVES.so
QDB     = $(BINDIR)/qdb
ranlib = /usr/bin/ranlib

qdbobjs = qdb_args.o qdb_main.o qdb.o

CDF_objs = wind_cdf.o

S1 = \
 c_interface.o \
 wind_tm_lib.o 
S4 = \
 wind_event_lib.o \
 wind_item_lib.o 
S6 = \
 wind_wnd_lib.o \
 wind_cdhf_lib.o \
 wind_nrt.o nrt_rtc_lib.o
S7 = \
 wind_time_lib.o \
 rad_list_mode.o \
 $(CDF_objs) \
 tnr.o rad.o fft.o fft_lib.o master_cylinder.o waves2.o
S2 = \
 item_get.o item_functions.o item.o rb_tree.o w_item.o 
S5 = \
 block_file_size.o sun_file_select.o sun_win_sz.o eval.o errmsg.o endian_lib.o
S3 = \
 sun_only.o \
 wind_version.o \
 wind_misc_lib.o \
 megaint2.o wind_time2_lib.o \
 string.o wind_string_lib.o
OBJECTS = $(S1) $(S6) $(S4) $(S7) $(S2) $(S3) $(S5)

USE_CDF  = -DCDF_LIB_USEABLE

cc=gcc
cc2=gcc
ff=f95
COPT = -c -DUSE_MACOSX

# For MACOS_PPC
FOPT = -c -DABSOFT_FORTRAN -ffixed -s -YEXT_NAMES=LCS -YEXT_SFX=_

# For MACOS_INTEL
# FOPT = -c -DABSOFT_FORTRAN -DLITTLE_ENDIAN_ARCH -ffixed -s -YEXT_NAMES=LCS -YEXT_SFX=_

LD_OPTS_LOADOBJ = -bundle
LD_OPTS_SHRLIB = -dynamiclib
LD_OPTS2 = -L$(ABSOFT_LIB_DIR) -lU77 -lf90math -lfio -lf77math

LIBU77 = $(ABSOFT_LIB_DIR)/libU77.a

# cwd = $(shell pwd)
# host = $(shell hostname)
# absbindir = $(cwd:/src=/bin)
# abslibdir = $(cwd:/src=/lib)
# abscdfdir = $(cwd:/src=/cdf)
# WIND_HOME = $(cwd:/$(WIND_VERSION)/src=)

BASEDIR = /Users/jackv/fprog/wiwav
BASEARCH = macos_ppc
absbindir = $(BASEDIR)/$(WIND_VERSION)/bin
abslibdir = $(BASEDIR)/$(WIND_VERSION)/lib
abscdfdir = $(BASEDIR)/$(WIND_VERSION)/cdf
WIND_HOME = $(BASEDIR)/$(WIND_VERSION)/src

CDF_ORIGIN = $(BASEDIR)/cdf3.1/$(BASEARCH)
CDF_LIB_DIR = $(abscdfdir)/lib
CDF_LIB = -L$(CDF_LIB_DIR) -lcdf

NO_LDPATH = unset LD_LIBRARY_PATH



# all:  setup_cdf $(OBJ_LIB) $(SHR_LIB) $(IDL_LIB) $(QDB)
all: setup_cdf $(OBJ_LIB) $(SHR_LIB) $(IDL_LIB) $(QDB)
idl: $(IDL_LIB)
shr: $(SHR_LIB)
qdb: $(QDB)

$(OBJ_LIB): $(OBJECTS) sun_idl_interface.o
	ar cr $(OBJ_LIB) $(OBJECTS)
	$(ranlib) $(OBJ_LIB)
	chmod 644 $(OBJ_LIB)

# shareable object library (preferred for FORTRAN applications to link with)
$(SHR_LIB): $(OBJECTS)
	gcc -o $(SHR_LIB) $(LD_OPTS_SHRLIB) -single_module $(LIBU77) $(OBJECTS) $(CDF_LIB) $(LD_OPTS2)

# IDL-callable shareable object library
$(IDL_LIB): $(OBJECTS) sun_idl_interface.o
	gcc -o $(IDL_LIB) $(LD_OPTS_LOADOBJ) sun_idl_interface.o $(OBJ_LIB) \
	$(CDF_LIB) $(LD_OPTS2)

setup_cdf:  cdf.h  cdf.inc  libcdf.a  libcdf.so

cdf.h : $(CDF_ORIGIN)/include/cdf.h
	cp $< $(abscdfdir)/include

cdf.inc : $(CDF_ORIGIN)/include/cdf.inc
	cp $< $(abscdfdir)/include

libcdf.a : $(CDF_ORIGIN)/lib/libcdf.a
	cp $< $(abscdfdir)/lib
	$(ranlib) $(abscdfdir)/lib/libcdf.a

libcdf.so : $(CDF_ORIGIN)/lib/libcdf.so
	cp $< $(abscdfdir)/lib





setup_cdf_incs: $(abscdfdir)/include/cdf.h  $(abscdfdir)/include/cdf.inc

setup_cdf_lib:  $(abscdfdir)/lib/libcdf.a  $(abscdfdir)/lib/libcdf.so










# ----------------------------------------------------------------
# Basic compilation dependencies:

#
# item database stuff
#
item_get.o: item_get.c wind_tm_event_def.h item.h extract.c wind_os_def.h
	$(cc) $(COPT) $(USE_CDF) item_get.c

item_functions.o: item_functions.c
	$(cc) $(COPT) item_functions.c

rb_tree.o: rb_tree.c item.h
	$(cc) $(COPT) rb_tree.c

w_item.o: w_item.c item.h 
	$(cc) $(COPT) w_item.c

item.o: item.c item.h 
	$(cc) $(COPT) item.c

errmsg.o: errmsg.c
	$(cc) $(COPT) errmsg.c

eval.o: eval.c
	$(cc) $(COPT) eval.c

rad_list_mode.o: rad_list_mode.for
	$(ff) $(FOPT) rad_list_mode.for

#
# misc modules
#
wind_nrt.o: wind_nrt.c
	$(cc) $(COPT) wind_nrt.c
nrt_rtc_lib.o: nrt_rtc_lib.c
	$(cc) $(COPT) -DUSE_SUN nrt_rtc_lib.c

wind_cdf.o: wind_cdf.for
	$(ff) $(FOPT) wind_cdf.for

endian_lib.o: endian_lib.for
	$(ff) $(FOPT) endian_lib.for

sun_idl_interface.o: sun_idl_interface.c
	$(cc) $(COPT) sun_idl_interface.c

sun_file_select.o: sun_file_select.c
	$(cc) $(COPT) sun_file_select.c

sun_win_sz.o: sun_win_sz.c
	$(cc) $(COPT) sun_win_sz.c 

wind_misc_lib.o: wind_misc_lib.for
	$(ff) $(FOPT) wind_misc_lib.for

wind_version.o: wind_version.for
	$(ff) $(FOPT) wind_version.for

wind_time_lib.o: wind_time_lib.for
	$(ff) $(FOPT) wind_time_lib.for

megaint2.o: megaint2.c
	$(cc) $(COPT) megaint2.c

wind_time2_lib.o: wind_time2_lib.for \
 vms_time_constants_def.for \
 ui8_def.for \
 parm_def.for
	$(ff) $(FOPT) wind_time2_lib.for -lm

wind_string_lib.o: wind_string_lib.for
	$(ff) $(FOPT) wind_string_lib.for

string.o: string.c
	$(cc) $(COPT) string.c

block_file_size.o: block_file_size.c
	$(cc) $(COPT) block_file_size.c

sun_only.o: sun_only.for
	$(ff) $(FOPT) sun_only.for

#
# physical units modules
#
master_cylinder.o: master_cylinder.for
	$(ff) $(FOPT) master_cylinder.for
rad.o: rad.for
	$(ff) $(FOPT) rad.for
fft_lib.o: fft_lib.for
	$(ff) $(FOPT) fft_lib.for
fft.o: fft.for
	$(ff) $(FOPT) fft.for
tnr.o: tnr.for
	$(ff) $(FOPT) tnr.for
waves2.o: waves2.for
	$(ff) $(FOPT) waves2.for

#
# .wnd access library
#
wind_wnd_lib.o: wind_wnd_lib.for \
 wind_os_def.for \
 wind_wnd_def.for \
 parm_def.for \
 c_string_def.for \
 wind_tm_user_def.for \
 wind_tm_event_def.for \
 wind_record_def.for \
 wind_return_code_def.for \
 wind_hk_addr_def.for \
 wind_packet_addresses_def.for
	$(ff) $(FOPT) wind_wnd_lib.for

#
# CDHF access library
#
wind_cdhf_lib.o: wind_cdhf_lib.for \
 wind_os_def.for \
 wind_cdhf_def.for \
 wind_cdhf_rec_def.for \
 wind_cdhf_alloc_def.for \
 wind_tm_user_def.for \
 ui8_def.for \
 vms_time_constants_def.for\
 wind_record_def.for \
 parm_def.for \
 wind_return_code_def.for \
 wind_tm_event_def.for \
 wind_hk_addr_def.for \
 wind_packet_addresses_def.for
	$(ff) $(FOPT) wind_cdhf_lib.for

#
# wind_tm_lib
#
wind_tm_lib.o: wind_tm_lib.for \
 wind_os_def.for \
 wind_record_def.for \
 parm_def.for \
 c_string_def.for \
 wind_tm_user_def.for \
 vms_time_constants_def.for\
 wind_return_code_def.for \
 wind_tm_event_def.for \
 item_def.for \
 wind_tm_routine_def.for \
 wind_hk_addr_def.for
	$(ff) $(FOPT) wind_tm_lib.for

#
# wind_item_lib
#
wind_item_lib.o: wind_item_lib.for \
	wind_os_def.for \
	parm_def.for \
	c_string_def.for \
	item_def.for \
	wind_tm_user_def.for \
	wind_tm_event_def.for \
	vms_time_constants_def.for\
	wind_return_code_def.for \
	wind_tm_routine_def.for
	$(ff) $(FOPT) wind_item_lib.for

#
# wind_event_lib
#
wind_event_lib.o: wind_event_lib.for \
 wind_os_def.for \
 parm_def.for \
 c_string_def.for \
 item_def.for \
 wind_tm_user_def.for \
 wind_tm_event_def.for \
 ui8_def.for \
 wind_return_code_def.for \
 wind_hk_def.for \
 wind_tm_routine_def.for
	$(ff) $(FOPT) wind_event_lib.for
#
# qdb - query item data base
#
$(QDB): $(qdbobjs) item_get.o item.o
	@echo " "
	@echo "Making qdb"
	@echo WIND_HOME is $(WIND_HOME)
#	echo $(cwd) $(absbindir)
	@echo " "
	$(LDPATH)
	echo $$LD_LIBRARY_PATH
	@echo " "
#	$(cc2) $(qdbobjs) -o $(QDB) $(OBJ_LIB) $(OTHERS) $(qdb_refs) 
# works
	$(LDPATH)
	$(cc2) $(qdbobjs) -o $(QDB) $(SHR_LIB) $(QDB_REFS) $(LIBU77) $(ABSOFT_LIBS)
#	$(NO_LDPATH); $(cc2) $(qdbobjs) -o $(QDB) $(OBJ_LIB) $(QDB_REFS)

qdb.o: qdb.c
	$(cc) $(COPT) qdb.c

qdb_args.o: qdb_args.c
	$(cc) $(COPT) qdb_args.c

qdb_main.o: qdb_main.c
	$(cc) $(COPT) qdb_main.c

c_interface.o: c_interface.c
	$(cc) $(COPT) c_interface.c



