/* sun_file_select.c - uses getenv, opendir, readdir system calls to 
   display the contents of a directory and prompt the user for a filename.
   Other routines process path lists and wild card file specifications.
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/file.h>

#define MAX_STR_SZ 256
#define MAX_DIRS 64
#define MAX_FILES 2048

struct filenames {
   char f[256];
   int  sz;
   char s[4];
};
static struct filenames fn[MAX_FILES];
static int page_size=24;
static int n_files=0;
static int show_info=0;
static char *current_dir;

extern int get_screen_size();
extern int wc_match_spec();
extern int fnstrcmp();
extern int i4fncmpasc();
extern int i4fncmpdec();

/*
  Returns 1 if the file named f is a directory and 0 otherwise.
*/
static int is_a_dir( f )
   char *f;
{
   DIR *dirp;
   dirp = opendir(f);
   if (dirp == NULL) return 0;
   closedir(dirp);
   return 1;
}

/*
  Returns 1 if the file named f is a directory and 0 otherwise.
*/
static int is_a_dir3( f )
   char *f;
{
   struct stat b;
   if (stat(f, &b) != -1)
   {
      if ((b.st_mode & S_IFMT) == S_IFDIR) return 1;
   }
   return 0;
}

/*
  Returns 1 if the file named f is a directory and 0 otherwise.
*/
static int is_a_dir2( n )
   int n;
{
   int k;
   struct stat b;
   char name[256];

   if (n > 0 && n <= n_files)
   {
      n = n - 1;
      if (fn[n].s[0] == 'd') return 1;
      strcpy(name, current_dir);
      strcat(name, "/");
      strcat(name, fn[n].f);
      if (stat(name, &b) != -1)
      {
         k = b.st_mode & S_IFMT;
         if (k == S_IFDIR) return 1;
      }
      k = access(name, R_OK);
      if (k != 0)
      {
         perror("NO ACCESS");
         return 2;
      }
      return 0;
   }
   return 3;
}

/*
  Opens directory dname and reads entry entry_number, copying the entry's
  file name into the caller's buffer buf.
*/
static int get_file_name( entry_number, buf )
   int entry_number;
   char *buf;
{
   int i;

   if (entry_number > 0 && entry_number <= n_files)
   {
      i = entry_number - 1;
      strcpy(buf, fn[i].f);
      return 1;
   }

   return 0;
}

/* list the files in the current file buffer
*/
static int list_files( page_number )
   int *page_number;
{
   int i,j,k,n;
   int last_page;
   int n_extra_lines=3;
   struct stat b;
   char name[256];

   if (page_size < 1)
   {
      j = page_size;
      i = get_screen_size(&page_size);
      if (page_size < 1) page_size = -j;
   }

   n = page_size - n_extra_lines;
   if (n == 0) {printf("Invalid page size for file display.\n"); return 0;}
   if (n_files == 0) {printf("\nNo files found.\n\n"); return 0;}
   last_page = n_files/n;
   if ((last_page * n) < n_files) last_page++;

   if (*page_number < 1) *page_number = 1;
   if (*page_number > last_page) *page_number = last_page;

   i = n * (*page_number - 1);
   j = i + n;
   printf("\n");
   for (; i < j && i < n_files; i++)
   {
      if (show_info && (fn[i].sz == 0))
      {
         strcpy(name, current_dir);
         strcat(name, "/");
         strcat(name, fn[i].f);
         if (stat(name, &b) != -1)
         {
            fn[i].sz = b.st_size;
            fn[i].s[0] = ' ';
            k = b.st_mode & S_IFMT;
            if (k == S_IFDIR) fn[i].s[0] = 'd';
            fn[i].s[1] = '\0';
         }
         else
         {
            fn[i].sz = -1;
            fn[i].s[0] = '?';
            fn[i].s[1] = '\0';
         }
      }
      if (show_info)
         printf(" %4.d. %-32.32s  %9.d  %s\n", i+1, fn[i].f, fn[i].sz, fn[i].s);
      else
         printf(" %4.d. %-32.32s\n", i+1, fn[i].f);
   }
   
   return 1;
}

/*
  Copies the contents of directory dname to the internal buffer.
*/
static int get_files( dname )
   char *dname;
{
   DIR *dirp;
   struct dirent *dp;
   int i, j, k; 

   dirp = opendir(dname);
   if (dirp == NULL)
   {
      printf("Cannot open this directory (1): %s\n", dname);
      return 0;
   }

   k = 0;
   n_files = 0;
   for (j=i=-1, dp = readdir(dirp); dp != NULL; dp = readdir(dirp), i++)
   {
      if (i > 0) 
      {
         if (strstr(dp->d_name,".sfdu") == NULL)
         {
            if (j < MAX_FILES)
            {
               j++;
               strcpy(fn[j].f, dp->d_name);
               fn[j].sz = 0;
            }
            else k++;
         }
      }
   }
   closedir (dirp);
   n_files = j + 1;
   if (k != 0) printf("Too many files, %d not shown.\n", k);

   return i-1;
}

/*
   Provides the caller with a simple file list menu and simple directory
   navigation capability.  Environment variable WIND_DATA is accessed as
   the initial directory to search.  Selected file name is returned to
   caller in buffer f.  Returns 1 for success and 0 otherwise.
*/
int w_sun_file_select( f )
   char *f;
{
   char *p;
   char *getenv();
   int  i,j,n,m;
   char s[MAX_STR_SZ], *q;
   char d[MAX_STR_SZ];
   int  page_number;
   int  new_dir;
   int  show_list;
char c;

/*
c='\n';
printf("...a newline is %d...\n", (int) c);
c='\r';
printf("...a CR is %d...\n", (int) c);
*/

   current_dir = d;
   p = getenv("WIND_DATA");
   if (p == NULL)
   {
      printf("Environment variable WIND_DATA is undefined.\n");
      printf("Use setenv WIND_DATA to point to WIND/WAVES data tree.\n");
      return 0;
   }
   strcpy(d,p);
   for (p=d; *p > ' '; p++); *p='\0';
   printf("WIND_DATA is %s.\n", d);
   q = strchr(d,':');
   if (q != NULL)
   {
      *q = '\0';
      printf("Using %s as initial directory.\n", d);
   }

   f[0] = 0;
   new_dir = 0;
   show_list = 0;
   page_number = 1;
   m = get_files(d);
/*   if (m <= 0) return 0; */
   m = list_files(&page_number);
/*   if (m <= 0) return 0;*/
   while ( f[0] == 0 )
   {
      printf("\nCurrent directory: %s, %d files.\n", d, n_files);
      printf("Enter file number (0,q=Exit, ..=up, F=Forward, B=Back, I=Info): ");
      q = gets(s);
      if (q == NULL) { printf("  EOF detected, returning.\n"); return 0; }
      switch(q[0])
      {
      case 0:			/* bare carriage return */
      case 'f':
      case 'F':
         page_number = page_number + 1;
         show_list = 1;
         break;
      case 'b':
      case 'B':
         page_number = page_number - 1;
         show_list = 1;
         break;
      case 'i':
      case 'I':
         show_info = ~show_info;
         show_list = 1;
         break;
      case '.':			/* move up one directory level */
         if (q[1] != '.') {printf("  Invalid!\n"); break; }
         i = strlen(d);
         if (i == 1) { printf("  Cannot go up any higher.\n"); break; }
         while (i > 0) 
         {
            d[i-1] = 0;
            --i;
            j = i - 1;
            if (d[j] == '/') { d[j] = 0; break; }
         }
         new_dir = 1;
         break;
      case '0':
      case 'q':
      case 'Q':			/* exit flag */
         printf("No file selected.\n");
         return 0;
         break;
      default:
         if (q != s) {printf("...input error, exiting.\n"); return 0; }
         n = atoi(s);
         if (n < 1 || n > n_files)
         {
            printf("   Invalid integer value, enter zero to exit.\n");
            q = NULL;
            break;
         }
         i = get_file_name(n, s);
         if (i==1)
         {
            strcpy(f,d);
            strcat(f,"/");
            strcat(f,s);
/*            if (is_a_dir(f)) */
            m=is_a_dir2(n);
            switch(m)
            {
            case 0: return 1;
            case 1:
               strcpy(d,f);
               f[0] = 0;
               new_dir = 1;
               break;
            default: /* access error or similiar already reported */
               f[0] = 0;
            }
         }
         break;
      }
      if (new_dir)
      {
         new_dir = 0;
         m = get_files(d);
/*         if (m <= 0) return 0; */
         page_number = 1;
         m = list_files(&page_number);
/*         if (m <= 0) return 0; */
      }
      else if (show_list)
      {
         show_list = 0;
         m = list_files(&page_number);
/*         if (m <= 0) return 0; */
      }
   }
   return 0; 
}

static int compare1(a,b)
   char *a;
   char *b;
{
   return strcmp(a,b);
}

static int compare2(a,b)
   char *a;
   char *b;
{
   return strcmp(b,a);
}

/*
  Copies the contents of directory dname to the caller's buffer,
  honoring wild card characters as specified in the matching routine.

  Returns the number of files that matched or zero on error.

  flags bit mask:
    bit 0 -> set: get last sz matching files, clr: get first sz matching files
    bit 1 -> set: recursively search subdir's, clr: ignore subdir's

*/
int wc_get_files_wc( dname, aspec, buf, n_el, sz_el, flags, ret_n_el )
   char *dname;		/* directory name */
   char *aspec;		/* wild card file specification */
   char *buf;		/* file name buffer */
   int *n_el;		/* # of elements */
   int *sz_el;		/* byte size of each element */
   int *flags;		/* bit mask */
   int *ret_n_el;	/* number of elements placed in buf */
{
   char *rn="wc_get_files_wc";
   DIR *dirp;
   struct dirent *dp;
   int i, j, k, n;
   int match;
   char s[256];
   int seeking_lexical_greatest;
   int search_subdirs;
   int max_dir_open_attempts=5;

   /* sometimes lepmlk can't get the urap volume over nfs right away */
   /* so, we loop a bit on the directory open call */
   i = 0;
   while (i <= max_dir_open_attempts)
   {
      dirp = opendir(dname);
      if (dirp == NULL)
      {
         if (i == max_dir_open_attempts)
         {
            printf("Cannot open this directory (%d attempts): %s.\n", i,dname);
            return 0;
         }
         else { sleep( (unsigned) 2 ); }
      }
      else { i = max_dir_open_attempts + 1; break;}
      i++;
   }

   dp = readdir(dirp); /* should normally be "." */
   dp = readdir(dirp); /* should normally be ".." */
   dp = readdir(dirp); /* 1st file name */

   seeking_lexical_greatest = *flags & 2; 
   search_subdirs = *flags & 1;
   for (j=i=0;
        dp != NULL && (*ret_n_el < *n_el || seeking_lexical_greatest != 0);
        dp = readdir(dirp), i++)
   {
      match = wc_match_spec(aspec,dp->d_name);
      if (match == 1)
      {
         j++;
         ++*ret_n_el;
         if (*ret_n_el <= *n_el)
         {
            k = (*ret_n_el - 1) * *sz_el;
            memset(&buf[k], '\0', *sz_el);
            strcpy(s,dname);
            strcat(s,"/");
            strcat(s,dp->d_name);
            strncpy(&buf[k], s, *sz_el);
         }
         else if (seeking_lexical_greatest != 0)
         {
           if (*n_el > 1 || (fnstrcmp(dp->d_name,buf) > 0))
           {
              *ret_n_el = 1;
               k = 0;
               memset(&buf[k], '\0', *sz_el);
               strcpy(s,dname);
               strcat(s,"/");
               strcat(s,dp->d_name);
               strncpy(&buf[k], s, *sz_el);
           }
         }
         else --*ret_n_el;
      }
      else if (search_subdirs != 0)
      {
         if (strstr(dp->d_name,"wi_lz_wav_") == NULL)
         {
            n = 0;
            strcpy(s, dname);
            strcat(s,"/");
            strcat(s, dp->d_name);
            if (is_a_dir(s)) n =
               wc_get_files_wc(s, aspec, buf, n_el, sz_el, flags, ret_n_el);
            j = j + n;
         }
      }
   }
   closedir (dirp);

   return j;
}

/*
!------------------------------------------------------------------------------
! Fortran callable front end for wc_get_files_wc, returns a list of file names
!------------------------------------------------------------------------------
*/
int w_get_file_list_from_dir( envar, aspec, list, sz, sz_el, ret_sz, flags)
   char *envar;		/* name of environment variable containing search list*/
   char *aspec;		/* wild card file specification */
   char *list;		/* file name buffer */
   int *sz;		/* # of elements in list */
   int *sz_el;		/* byte size of each element in list */
   int *ret_sz;		/* number of elements placed in list */
   int *flags;		/* bit mask search/sort directions */
{
   char *rn="w_get_file_list_from_dir";
   int ok;
   char *pc, *pd;
   char dir[256];
   char spec[256];

   *ret_sz = 0;
   /* copy file spec and null terminate */
   for (pc=spec; *aspec > ' '; *pc = *aspec, ++pc, ++aspec);
   *pc = '\0';

   /* is this a path or an environment variable name? */
   if (envar[0] != '/')
   {
      if (NULL == (pc = getenv(envar)))
      {
         printf("%s: cannot get environment string for %s.\n", rn, envar);
         return 0;
      }
   }
   else
      pc = envar;

   /* loop over path elements */
   while (*pc > ' ')
   {
      for (pd=dir; *pc > ' ' && *pc != ':'; *pd=*pc, ++pc, ++pd);
      *pd = '\0';
/*
printf("%s: looking in %s.\n", rn, dir);
*/
      ok = wc_get_files_wc(dir,spec,list,sz,sz_el,flags,ret_sz);

      if (*pc != '\0') ++pc;
   }

   if (*ret_sz > 1)
      if (0 != (0x00000004 & *flags))
         qsort(list, *ret_sz, *sz_el, i4fncmpdec);
      else
         qsort(list, *ret_sz, *sz_el, i4fncmpasc);

   return 1;
}
