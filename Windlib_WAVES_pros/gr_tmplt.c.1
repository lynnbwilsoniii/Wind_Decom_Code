/*
 * gr_tmplt.c
 *
 *	$Id: gr_tmplt.c,v 1.2 1998/05/29 17:21:56 ali Exp $
 */

  
/*
  This file shows how to add and debug an IDL driver for VMS.
  Replace the "ABC"s with the name of your driver.


  By adding the driver this way, you can use the VMS debugger.

  $!     Compile and link this file:
  $ CC gr_tmplt/DEBUG/EXTERN=STRICT_REFDEF/ANSI/FLOAT=IEEE_FLOAT -
	/IEEE_MODE=DENORM_RESULTS/INCLUDE=IDL_DIR:[EXTERNAL]
  $
  $!     Compile and link your driver:
  $ cc graphics_abc/DEBUG/EXTERN=STRICT_REFDEF/ANSI/FLOAT=IEEE_FLOAT -
	/IEEE_MODE=DENORM_RESULTS/INCLUDE=IDL_DIR:[EXTERNAL]
  $!     Define a logical name for the IDL sharable image:
  $ define IDL_EXE idl_dir:[bin.bin_alpha]idl.exe
  $!      Link, using IDL as a sharable image:
  $ link/deb gr_tmplt,gr_tmpl,sys$input/opt
  idl_exe/share
  $!     Run your driver:
  $ run gr_tmplt


  When you have your driver debugged, you can have it automatically loaded
  by placing it's executable file in the IDL_DIR:[bin.bin_alpha.drivers]
  directory. The name of the executable must be XXX.EXE, where XXX is the
  name of the device.  Be sure that your driver executable is sharable, and
  has no writable, sharable PSECTS.  Also, the driver definition
  structure MUST be UNIVERSAL, and MUST have the name XXX_DEV.

  A sample ALPHA link command file for a loadable driver is:

      $ link /share=idl_dir:[bin.bin_alpha.drivers]abc gr_tmpl,-
      sys$input/opt/map=junk.map
      !      The linker option file follows:
      idl_exe/share  !Link against the IDL executable. This is a logical name
      abc_dir:abc/library        !Define any object libraries we use.
      Symbol_Vector=(abc_dev=DATA) ! Define the driver def struct as universal.
      $

  A sample VAX link command file for a loadable driver is:

      $ link /share=idl_dir:[bin.bin_vax.drivers]abc gr_tmpl,-
      sys$input/opt/map=junk.map
      !      The linker option file follows:
      idl_exe/share		 !Link against the IDL executable
      abc_dir:abc/library        !Define any object libraries we use.
      Universal = abc_dev        !Define the driver def struct as universal.
      !
      !  Define all writable, sharable psects as NOSHR:
      !
      PSECT_ATTR = gns_ccmn, noshr  
      PSECT_ATTR = gns_icmn, noshr
      PSECT_ATTR = abc_combuf, noshr
      PSECT_ATTR = abc_comch, noshr
      PSECT_ATTR = abc_comem, noshr
      PSECT_ATTR = abc_comid, noshr
      $

  If you get an error message to the effect that:
  "WRITABLE PROGRAM SECTIONS must be installed"
  that means that you didn't find all writable sharable psects.
  Examine the linker map (junk.map in this example) that you produced
  and search for Psects that are writable and sharable.  Add their
  names to the PSECT_ATTR list above, to make them not sharable.
  
  */

#include <stdio.h>
#include "export.h"

/* Define the name of YOUR device structure here: */

#define DEVICE_NAME abc_dev	/* The name of our device structure */

extern IDL_DEVICE_DEF DEVICE_NAME;


/* This program simply adds the device structure DEVICE_NAME to the IDL
   device list, and then calls IDL.
   */

main(int argc, char *argv[])
{
  IDL_AddDevice(&DEVICE_NAME, IDL_MSG_EXIT);   /* Insert the abc device */
  IDL_Main(0, argc, argv);	/* Call the main IDL entry */
}






