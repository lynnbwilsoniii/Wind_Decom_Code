c
c    Subroutines for the program udf_lister
c
c     Contents:
c
c
c           logical function open_output
c
c           subroutine write_header
c
c           logical function write_output
c
c           function write_output_omni
c
c           subroutine write_line
c
c
c
c
c
c*******************************************************
c
       logical function open_output(unit_out,script_number)
c
c*******************************************************
c
c     open output file
c
c     6/17/98 by J. Dwyer
c
      include 'Sdf_include.inc' 
      include 'Hex_include.inc'
      include 'include_paths.inc'
c
      integer*4   unit_out   ! file unit of output file
      integer*4   script_number
      character*120     filename       ! complete name of output file
	character*120	test_filename, filename_last
	logical	file_exist

c
      open_output = .false.
c
c
	do 500 iversion=99,1,-1
	if(iversion.ge.10) write(test_filename,510) adjustl(trim(outputdir)),adjustl(trim(script_file_prefix(script_number))), 
     +	   adjustl(trim(outputfile)),iversion
	if(iversion.lt.10) write(test_filename,520) adjustl(trim(outputdir)), adjustl(trim(script_file_prefix(script_number))), 
     +	   adjustl(trim(outputfile)),iversion
510	format(a,a,a,";",i2)
520	format(a,a,a,";",i1)
	inquire(file=test_filename,named=file_exist)
	if(file_exist) goto 550
	filename_last=test_filename
500	continue


c      write(filename, '(a,a60)')
c    1     script_file_prefix(script_number), outputfile

550      open(unit=unit_out,name=filename_last,
     1     status='NEW',RECL=32766, err=1000) ! open output data file
      type *, 'Opened output file: ', adjustl(trim(filename_last))
      filename=filename_last
c
      call write_header(unit_out,script_number)
c
c
      open_output = .true.
      return  !  succussful
1000   open_output = .false.  ! on error go to here
      type *, 'Error opening output file:',
     1     adjustl(trim(outputdir))//adjustl(trim(filename))
      return
      end  ! end open_output
c
c
c
c
c
c*******************************************************
c
       subroutine write_header(unit_out,script_number)
c
c*******************************************************
c
c     Writes header to output file
c
c     7/2/98 by J. Dwyer
c       10/8/98 by J. Dwyer changed to date_and_time
c       6/21/99 fixed datew output
c
      include 'Sdf_include.inc' 
      include 'Hex_include.inc'   ! include type declarations
c
      real  Emid
      real       eflag(41,2)  ! used to output ROM box E ranges
      real       neflag(41)   ! used to output ROM box E ranges
      character*20  datew       ! run date
      byte  timew(8)       ! run time
      integer*4   unit_out   ! file unit of output file
      integer*4   script_number
      integer*4   indexi
      integer*4   Ntitlestring
      integer*4   lastchar
      character*9   line9
      character*20   line20
      character*100     line    ! used to write line in header
      character*12288    titlestring
      logical second_pass    ! used for 2nd loop pass for header line
	integer*4 header_line      
c
      do i = 1,41
        eflag(i,1) = 0.0
        eflag(i,2) = 0.0
        neflag(i) = 0.0
        if (effic_flag(i,1)) then
          eflag(i,1) = 1.0
          neflag(i) = neflag(i)+1.0
        end if
        if (effic_flag(i,2)) then
          eflag(i,2) = 1.0
          neflag(i) = neflag(i)+1.0
        end if
      end do
      line =
     1  ' *** '//script_file_prefix(script_number)//
     1  ' data file generated by Sdf_lister / Mac version ***'
      call date_and_time(datew)	! get run time and date info
      call time(timew)
		second_pass = .false.
		header_line = 0   ! initialize header line counter
		do 700 i=1,12288    ! clear the title string   /gm 11/11/08 -- see udf_lister udf_subrout6.f95
700		titlestring(i:i) = ' '

c
50     format(2x,a100)
51	format(' number of header lines: ',i3,5x,a100)
55     format(a100)  ! for read
60     format(2x,a20)
75     format(2x,a20,2x,a7', 'F9.4,', 'F9.4,',
     1        'F9.7,', 'F9.7,', 'F9.7)
80     format (2x,'script output type = 'i3,/)
85     format(2x,a41,', ',i2,', ',E12.5,', 'E12.5)
c
611         write(unit_out,51)  header_line, scriptheader(script_number,1)
         write(unit_out,50)  scriptheader(script_number,2)
         write(unit_out,50)  scriptheader(script_number,3)
         write(unit_out,50)  scriptheader(script_number,4)
         write(unit_out,50)  scriptheader(script_number,5)
         write(unit_out,50)  scriptheader(script_number,6)
         write(unit_out,50)  scriptheader(script_number,7)
         write(unit_out,50)  scriptheader(script_number,8)
         write(unit_out,50)  scriptheader(script_number,9)
         write(unit_out,50)  scriptheader(script_number,10)
         write(unit_out,80)
     1     script_output_type(script_number)
         write(unit_out,100) line,
     1    datew(1:8),timew,
     1    file_extent_prefix,
     1    calib_file_tof,
     1    calib_file_lo,
     1    calib_file_hi,
     1    calib_file_einctof,
     1    calib_file_geom,
     1    ROMboxhistoryfile,
     1    calib_file_track,
     1    expose_file,
     1    expose_flag,
     1    mask_file,
     1    mask_flag,
     1    KPweight_flag,
     1    Bdir_flag,
     1    randomize_flag,
     1    raw_counts_flag,
     1    select_calib_mode,
     1    istart_year,istart_day,istart_hour,istart_min,
     1    istop_year,istop_day,istop_hour,istop_min,
     1    maximum_rows,
     1    dataformat_flag,
     1    fluence_flag
c
100     format(a100,/,
     1  ' run time: 'a8,2x,8a1,/,
     1  ' prefix on input file = 'a3/,
     1  ' tof calibration file = 'a80/,
     1  ' lo calibration file = 'a80/,
     1  ' hi calibration file = 'a80/,
     1  ' Einc vs tof calibration file = 'a80/,
     1  ' geom factor calibration file = 'a80/,
     1  ' ROM box history file = 'a80/,
     1  ' ROM box track calibration file = 'a80/,
     1  ' time interval window file = 'a80/,
     1  ' time interval window flag = 'i4,/,
     1  ' time interval mask file = 'a80/,
     1  ' time interval mask flag = 'i4,/,
     1  ' KP weighting flag (0: wt=1.0;1: wt=vse)= 'i4,/,
     1  ' B dir weighting flag (0=B vectors,1=unit vectors) = 'i4,/,
     1  ' randomize_flag  ='i3' (1 = randomize PHA; 0 = do not)',/,
     1  ' raw counts flag ='i3' (1= raw # counts only)',/,
     1  ' calibration flag ='i3' (0=noncal,1=cal,-1=no cut)',/,
     1  ' start time (year,day,hour,min) = 'i4,2x,i3,2x,i2,2x,i2,/,
     1  ' stop time (year,day,hour,min) = 'i4,2x,i3,2x,i2,2x,i2,/,
     1  ' maximum number of rows = 'i8,/,
     1  ' data format ='i3' (0=kaleidagraph; 1=IDL)',/,
     1  ' flux or fluence format ='i3' (0=flux, 1=fluence)',/)
c
      if (script_output_type(script_number).eq.1) then  ! ROM data
         write(unit_out,150)
     1    output_sych_flag(script_number),
     1    script_accum_t_flag(script_number),
     1    script_idelta_t(script_number),
     1    script_accum_Nr_flag(script_number),
     1    script_idelta_Nr(script_number),
     1    script_accum_rate_title(script_number),
     1    script_stateab_flag(script_number)
c
150     format(
     1  ' sychronize outputs = 'i3,/,
     1  ' time period to accumulate (flag, time): 'i1,2x,i8,/,
     1  ' # to accum in rate (flag, counts): 'i3,2x,i8,/,
     1  ' rate to accumulate: 'a20/,
     1  ' state A/B flag = 'i3' (0=B;1=A;-1=list both)')
c
c  ROM box energy ranges
      write(unit_out,'(2x)')
      write(unit_out,'(2x,a22)')
     1  'ROM box energy ranges:'
      write(unit_out,'(2x,a50,a33)')
     1  'titles, telescope, Emin (MeV/nuc), Emax (MeV/nuc),',
     1   ' effic low, effic high, effic ave'
      do j = 2, 38
        if ((mdata_ave_writeflag(script_number,j,1).eq.1).or.
     1    (mdata_sect_writeflag(script_number,j,1).eq.1)) then
          write(unit_out,75) mdata_key(j),' TEL1  ',
     1       eflag(j,1)*elo(j,1),eflag(j,1)*ehi(j,1),
     1       eflag(j,1)*effic_low(j,1),
     1       eflag(j,1)*effic_high(j,1),eflag(j,1)*effic(j,1)
          			header_line=header_line + 1
        end if
        if ((mdata_ave_writeflag(script_number,j,2).eq.1).or.
     1    (mdata_sect_writeflag(script_number,j,2).eq.1)) then
          write(unit_out,75) mdata_key(j),' TEL2  ',
     1       eflag(j,2)*elo(j,2),eflag(j,2)*ehi(j,2),
     1       eflag(j,2)*effic_low(j,2),
     1       eflag(j,2)*effic_high(j,2),eflag(j,2)*effic(j,2)
          			header_line=header_line + 1
        end if
        if ((mdata_ave_writeflag(script_number,j,3).eq.1).or.
     1    (mdata_sect_writeflag(script_number,j,3).eq.1)) then
          if (neflag(j).gt.0.0) then
            write(unit_out,75) mdata_key(j),' TEL1&2',
     1       (eflag(j,1)*elo(j,1)+eflag(j,2)*elo(j,2))/neflag(j),
     1       (eflag(j,1)*ehi(j,1)+eflag(j,2)*ehi(j,2))/neflag(j),
     1       (eflag(j,1)*effic_low(j,1)+
     1            eflag(j,2)*effic_low(j,2))/neflag(j),
     1       (eflag(j,1)*effic_high(j,1)+
     1            eflag(j,2)*effic_high(j,2))/neflag(j),
     1       (eflag(j,1)*effic(j,1)+
     1            eflag(j,2)*effic(j,2))/neflag(j)
          			header_line=header_line + 1
          else
           write(unit_out,75) mdata_key(j),' TEL1&2',
     1       0.0, 0.0, 0.0, 0.0, 0.0
               			header_line=header_line + 1
          end if
        end if
      end do
      write(unit_out,75) 'End of list!        ',
     1 '       ',0.0, 0.0, 0.0, 0.0, 0.0
c
c  cuts on data
      write(unit_out,'(2x)')
      write(unit_out,'(2x,a13)') 'cuts on data:'
      write(unit_out,'(2x,a38)')
     1  'titles, cut flag, min value, max value'
      do j = 1, script_Ncolumns(script_number)
         if (script_cutflag(script_number,j).ge.1) then
            write(unit_out,85)
     1        script_titles_raw(script_number,j),
     1        script_cutflag(script_number,j),
     1        script_minvalue(script_number,j),
     1        script_maxvalue(script_number,j)
          			header_line=header_line + 1
         end if
      end do
      write(unit_out,85)
     1 'End of list!                             ',
     1   0, 0.0, 0.0
c
      write(unit_out,'(2x)')
       write(unit_out,60)   '****** titles ******'
       call write_titles(script_number,
     1      titlestring, Ntitlestring)
        write(unit_out,1000) titlestring


	if(second_pass) goto 610
	second_pass=.true.
c	now add in the fixed number of header lines for this script
	header_line=header_line + 52     ! script type 1 has 52 fixed lines + variable numbers
c	     			type *, 'header line count before rewind: ', header_line
	rewind(unit_out)
		goto 611 
610      endif





c
c	Write the contents of the config file and script files to the output data file header
      if (script_output_type(script_number).eq.2) then   ! PHA data
        write(unit_out,200)
     1     script_stateab_flag(script_number)
200     format(
     1   ' state A/B flag = 'i3' (0=B;1=A;-1=list both)')
        write(unit_out,'(2x)')
c
c  ROM box energy ranges
      write(unit_out,'(2x)')
      write(unit_out,'(2x,a22)')
     1  'ROM box energy ranges:'
      write(unit_out,'(2x,a50,a33)')
     1  'titles, telescope, Emin (MeV/nuc), Emax (MeV/nuc),',
     1   ' effic low, effic high, effic ave'
      do j = 2, 38
        if ((mdata_ave_writeflag(script_number,j,1).eq.1).or.
     1    (mdata_sect_writeflag(script_number,j,1).eq.1)) then
          write(unit_out,75) mdata_key(j),' TEL1  ',
     1       eflag(j,1)*elo(j,1),eflag(j,1)*ehi(j,1),
     1       eflag(j,1)*effic_low(j,1),
     1       eflag(j,1)*effic_high(j,1),eflag(j,1)*effic(j,1)
               			header_line=header_line + 1
        end if
        if ((mdata_ave_writeflag(script_number,j,2).eq.1).or.
     1    (mdata_sect_writeflag(script_number,j,2).eq.1)) then
          write(unit_out,75) mdata_key(j),' TEL2  ',
     1       eflag(j,2)*elo(j,2),eflag(j,2)*ehi(j,2),
     1       eflag(j,2)*effic_low(j,2),
     1       eflag(j,2)*effic_high(j,2),eflag(j,2)*effic(j,2)
               			header_line=header_line + 1
        end if
        if ((mdata_ave_writeflag(script_number,j,3).eq.1).or.
     1    (mdata_sect_writeflag(script_number,j,3).eq.1)) then
          if (neflag(j).gt.0.0) then
            write(unit_out,75) mdata_key(j),' TEL1&2',
     1       (eflag(j,1)*elo(j,1)+eflag(j,2)*elo(j,2))/neflag(j),
     1       (eflag(j,1)*ehi(j,1)+eflag(j,2)*ehi(j,2))/neflag(j),
     1       (eflag(j,1)*effic_low(j,1)+
     1            eflag(j,2)*effic_low(j,2))/neflag(j),
     1       (eflag(j,1)*effic_high(j,1)+
     1            eflag(j,2)*effic_high(j,2))/neflag(j),
     1       (eflag(j,1)*effic(j,1)+
     1            eflag(j,2)*effic(j,2))/neflag(j)
               			header_line=header_line + 1
          else
           write(unit_out,75) mdata_key(j),' TEL1&2',
     1       0.0, 0.0, 0.0, 0.0, 0.0
               			header_line=header_line + 1
          end if
        end if
      end do
      write(unit_out,75) 'End of list!        ',
     1 '       ',0.0, 0.0, 0.0, 0.0, 0.0
c
c  cuts on data
      write(unit_out,'(2x)')
      write(unit_out,'(2x,a13)') 'cuts on data:'
      write(unit_out,'(2x,a38)')
     1  'titles, cut flag, min value, max value'
      do j = 1, script_Ncolumns(script_number)
         if (script_cutflag(script_number,j).ge.1) then
            write(unit_out,85)
     1        script_titles_raw(script_number,j),
     1        script_cutflag(script_number,j),
     1        script_minvalue(script_number,j),
     1        script_maxvalue(script_number,j)
               			header_line=header_line + 1
         end if
      end do
      write(unit_out,85)
     1 'End of list!                             ',
     1   0, 0.0, 0.0
c
      write(unit_out,'(2x)')
      write(unit_out,60)   '****** titles ******'
       call write_titles(script_number,
     1      titlestring, Ntitlestring)
        write(unit_out,1000) titlestring
        
 	if(second_pass) goto 612
	second_pass=.true.
c	now add in the fixed number of header lines for this script
	header_line=header_line + 49     ! script type 2 has 48 fixed lines + variable numbers
c	     			type *, 'header line count before rewind: ', header_line
	rewind(unit_out)
		goto 611 
612      endif

 
c
      if (script_output_type(script_number).eq.3) then  ! histogram data
         write(unit_out,300)
     1    output_sych_flag(script_number),
     1    script_accum_t_flag(script_number),
     1    script_idelta_t(script_number),
     1    script_accum_Nr_flag(script_number),
     1    script_idelta_Nr(script_number),
     1    script_accum_rate_title(script_number),
     1    script_accum_Nh_flag(script_number),
     1    script_idelta_Nh(script_number)
c
300     format(
     1  ' sychronize outputs = 'i3,/,
     1  ' time period to accumulate (flag, time): 'i1,2x,i8,/,
     1  ' # to accum in rate (flag, counts): 'i3,2x,i8,/,
     1  ' rate to accumulate: 'a20/,
     1  ' # to accum in hist (flag, counts): 'i3,2x,i8)
c
350       format(2x,a20,', ', i5', ', F9.4', ', F9.4', ', i1)
360       format(2x,a18, i5)
c
      write(unit_out,'(2x)')
      write(unit_out,'(2x,a21)')  'histogram parameters:'
       write(unit_out,360)   'array dimension = ',
     1       script_Nhistcolumns(script_number)
        do k = 1, script_Nhistcolumns(script_number)
           write(unit_out,350)
     1      script_histtitles(script_number, k),
     1      script_Nhist(script_number, k),
     1      script_histmin(script_number, k),
     1      script_histmax(script_number, k),
     1      script_logflag(script_number, k)
               			header_line=header_line + 1
        end do
c cuts on data
      write(unit_out,'(2x)')
      write(unit_out,'(2x,a13)') 'cuts on data:'
      write(unit_out,'(2x,a38)')
     1  'titles, cut flag, min value, max value'
      do j = 1, script_Ncolumns(script_number)
         if (script_cutflag(script_number,j).ge.1) then
            write(unit_out,85)
     1        script_titles_raw(script_number,j),
     1        script_cutflag(script_number,j),
     1        script_minvalue(script_number,j),
     1        script_maxvalue(script_number,j)
               			header_line=header_line + 1
         end if
      end do
c
        write(unit_out,'(2x)')
        write(unit_out,60)   '****** titles ******'
        titlestring(1:49) =
     1    ' Time, year, day of the year, delta_t/2,'
        indexi = 50
        Ntitlestring = indexi-1
        write(unit_out,1000) titlestring(1:(indexi-1))
        
        	if(second_pass) goto 613
	second_pass=.true.
c	now add in the fixed number of header lines for this script
	header_line=header_line + 50     ! script type 3 has 50 fixed lines + variable numbers
c	     			type *, 'header line count before rewind: ', header_line
	rewind(unit_out)
		goto 611 
613      endif

        
c
      if (script_output_type(script_number).eq.4) then  ! PHA flux data
        write(unit_out,400)
     1    output_sych_flag(script_number),
     1    script_accum_t_flag(script_number),
     1    script_idelta_t(script_number),
     1    script_accum_Nr_flag(script_number),
     1    script_idelta_Nr(script_number),
     1    script_accum_rate_title(script_number),
     1    script_accum_Nphaf_flag(script_number),
     1    script_idelta_Nphaf(script_number)
c
400     format(
     1  ' sychronize outputs = 'i3,/,
     1  ' time period to accumulate (flag, time): 'i1,2x,i8,/,
     1  ' # to accum in rate (flag, counts): 'i3,2x,i8,/,
     1  ' rate to accumulate: 'a20/,
     1  ' # to accum in pha flux (flag, counts): 'i3,2x,i8)
c
        write(unit_out,'(2x)')
        write(unit_out,465)
     1  'title, Emin,Emax,Mmin,Mmax,mass,charge,slant,tel'
        titlestring(1:41) =
     1    ' Time, year, day of the year, delta_t/2, '
        indexi = 42
        do k = 1, script_Nphafluxcolumns(script_number)
          write(unit_out,485)
     1      script_phafluxtitles(script_number,k),
     1      script_phaflux_Ebins(script_number,1,k),
     1      script_phaflux_Ebins(script_number,2,k),
     1      script_phaflux_Mbins(script_number,1,k),
     1      script_phaflux_Mbins(script_number,2,k),
     1      phaflux_m(script_number,k),
     1      phaflux_z(script_number,k),
     1      PHA_slant_flag(script_number,k),
     1      script_tel_flag(script_number,k)
          			header_line=header_line + 1
           Emid = (script_phaflux_Ebins(script_number,1,k)+
     1           script_phaflux_Ebins(script_number,2,k))/2.0
           line20 =  script_phafluxtitles(script_number,k)
           call strip_blanks20(line20,lastchar)
           if (script_sector_flag(script_number,k).eq.'SECT') then
              do j = 1,8
                titlestring(indexi:(indexi+lastchar)) =
     1              line20(1:lastchar)//' '
                 indexi = indexi+lastchar
                 write(titlestring(indexi:(indexi+9)), 475)   Emid
                           			header_line=header_line + 1
                 indexi=indexi+10
                 titlestring(indexi:(indexi+14)) =
     1                ' MeV/nuc (sect '
                 indexi=indexi+15
                 write(titlestring(indexi:indexi), '(I1)')   j
                           			header_line=header_line + 1
                 indexi = indexi+1
                 titlestring(indexi:(indexi+9)) = '), sigma, '
                 indexi=indexi+10
               end do
           end if
           if (script_sector_flag(script_number,k).eq.'AVER') then
              titlestring(indexi:(indexi+lastchar)) =
     1              line20(1:lastchar)//' '
               indexi = indexi+lastchar+1
               write(titlestring(indexi:(indexi+9)), 475)   Emid
                indexi=indexi+10
                   titlestring(indexi:(indexi+16)) =
     1              ' MeV/nuc, sigma, '
                indexi=indexi+17
           end if
        end do
       Ntitlestring = indexi-1
c  cuts on data
      write(unit_out,'(2x)')
      write(unit_out,'(2x,a13)') 'cuts on data:'
      write(unit_out,'(2x,a38)')
     1  'titles, cut flag, min value, max value'
      do j = 1, script_Ncolumns(script_number)
         if (script_cutflag(script_number,j).ge.1) then
            write(unit_out,85)
     1        script_titles_raw(script_number,j),
     1        script_cutflag(script_number,j),
     1        script_minvalue(script_number,j),
     1        script_maxvalue(script_number,j)
               			header_line=header_line + 1
         end if
      end do
      write(unit_out,85)
     1 'End of list!                             ',
     1   0, 0.0, 0.0
c
        write(unit_out,'(2x)')
        write(unit_out,60)   '****** titles ******'
        write(unit_out,1000) titlestring(1:(indexi-1))
465     format(2x,a56)
475     format(' 'F9.4)
485     format(2x,a20,F9.4,F9.4,F9.4,F9.4,F9.4,F9.4,4x,a4)

	if(second_pass) goto 614
	second_pass=.true.
c	now add in the fixed number of header lines for this script
	header_line=header_line + 50     ! script type 4 has ?? fixed lines + variable numbers
c	     			type *, 'header line count before rewind: ', header_line
	rewind(unit_out)
		goto 611 
614      endif

c
      if (script_output_type(script_number).eq.5) then  ! OMNI rates
        write(unit_out,500)
     1     script_stateab_flag(script_number)
500     format(
     1   ' state A/B flag = 'i3' (0=B;1=A;-1=list both)')
c
c  ROM box energy ranges
      write(unit_out,'(2x)')
      write(unit_out,'(2x,a22)')
     1  'ROM box energy ranges:'
      write(unit_out,'(2x,a50,a33)')
     1  'titles, telescope, Emin (MeV/nuc), Emax (MeV/nuc),',
     1   ' effic low, effic high, effic ave'
      do j = 2, 38
        if ((mdata_ave_writeflag(script_number,j,1).eq.1).or.
     1    (mdata_sect_writeflag(script_number,j,1).eq.1)) then
          write(unit_out,75) mdata_key(j),' TEL1  ',
     1       eflag(j,1)*elo(j,1),eflag(j,1)*ehi(j,1),
     1       eflag(j,1)*effic_low(j,1),
     1       eflag(j,1)*effic_high(j,1),eflag(j,1)*effic(j,1)
               			header_line=header_line + 1
        end if
        if ((mdata_ave_writeflag(script_number,j,2).eq.1).or.
     1    (mdata_sect_writeflag(script_number,j,2).eq.1)) then
          write(unit_out,75) mdata_key(j),' TEL2  ',
     1       eflag(j,2)*elo(j,2),eflag(j,2)*ehi(j,2),
     1       eflag(j,2)*effic_low(j,2),
     1       eflag(j,2)*effic_high(j,2),eflag(j,2)*effic(j,2)
               			header_line=header_line + 1
        end if
        if ((mdata_ave_writeflag(script_number,j,3).eq.1).or.
     1    (mdata_sect_writeflag(script_number,j,3).eq.1)) then
          if (neflag(j).gt.0.0) then
            write(unit_out,75) mdata_key(j),' TEL1&2',
     1       (eflag(j,1)*elo(j,1)+eflag(j,2)*elo(j,2))/neflag(j),
     1       (eflag(j,1)*ehi(j,1)+eflag(j,2)*ehi(j,2))/neflag(j),
     1       (eflag(j,1)*effic_low(j,1)+
     1            eflag(j,2)*effic_low(j,2))/neflag(j),
     1       (eflag(j,1)*effic_high(j,1)+
     1            eflag(j,2)*effic_high(j,2))/neflag(j),
     1       (eflag(j,1)*effic(j,1)+
     1            eflag(j,2)*effic(j,2))/neflag(j)
               			header_line=header_line + 1
          else
           write(unit_out,75) mdata_key(j),' TEL1&2',
     1       0.0, 0.0, 0.0, 0.0, 0.0
               			header_line=header_line + 1
          end if
        end if
      end do
      write(unit_out,75) 'End of list!        ',
     1 '       ',0.0, 0.0, 0.0, 0.0, 0.0
c
c  cuts on data
      write(unit_out,'(2x)')
      write(unit_out,'(2x,a13)') 'cuts on data:'
      write(unit_out,'(2x,a38)')
     1  'titles, cut flag, min value, max value'
      do j = 1, script_Ncolumns(script_number)
         if (script_cutflag(script_number,j).ge.1) then
            write(unit_out,85)
     1        script_titles_raw(script_number,j),
     1        script_cutflag(script_number,j),
     1        script_minvalue(script_number,j),
     1        script_maxvalue(script_number,j)
         end if
      end do
      write(unit_out,85)
     1 'End of list!                             ',
     1   0, 0.0, 0.0
c
      write(unit_out,'(2x)')
       write(unit_out,60)   '****** titles ******'
       call write_titles(script_number,
     1      titlestring, Ntitlestring)
        write(unit_out,1000) titlestring
      endif
c
c
1000       format(a)
c
       return
       end  ! end write_header
c
c
c
c
c
c****************************************************
c
       logical function write_output(unit_out,script_number,
     1         start_t, stop_t)
c
c****************************************************
c
c      writes data to output file with file unit=unit_out
c      returns .false. if number of output lines written exceeds
c      specified value, .true. otherwise.
c
c     6/17/98 by J. Dwyer
c     9/16/98 added if (indexi.gt.1) to write
c     9/21/98 fixed output problem
c     6/22/99 changed dt/2 to exponential format
c     2/5/01  no longer output at least one PHA record per major frame filled with -1's
c     2/6/01  fixed bug from 2/5/01 fix
c
      include 'Sdf_include.inc' 
      include 'Hex_include.inc'
c
      real         doy_real
      real         half_delta_t  ! 1/2 of elapsed time interval (sec)
      real         dt       !   elapsed time interval (sec)
      integer*4	    start_t
      integer*4	    stop_t
      integer*4     unit_out        ! file unit for script file
      integer*4     script_number    ! number of script that is being processed
      integer*4     Npha_do   ! number of PHA events to do
      integer*4     i,j,k,l,kk    ! loop indices
      integer*4     mid_time
      integer*4     yr, mo, dy, hr, mn, se, doy
      integer*4     indexi     ! last index of outputstring written to
      character*20   isotime   ! sampex_timecon isotime array
      character*12288   outputstring
c
      mid_time = (stop_t+start_t)/2
      half_delta_t = (stop_t-start_t)/2.0
      call sampex_timcon(mid_time,yr,mo,dy,hr,mn,se,doy,isotime)
      doy_real = doy+(3600.0*hr+60.0*mn+se)/86400.0
c
c
      if (fluence_flag.eq.0) dt = 1.0
      if (fluence_flag.eq.1) dt = (stop_t-start_t)
c
      Npha_do = 1
      if (script_output_type(script_number).eq.2) then
         Npha_do = 0
         if (Npha_good(script_number).gt.0)
     1       Npha_do = Npha_good(script_number)
      end if
c
      do kk = 1, Npha_do
        indexi = 1
c
       if (sat_writeflag(script_number).eq.1)
     1      call write_line(indexi, outputstring,
     1   1.0*saturation(script_number), .true., .false.,
     1                dataformat_flag)
c
c    ****** PHA data  *******
      if (script_output_type(script_number).eq.2) then
        if (Npha_good(script_number).gt.0) then
          k  = PHA_index_good(kk,script_number)
c
          if (pha_writeflag(script_number,1).eq.1)
     1       call write_line(indexi, outputstring,
     1          Einc(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,2).eq.1)
     1       call write_line(indexi, outputstring,
     1          mass(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,3).eq.1)
     1       call write_line(indexi, outputstring,
     1          MeV(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,4).eq.1)
     1       call write_line(indexi, outputstring,
     1          nsec(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,5).eq.1)
     1       call write_line(indexi, outputstring,
     1          1.0*epha(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,6).eq.1)
     1       call write_line(indexi, outputstring,
     1          1.0*tpha(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,7).eq.1)
     1       call write_line(indexi, outputstring,
     1          1.0*ramp(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,8).eq.1)
     1       call write_line(indexi, outputstring,
     1          1.0*tel(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,9).eq.1)
     1       call write_line(indexi, outputstring,
     1          1.0*cn(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,10).eq.1)
     1       call write_line(indexi, outputstring,
     1          1.0*slant(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,11).eq.1)
     1       call write_line(indexi, outputstring,
     1          1.0*ssd2(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,12).eq.1)
     1       call write_line(indexi, outputstring,
     1          1.0*ab(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,13).eq.1)
     1       call write_line(indexi, outputstring,
     1          1.0*rom(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,14).eq.1)
     1       call write_line(indexi, outputstring,
     1         1.0*spin(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,15).eq.1)
     1       call write_line(indexi, outputstring,
     1          1.0*sect(k), .true., .false.,
     1                dataformat_flag)
          if (pha_writeflag(script_number,16).eq.1)
     1       call write_line(indexi, outputstring,
     1          1.0*effic_pha(k), .true., .false.,
     1                dataformat_flag)
c
        else
          do i = 1,16
            if (pha_writeflag(script_number,i).eq.1)
     1       call write_line(indexi, outputstring,
     1          -1.0, .true., .false.,
     1                dataformat_flag)
          end do
        end if    ! end if Npha_good(script_number).gt.0
      end if     ! end if script_output_type(script_number).eq.2
c
c    ****** discriminator data  *******
      do  i=1,3
        if (disc_writeflag(script_number,i).eq.1)
     1      then
          call write_line(indexi, outputstring,
     1      dt*disc_ave(i),
     1     (disc_ave_flag(i).eq.1), .true.,
     1                dataformat_flag)
          call write_line(indexi, outputstring,
     1     dt*disc_ave_err(i),
     1     (disc_ave_flag(i).eq.1), .true.,
     1                 dataformat_flag)
         end if
      end do
c
c    ****** D data  *******
      do  j=1,3
        if (D_writeflag(script_number,j).eq.1)
     1      then
          call write_line(indexi, outputstring,
     1      dt*D_ave(j),
     1     (D_ave_flag(j).eq.1), .true.,
     1                dataformat_flag)
          call write_line(indexi, outputstring,
     1     dt*D_ave_err(j),
     1     (D_ave_flag(j).eq.1), .true.,
     1                 dataformat_flag)
         end if
      end do
c
c    ****** unsectored data  *******
      do   j = 1,3
        if (mdata_ave_writeflag(script_number,42,j).eq.1)
     1    then
            call write_line(indexi, outputstring,
     1     dt*mdata_ave(42,j),
     1     (mdata_ave_flag(42,j).eq.1), .true.,
     1                dataformat_flag)
            call write_line(indexi, outputstring,
     1     dt*mdata_ave_err(42,j),
     1     (mdata_ave_flag(42,j).eq.1), .true.,
     1                 dataformat_flag)
         end if
      end do
      do  i=1,41
        do   j = 1,3
          if (mdata_ave_writeflag(script_number,i,j).eq.1)
     1      then
            call write_line(indexi, outputstring,
     1     dt*mdata_ave(i,j),
     1     (mdata_ave_flag(i,j).eq.1), .true.,
     1                dataformat_flag)
            call write_line(indexi, outputstring,
     1     dt*mdata_ave_err(i,j),
     1     (mdata_ave_flag(i,j).eq.1), .true.,
     1                 dataformat_flag)
           end if
         end do
      end do
c
c    ****** sectored data  *******

      do  j = 1,3
        do   l = 1,8
          if (mdata_sect_writeflag(script_number,42,j).eq.1)
     1      then
            call write_line(indexi, outputstring,
     1     dt*mdata_sect(42,j,l),
     1     (mdata_sect_flag(42,j,l).eq.1), .true.,
     1                dataformat_flag)
            call write_line(indexi, outputstring,
     1     dt*mdata_sect_err(42,j,l),
     1     (mdata_sect_flag(42,j,l).eq.1), .true.,
     1                 dataformat_flag)
           end if
        end do
      end do
      do  i=1,41
        do  j = 1,3
          do   l = 1,8
          if (mdata_sect_writeflag(script_number,i,j).eq.1)
     1      then
            call write_line(indexi, outputstring,
     1     dt*mdata_sect(i,j,l),
     1     (mdata_sect_flag(i,j,l).eq.1), .true.,
     1                dataformat_flag)
            call write_line(indexi, outputstring,
     1     dt*mdata_sect_err(i,j,l),
     1     (mdata_sect_flag(i,j,l).eq.1), .true.,
     1                 dataformat_flag)
           end if
          end do
        end do
      end do
c
cccccccccccccc Ratio data ccccccccccccccccccc
      if (Nratios(script_number).gt.0) then
        do i = 1, Nratios(script_number)
          if (ratio_writeflag(script_number,i).eq.1) then
          call write_line(indexi, outputstring,
     1       rates_ratio(i),
     1       (ratio_good(i).eq.1),
     1      .true.,dataformat_flag)
          call write_line(indexi, outputstring,
     1       rates_ratio_err(i),
     1       (ratio_good(i).eq.1),
     1        .true., dataformat_flag)
          end if
        end do
      end if
c
cccccccccccccc STEP key parameter data ccccccccccccccccccc
      do j = 1, 6
        if (STEPkp_writeflag(script_number,j).eq.1) then
          call write_line(indexi, outputstring,
     1       STEPkp_ave(j),
     1       (STEPkp_ave_flag(j).eq.1),
     1      .true.,dataformat_flag)
        end if
      end do
c
cccccccccccccc STEP housekeeping data ccccccccccccccccccc
      do j = 1, 6
        if (hk_writeflag(script_number,j).eq.1) then
          call write_line(indexi, outputstring,
     1       hk_ave(j),
     1       (hk_ave_flag(j).eq.1),
     1      .false.,dataformat_flag)
        end if
      end do
c
cccccccccccccc key parameter data ccccccccccccccccccc
      do j = 1, 37
        if (kp_writeflag(script_number,j).eq.1) then
          call write_line(indexi, outputstring,
     1       kp_ave(j),
     1       (kp_ave_flag(j).eq.1),
     1      .false.,dataformat_flag)
        end if
      end do
c
      if (indexi.gt.1) then
         write(unit_out,100) mo, dy, yr, hr, mn, se,
     1   yr, doy_real,
     1   half_delta_t,
     1   outputstring(1:(indexi-1))
c
        Noutput_lines(script_number) =
     1      Noutput_lines(script_number)+1
      end if
c
      end do   ! end kk loop
c
100 	   format(1x,i2'/'i2'/'i4,2x,i2':'i2':'i2,
     1      ', 'i4', 'f12.8', 'E12.5',',a)


c
      write_output = .true.
      if (Noutput_lines(script_number).ge.
     1   maximum_rows) write_output = .false.
      return
      end   ! end write_output
c
c
c
c
c****************************************************
c
       function write_output_omni
     1   (unit_omni,script_number,
     1         start_t, stop_t)
c
c****************************************************
c
c      writes OMNI data to output file with file unit=unit_omni
c      returns .false. if number of output lines written exceeds
c      specified value, .true. otherwise.
c
c     6/17/98 by J. Dwyer
c
      include 'Sdf_include.inc' 
      include 'Hex_include.inc'
      logical	write_output_omni    ! function declaration
c
      real  doy_real_1x
      real  doy_real_2x
      real  doy_real_4x
      real  half_delta_t_1x  ! 1/2 of elapsed time interval (sec)
      real  half_delta_t_2x  ! 1/2 of elapsed time interval (sec)
      real  half_delta_t_4x  ! 1/2 of elapsed time interval (sec)
      integer*4	  start_t
      integer*4	  stop_t
      integer*4   mid_time_1x
      integer*4   mid_time_2x
      integer*4   mid_time_4x
      integer*4   yr_1x, mo_1x, dy_1x, hr_1x,
     1             mn_1x, se_1x, doy_1x
      integer*4   yr_2x, mo_2x, dy_2x, hr_2x,
     1             mn_2x, se_2x, doy_2x
      integer*4   yr_4x, mo_4x, dy_4x, hr_4x,
     1             mn_4x, se_4x, doy_4x
      integer*4   script_number
      integer*4   unit_omni   ! output file unit
      integer*4   saturation_flag   ! 1 if any rate is saturated in mf, 0 otherwise
      integer*4   indexi     ! last index of outputstring written to
      character*20   isotime   ! sampex_timecon isotime array
      character*12288   outputstring
c
      mid_time_1x = (stop_t+start_t)/2
      half_delta_t_1x = (stop_t-start_t)/2.0
      call sampex_timcon(mid_time_1x,yr_1x,mo_1x,dy_1x,
     1                             hr_1x,mn_1x,se_1x,doy_1x,isotime)
      doy_real_1x = doy_1x+
     1                (3600.0*hr_1x+60.0*mn_1x+se_1x)/86400.0
c
      mid_time_2x = (stop_t+start_t-
     1                     spin_period*ave_spins(mf_type))/2
      half_delta_t_2x = (stop_t-start_t+
     1                    spin_period*ave_spins(mf_type))/2.0
      call sampex_timcon(mid_time_2x,yr_2x,mo_2x,dy_2x,
     1                             hr_2x,mn_2x,se_2x,doy_2x,isotime)
      doy_real_2x = doy_2x+
     1                (3600.0*hr_2x+60.0*mn_2x+se_2x)/86400.0
c
      mid_time_4x = (stop_t+start_t-
     1                     3.0*spin_period*ave_spins(mf_type))/2
      half_delta_t_4x = (stop_t-start_t+
     1                    3.0*spin_period*ave_spins(mf_type))/2.0
      call sampex_timcon(mid_time_4x,yr_4x,mo_4x,dy_4x,
     1                             hr_4x,mn_4x,se_4x,doy_4x,isotime)
      doy_real_4x = doy_4x+
     1                (3600.0*hr_4x+60.0*mn_4x+se_4x)/86400.0
c
c              4 x matrices
c           *****************
        indexi=1
        saturation_flag = 0
        do  i=1,38
          if ((mdata_ave_flag(i,3).eq.-1).and.
     1       (mdata_x(i).eq.4)) saturation_flag = 1
        end do
        do i=1,10
           call write_line(indexi, outputstring,
     1       0.0, .false., .false.,
     1           dataformat_flag)  ! fill in blank spaces
        end do
        do i=1,38
           call write_line(indexi, outputstring,
     1        mdata_ave(i,3),
     1       ((mdata_ave_flag(i,3).eq.1).and.
     1            (mdata_x(i).eq.4)), .true.,
     1             dataformat_flag)
           call write_line(indexi, outputstring,
     1        mdata_ave_err(i,3),
     1        ((mdata_ave_flag(i,3).eq.1).and.
     1                (mdata_x(i).eq.4)), .true.,
     1                dataformat_flag)
        end do
        do i=1,15
           call write_line(indexi, outputstring,
     1       0.0, .false., .false.,
     1           dataformat_flag)    ! fill in blank spaces
        end do
c
         write(unit_omni,1000) mo_4x, dy_4x, yr_4x,
     1         hr_4x, mn_4x, se_4x,
     1         yr_4x,doy_real_4x,
     1         half_delta_t_4x, saturation_flag,
     1         outputstring(1:(indexi-1))
c
c                2 x matrices
c           *****************
        saturation_flag = 0
        do  i=1,38
          if ((mdata_ave_flag(i,3).eq.-1).and.
     1       (mdata_x(i).eq.2)) saturation_flag = 1
        end do
c
        indexi=1
        do i=1,10
           call write_line(indexi, outputstring,
     1       0.0, .false., .false.,
     1          dataformat_flag)  ! fill in blank spaces
        end do
        do i=1,38
           call write_line(indexi, outputstring,
     1       mdata_ave(i,3),
     1       ((mdata_ave_flag(i,3).eq.1).and.
     1             (mdata_x(i).eq.2)), .true.,
     1              dataformat_flag)
            call write_line(indexi, outputstring,
     1        mdata_ave_err(i,3),
     1       ((mdata_ave_flag(i,3).eq.1).and.
     1                (mdata_x(i).eq.2)), .true.,
     1                dataformat_flag)
        end do
        do i=1,15
          call write_line(indexi, outputstring,
     1        0.0, .false., .false.,
     1              dataformat_flag)    ! fill in blank spaces
        end do
c
         write(unit_omni,1000) mo_2x, dy_2x, yr_2x,
     1         hr_2x, mn_2x, se_2x,
     1         yr_2x,doy_real_2x,
     1         half_delta_t_2x, saturation_flag,
     1         outputstring(1:(indexi-1))
c
c
c               1x matrices
c          *****************
        saturation_flag = 0
        do  i=1,3
          if (disc_ave_flag(i).eq.-1) saturation_flag = 1
        end do
        if (D_ave_flag(i).eq.-1) saturation_flag = 1
        do i=1,38
          if ((mdata_ave_flag(i,3).eq.-1).and.
     1        (mdata_x(i).eq.1)) saturation_flag = 1
        end do
        if (mdata_ave_flag(42,3).eq.-1) saturation_flag = 1  ! VSE rate
c
         indexi = 1
c
        do i=1,3
          call write_line(indexi, outputstring,
     1        disc_ave(i), (disc_ave_flag(i).eq.1), .true.,
     1                dataformat_flag)
          call write_line(indexi, outputstring,
     1        disc_ave_err(i), (disc_ave_flag(i).eq.1), .true.,
     1                dataformat_flag)
        end do
c
        call write_line(indexi, outputstring,
     1     D_ave(3), (D_ave_flag(3).eq.1), .true.,
     1                dataformat_flag)
        call write_line(indexi, outputstring,
     1     D_ave_err(3), (D_ave_flag(3).eq.1), .true.,
     1                dataformat_flag)
c
        call write_line(indexi, outputstring,
     1       mdata_ave(42,3),
     1       (mdata_ave_flag(42,3).eq.1), .true.,
     1              dataformat_flag)
        call write_line(indexi, outputstring,
     1        mdata_ave_err(42,3),
     1       (mdata_ave_flag(42,3).eq.1), .true.,
     1                dataformat_flag)
c
        do i=1,38
           call write_line(indexi, outputstring,
     1       mdata_ave(i,3),
     1       ((mdata_ave_flag(i,3).eq.1).and.
     1             (mdata_x(i).eq.1)), .true.,
     1              dataformat_flag)
            call write_line(indexi, outputstring,
     1        mdata_ave_err(i,3),
     1       ((mdata_ave_flag(i,3).eq.1).and.
     1                (mdata_x(i).eq.1)), .true.,
     1                dataformat_flag)
        end do
c
cccccccccccccc STEP key parameter data ccccccccccccccccccc
      do j = 1, 6
        if (STEPkp_writeflag(script_number,j).eq.1) then
          call write_line(indexi, outputstring,
     1       STEPkp_ave(j),
     1       (STEPkp_ave_flag(j).eq.1),
     1      .true.,dataformat_flag)
        end if
      end do
c
cccccccccccccc STEP housekeeping data ccccccccccccccccccc
      do j = 1, 6
        if (hk_writeflag(script_number,j).eq.1) then
          call write_line(indexi, outputstring,
     1       hk_ave(j),
     1       (hk_ave_flag(j).eq.1),
     1      .false.,dataformat_flag)
        end if
      end do
c
cccccccccccccc key parameter data ccccccccccccccccccc
      do j = 1, 37
        if (kp_writeflag(script_number,j).eq.1) then
          call write_line(indexi, outputstring,
     1       kp_ave(j),
     1       (kp_ave_flag(j).eq.1),
     1      .false.,dataformat_flag)
        end if
      end do
c
c
          write(unit_omni,1000) mo_1x, dy_1x, yr_1x,
     1         hr_1x, mn_1x, se_1x,
     1         yr_1x,doy_real_1x,
     1         half_delta_t_1x, saturation_flag,
     1         outputstring(1:(indexi-1))
c
1000 	   format(1x,i2'/'i2'/'i4,2x,i2':'i2':'i2,
     1          ', 'i4', 'f12.8', 'f12.4', 'i1',',a)
c
      Noutput_lines(script_number) =
     1      Noutput_lines(script_number)+3
       write_output_omni = .true.
      if (Noutput_lines(script_number).ge.
     1   maximum_rows) write_output_omni = .false.
      return
      end   ! end write_output_omni
c
c
c
c
c
c************************************************
c
        subroutine write_line(indexi, outputstring, x,
     1             xflag, nonzero_flag,
     1              dataformat_flag)
c
c************************************************
c
c    write real variable, x, to output string, outputstring, used to write
c    row of data to output file.
c
c    6/17/98 by J. Dwyer
c

      real     x   ! variable to be written to string
      integer*4    indexi     ! last index written to outputstring
      integer*4   dataformat_flag    ! Output data format (0=kaleidagraph format, 1=IDL format)
      logical    xflag   ! .true.= write x. .false.=don't write x
      logical    xnonzero  ! .true.= x.ne.0, .false.=x.eq.0
      logical    nonzero_flag  ! if .true. write only nonzero values of x. if .false. write all x values
      character*12288   outputstring
c
      xnonzero = .true.
      if (nonzero_flag) xnonzero = (x.ne.0.0)
c
      if (dataformat_flag.eq.0) then
         if ((xflag).and.(xnonzero)) then
             write(outputstring(indexi:(indexi+14)), 100)   x
             indexi = indexi+14
         else
             write(outputstring(indexi:(indexi+1)), 200)
             indexi = indexi+1
         end if
      end if
c
      if (dataformat_flag.eq.1) then
         if (xflag) then
             write(outputstring(indexi:(indexi+14)), 100)   x
             indexi = indexi+14
         else
             write(outputstring(indexi:(indexi+14)), 100)  -9.99E32
             indexi = indexi+14
         end if
      end if
c
100     format(' 'E12.5',')
200     format(',')

c
      return
      end   ! end  write_line
c
c
c
