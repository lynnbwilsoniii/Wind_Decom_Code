c	modification history:
c		2/5/02	comment out integer declaration for 
c			expand_data_packet -- caused compile error /gm
c
c
c     
c    files containing subroutines and functions called by sdf_lister:
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/sdf_subrout.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/sdf_subrout2.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/sdf_ave_subrout.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/sdf_sect_subrout.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/sdf_sect_subrout2.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/sdf_pha_subrout.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/decode_lib.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/time_lib.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/calib_lib.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/open_sdf_sl.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/sdf_mdata.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/sdf_matrix.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/sdf_mask_subrout.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/sdf_omni_subrout.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/sdf_abr_subrout.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/sdf_flux_subrout.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/sdf_STEPKP_subrout.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/trigger_effic.for'
      include '/Users/masongm1/Desktop/fortran_vax/STEP/sdf_rom_spikes/derf.for'

c
c
c***************************************************

      program sdf_lister

c***************************************************
c
c      sdf_lister is a data analysis program for the STEP instrument. 
c      It reads in unformatted SDF files generated by L0_to_sdfkp (file extent prefix = w),
c      decodes and processes the data,
c      and writes the output to a kalidagraph format ASCII file.
c      Include files:
c             'hex_include.for'   ! Also used by L0_to_sdfkp
c             'sdf_include.for' 
c        
c      Written by J. Dwyer using the files hex_to_sdf by E. Salter
c      and pha_lister, pha_fluxes, step_omnirates and
c      step_omnirates_avg by G. Mason
c      12/6/95
c             modifications:
c                    2/6/96 by J. Dwyer added STEP_KP_fluxes time averaging
c                    3/8/96 by J. Dwyer write final accumulation to output upon exiting  
c                    3/21/96 by J. Dwyer added include files to calc. PHA effic, added atomic_charge
c                    3/36/96 by J. Dwyer calculate average efficiency for pha flux boxes
c                    4/4/96 by J. Dwyer added parameters to PHA flux input 
c                    4/8/96 by J. Dwyer added  calib_file_track to subroutine call
c                    4/25/96 by J. Dwyer added PHA_tel_flag
c                    4/26/96 by J. Dwyer changed directory of trigger_effic.for above
c                    4/26/96 by J. Dwyer changed PHA_stateab_flag to PHA_slant_flag
c                    5/10/96 by J. Dwyer reads only sdf_lister.cfg  now
c                    5/10/96 by J. Dwyer (write_flux_matrix.ge.1), allowing other flag values
c                    1/7/96 by J. Dwyer interchanged order of get config and set global variables
c                    2/7/96 by J. Dwyer added sdf_sect_subrout2 to include statements above
c                    2/13/97 by J. Dwyer major overhaul:   
c                                          1) now read in L0_to_sdfkp files.
c                                          2)  New list of Kp variables
c                                          3)  removed kp_append.for include file, use hex_include only
c                                          4)  removed anisotropy fit feature to processing and output
c                                          5)  removed interface file                                             
c		     4/1/98 /gm recompile to get new pointers to 
c			        trigger_effic.for input file     
c
      include 'hex_include.for'   ! include type declarations. Used by hex_to_unf
      include 'sdf_include.for'   ! include type declarations
c
c                                        local variable type declarations
c                                     *****************************
      logical      get_data_packet     ! function declaration     
      logical      evaluate_matrix     ! function declaration
      logical      get_config              ! function declaration
      logical      evaluate_pha           ! function declaration
      integer      idays_per_year       ! function declaration   !changed from logicl type 5/5/08 /gm
      logical      open_output_pha     ! function declaration
      logical      open_output_ave     ! function declaration
      logical      open_output_sect      ! function declaration
      logical      open_output_omni     ! function declaration
      logical      open_output_abr     ! function declaration
      logical      open_output_flux     ! function declaration
      logical      open_output_STEPKP     ! function declaration
      logical      write_output_STEPKP     ! function declaration
      logical      evaluate_pha_flux    ! function declaration
      logical      get_mask              ! function declaration 
      logical      get_expose              ! function declaration     
      integer      check_time             ! function declaration
c      integer      expand_data_packet   ! function declaration      
c
      real   de,el,eh  ! variables read by matrix calibration file
      real   vse_ave, sigma_vse_ave  ! vse rate and error averaged over the sectors
      integer  vse_ave_flag  
      integer  nrow_pha, nrow_ave,
     1    nrow_sect, nrow_omni,
     1    nrow_abr , nrow_flux,
     1    nrow_STEPKP     ! number of rows of data written to output file
      integer      time_flag  ! 0 = continue to skip forward, 1 = continue and analyze, 2 = stop reading and exit
      integer   unit_in, unit_pha,   
     1   unit_ave, unit_sect, unit_omni,
     1   unit_abr, unit_flux,
     1   unit_STEPKP         ! file units   
      logical      output_flag, output_flag_pha, 
     1     output_flag_mat,
     1     output_flag_flux,
     1     output_flag_STEPKP  ! .false. = exceeded maximum number of specified rows in output file, .true. otherwise
      logical      end_flag  ! .true. = end of file reached, .false. otherwise
      logical      iflag    !  .true. = open_sdf was successfully opened input data file, .false. = otherwise
      logical      ifile                ! test for config. file inquire
      logical      open_flag  ! .true. if file opened successfully, .false. otherwise    
      logical      first_mf   ! .true. first good mf; .false. otherwise   
c
c                                        set local variables
c                                   ********************          
      unit_in = 1        ! file unit of input STEP data file (SDF)
      unit_pha = 2      ! file unit of output PHA data file
      unit_ave = 3      ! file unit of output average matrix rate file  
      unit_sect = 4       ! file unit of output anisotropy matrix rate file  
      unit_omni = 5      ! file unit of output omni matrix rate file 
      unit_abr = 6      ! file unit of abridged matrix rate file 
      unit_flux = 7      ! file unit of pha flux file  
      unit_STEPKP = 8   ! file unit of STEP KP flux file    
c                                                                                                     
      nrow_pha = 0   ! rows of data written to output file. Initial value
      nrow_ave = 0   ! rows of data written to output file. Initial value 
      nrow_sect = 0   ! rows of data written to output file. Initial value 
      nrow_omni = 0   ! rows of data written to output file. Initial value
      nrow_abr = 0   ! rows of data written to output file. Initial value
      nrow_flux = 0   ! rows of data written to output file. Initial value
      nrow_STEPKP = 0   ! rows of data written to output file. Initial value
c
      output_flag = .true.    
      expose_interval_flag = 0  ! initial value (pos integer = process time interval ,0 = do not)    
      first_mf = .true.       
c
c
c                                       get configuration file
c                                   ********************  
      configfile = 'sdf_rom_spikes.cfg'   ! default value /gm
c
      inquire(file=configfile,exist=ifile )  ! does file exist?
      if (.not.ifile ) then                 ! if it exists, open it and read data
         print *, 'Configuration file ', configfile ,
     1               ' does not exist! '
      end if
      open_flag = get_config()  ! open config. file and read data
      if (.not.open_flag) then  
        stop  ! error opening config file
      end if
c
c700      print *,
c     1   'Enter config. file name (<60 chars). <ret> for default file.' ! enter file from keyboard
c      accept '(a60)', configfile
c      if (configfile.eq.' ') configfile = 'sdf000.cfg'  ! default value
c
c     inquire(file=configfile,exist=ifile )  ! does file exist?
c      if (.not.ifile ) then                 ! if it exists, open it and read data
c         print *, 'Configuration file ', configfile ,
c     1               ' does not exist!  Try again.'
c         goto 700
c      end if
c      open_flag = get_config()  ! open config. file and read data
c      if (.not.open_flag) then  
c        stop  ! error opening config file
c      end if
c
c                                        set global variables
c                                   ********************
      call initial_global  !  set initial values for global variables
c     
c                                     read mask and expose data
c                                   ***********************
      if (expose_flag.eq.1) then
           idelta_t =0.0    ! don't average over time interval in this version
           open_flag = get_expose()  ! open file and read data
           if (.not.open_flag) then  
             stop  ! error opening expose file
           end if
      end if
c
      if (mask_flag.eq.1) then         
           open_flag = get_mask()  ! open file and read data
           if (.not.open_flag) then  
             stop  ! error opening mask file
           end if
      end if
c
c                                         read calibration data
c                                   ***********************
      call read_pha_cal(calib_file_tof,
     1      calib_file_lo, calib_file_hi,
     1      calib_file_einctof,
     1      tof,hi,lo,cal,
     1      ntof,nlo,nhi,einc_cal,tof_cal, N_cal)  ! read in Eric's PHA calibration files
c
      call read_matrix_cal(calib_file_geom,
     1             calib_file_rombox, calib_file_track,
     1             aom, rate_name,
     1             elo,ehi,de,el,eh,effic, effic_flag) ! read in Eric's matrix rate calibration files
c
      call read_pha_flux_cal(calib_file_phaflux,
     1     pha_flux_names, atomic_charge,
     1     atomic_mass_mid,
     1     atomic_mass_lo,atomic_mass_hi,
     1     PHA_E_mid,
     1     PHA_E_lo, PHA_E_hi,
     1     PHA_slant_flag, PHA_tel_flag,
     1     nfluxes)  ! read in PHA flux calibration file   
c
      do 750 i = 1, nfluxes   !  calculate average efficiency for pha flux boxes
           call step_effic_sub
     1     (atomic_mass_mid(i),
     1     atomic_charge(i),PHA_E_mid(i),
     1     sampex_time,effic_pha_ave(i))     
c        print *, i,  pha_flux_names(i),
c     1     atomic_charge(i),atomic_mass_mid(i),
c     1     atomic_mass_lo(i),atomic_mass_hi(i),
c     1     PHA_E_mid(i),PHA_E_lo(i),PHA_E_hi(I),
c     1     effic_pha_ave(i)    
750     continue
c
c                                           open output files
c                                        *****************
      if (write_pha_data.eq.1) then
         open_flag = open_output_pha(unit_pha)  ! open PHA data output file
         if (.not.open_flag) then   
           stop  ! error opening PHA data output file
         end if
      end if
c
      if (write_ave_matrix.eq.1) then
         open_flag = open_output_ave(unit_ave)  ! open average matrix rate output file
         if (.not.open_flag) then   
           stop  ! error opening average matrix rate output file
         end if
      end if
c
      if (write_sect_matrix.gt.0) then
         open_flag = open_output_sect(unit_sect)  ! open anisotropy matrix rate output file
         if (.not.open_flag) then   
           stop  ! error opening sectored matrix rate output file
         end if
      end if
c
      if (write_omni_matrix.eq.1) then
         open_flag = open_output_omni(unit_omni)  ! open omnirate style matrix rate output file
         if (.not.open_flag) then   
           stop  ! error opening omni matrix rate output file
         end if
      end if
c
      if (write_abr_matrix.eq.1) then
         open_flag = open_output_abr(unit_abr)  ! open abridged matrix rate output file
         if (.not.open_flag) then   
           stop  ! error opening abridged matrix rate output file
         end if
      end if
c
       if (write_flux_matrix.ge.1) then
         open_flag = open_output_flux(unit_flux)  ! open pha flux output file
         if (.not.open_flag) then   
           stop  ! error opening pha flux output file
         end if
      end if
c
      if (write_STEPKP.eq.1) then
         open_flag = open_output_STEPKP(unit_STEPKP)  ! open STEP KP flux output file
         if (.not.open_flag) then   
           stop  ! error opening STEP KP flux output file
         end if
      end if
c
c
c
c                                     Main loop through multiple SDF's
c                              ********************************
c	  Loop through all days between the start and stop days.
      iyear = istart_year
      iday = istart_day
      zero=0
      secinit=secnds(zero)  ! used to keep track of time since last open_sdf call
c
      do while (( ( (iday.le.istop_day).and.(iyear.eq.istop_year) ).or.
     1            (iyear.lt.istop_year) ).and.(output_flag) )  ! continue if start date is LE than stop date
c
        call open_sdf_sl(iyear,iday,unit_in,file_extent_prefix,iflag)  ! open input data file
c
        if (iflag) then  ! check if file exists
c
c	                            Main loop through data packets (mf) in SDF
c                                ********************************
c        
          end_flag = .false.          
          end_flag =  get_data_packet(unit_in)   ! read in data packet (= 1 major frame)           
          time_flag =  check_time()   ! check if packet is within specified start and stop times
          call check_mask    ! test to see if data should be cut
c         
          do while ((.not.end_flag).and.(time_flag.ne.2)
     1                    .and.(output_flag)) 
            
c          read data until the EOF is reached, 
c          the packet time is not past stop time,
c          and the number of output lines does not exceed specified value
c 
            if ((time_flag.eq.1).and.
     1        (mask_interval_flag.eq.0)) then  !  process data if packet time is within specifed start and stop times
c                                              process data
c                                      *****************        
                 if (first_mf) then
                     call  reset_time   !  reset accumulated variables 
                     first_mf = .false.
                 end if     
                 call expand_data_packet   ! decode data in packet 
                 if (nspins.gt.0) then ! trap (encountered 1995-01-19 07:29:33)
c
                     if (expose_flag.eq.1) then
                        call check_expose   ! check if time is in selected interval           
                     else
                        expose_interval_flag = 1   ! process all times              
                     end if                                 
c
                     if (reset_interval.eq.1)  then  
                         do 800 i=1,6 
                            if (NSTEP_KP_fluxes(i).gt.0) then
                               STEP_KP_fluxes_ave(i) = 
     1                        STEP_KP_fluxes_ave(i)/NSTEP_KP_fluxes(i) 
                            else
                                STEP_KP_fluxes_ave(i) = -1.0   
                            end if            
800      continue
                         if (write_STEPKP.eq.1) then
                             output_flag_STEPKP = 
     1                        write_output_STEPKP(unit_STEPKP,
     1                         nrow_STEPKP)
                         end if
                         call ave_kp  !  average kp values over time period  
                         output_flag_mat = 
     1                     evaluate_matrix(unit_ave,unit_sect,
     1                                            unit_omni, unit_abr,
     1                                            nrow_ave, nrow_sect,
     1                                            nrow_omni,nrow_abr,
     1                 vse_ave, sigma_vse_ave,vse_ave_flag)  ! do matrix rates
                         output_flag_flux = 
     1                          evaluate_pha_flux
     1                          (unit_flux, nrow_flux,
     1               vse_ave, sigma_vse_ave,vse_ave_flag)  ! do pha fluxes
                         call  reset_time   !  reset accumulated variables
                     else
                         output_flag_STEPKP = .true.
                         output_flag_mat =  .true.
                         output_flag_flux =  .true.
                     end if  
c
                    if (expose_interval_flag.gt.0) then                     
                        do 850 i=1,6 
                           if (STEP_KP_fluxes(i).ge.0.0) then
                              STEP_KP_fluxes_ave(i) = 
     1                       STEP_KP_fluxes_ave(i) + STEP_KP_fluxes(i)  
                              NSTEP_KP_fluxes(i) = NSTEP_KP_fluxes(i)+1
                           end if
850      continue                       
                        call  get_spin_period  ! get correct spin_period from kp data if available                                                                   
                        call  get_mdata   ! assign 1x,2x and 4x data to one array, mdata
                        call  sum_kp    ! accumulate kp values over time period  
                        call  get_exposure  ! calculates accumulated exposure in each mf
                        output_flag_pha =  
     1                    evaluate_pha(unit_pha, nrow_pha)  ! do PHA events
                        call acquire_counts  ! acumulate pha flux counts
                        stop_time_avg = end_time
                     else
                        output_flag_pha = .true.
                     end if
c
c                   handle time interval for averaging:
                     if (expose_flag.ne.1) then                                                                                          
                        if (time_interval.ge.idelta_t)    ! check if accumulated long enough                      
     1                         reset_interval = 1
                     end if                  
c                
                     output_flag = ((output_flag_pha).and.
     1                           (output_flag_mat).and.
     1                           (output_flag_flux).and.
     1                           (output_flag_STEPKP))  ! .false. if # lines in any output file is larger than specified               
                else
                    print *, 'nspins = 0! skipped mf at ', 
     1                                 start_time_string       
                end if    ! end if nspin  
            end if  ! end if time_flag
c   
            end_flag =  get_data_packet(unit_in)  ! read in next major frame packet                       
            time_flag =  check_time()   ! check if packet is within specified start and stop times
            call check_mask    ! test to see if data should be cut
c           
          end do  ! end loop that reads in packets
c
          close (unit=unit_in,err=1000)   ! close input file
        endif  ! if not a good file
c
        iday = iday + 1  ! go to next day 
c  	  check for a year boundary crossing       
        write(start_time_string(1:4),'(I4)') iyear  
	      if (iday.gt.idays_per_year(iyear)) then
	         iday = 1
	         iyear = iyear + 1
        end if
c	    write out time since last call
	      secnow=secnds(zero)
	      print *, ' Seconds elapsed since last open_SDF call: ',
     1    secnow-secinit
	      secinit=secnow
c            
      end do ! end loop othrough multiple SDF's
c
c       write final accumulation to output
       if (time_interval.gt.0.0) then
        do 900 i=1,6 
                            if (NSTEP_KP_fluxes(i).gt.0) then
                               STEP_KP_fluxes_ave(i) = 
     1                        STEP_KP_fluxes_ave(i)/NSTEP_KP_fluxes(i) 
                            else
                                STEP_KP_fluxes_ave(i) = -1.0   
                            end if            
900      continue
                         if (write_STEPKP.eq.1) then
                             output_flag_STEPKP = 
     1                        write_output_STEPKP(unit_STEPKP,
     1                         nrow_STEPKP)
                         end if
                         call ave_kp  !  average kp values over time period  
                         output_flag_mat = 
     1                     evaluate_matrix(unit_ave,unit_sect,
     1                                            unit_omni, unit_abr,
     1                                            nrow_ave, nrow_sect,
     1                                            nrow_omni,nrow_abr,
     1                 vse_ave, sigma_vse_ave,vse_ave_flag)  ! do matrix rates
                         output_flag_flux = 
     1                          evaluate_pha_flux
     1                          (unit_flux, nrow_flux,
     1               vse_ave, sigma_vse_ave,vse_ave_flag)  ! do pha fluxes
       endif
c
      if (write_pha_data.eq.1) close (unit=unit_pha,err=2000)   ! close output file
      if (write_ave_matrix.eq.1) close (unit=unit_ave,err=2000)   ! close output file
      if (write_sect_matrix.eq.1) close (unit=unit_sect,err=2000)   ! close output file
      if (write_omni_matrix.eq.1) close (unit=unit_omni,err=2000)   ! close output file
      if (write_abr_matrix.eq.1) close (unit=unit_abr,err=2000)   ! close output file
      if (write_flux_matrix.ge.1) close (unit=unit_flux,err=2000)   ! close output file
      if (write_STEPKP.eq.1) close (unit=unit_STEPKP,err=2000)   ! close output file
c
c
      print *, 'sdf_lister is finished'
      stop
c
1000  print *,'Error closing input file!'   ! on error go to here
      stop
2000  print *,'Error closing output file!'   ! on error go to here
      stop
c
      end  ! end sdf_lister
c
c
c
c

